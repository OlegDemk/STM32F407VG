
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000248c  0800ba34  0800ba34  0001ba34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dec0  0800dec0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dec0  0800dec0  0001dec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dec8  0800dec8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dec8  0800dec8  0001dec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800decc  0800decc  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800ded0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b84  200000a0  0800df70  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  0800df70  00020c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027450  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053c5  00000000  00000000  00047520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019f0  00000000  00000000  0004c8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  0004e2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026f66  00000000  00000000  0004fac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000253e2  00000000  00000000  00076a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6233  00000000  00000000  0009be10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00172043  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006df0  00000000  00000000  00172098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ba1c 	.word	0x0800ba1c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800ba1c 	.word	0x0800ba1c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08b      	sub	sp, #44	; 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	80fb      	strh	r3, [r7, #6]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
 80004da:	4613      	mov	r3, r2
 80004dc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80004de:	887b      	ldrh	r3, [r7, #2]
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80004e6:	887b      	ldrh	r3, [r7, #2]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	f1c3 0301 	rsb	r3, r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80004f8:	e061      	b.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80004fa:	88fa      	ldrh	r2, [r7, #6]
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	e018      	b.n	8000536 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	b298      	uxth	r0, r3
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	b29a      	uxth	r2, r3
 800050c:	88bb      	ldrh	r3, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	b29b      	uxth	r3, r3
 8000512:	883a      	ldrh	r2, [r7, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f000 fb47 	bl	8000ba8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	b298      	uxth	r0, r3
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	b29b      	uxth	r3, r3
 8000522:	88ba      	ldrh	r2, [r7, #4]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	b29b      	uxth	r3, r3
 8000528:	883a      	ldrh	r2, [r7, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	f000 fb3c 	bl	8000ba8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	88fa      	ldrh	r2, [r7, #6]
 8000538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053a:	4413      	add	r3, r2
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	429a      	cmp	r2, r3
 8000540:	dde0      	ble.n	8000504 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e018      	b.n	800057e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	b298      	uxth	r0, r3
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	b29a      	uxth	r2, r3
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	b29b      	uxth	r3, r3
 800055a:	883a      	ldrh	r2, [r7, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f000 fb23 	bl	8000ba8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	b298      	uxth	r0, r3
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	b29b      	uxth	r3, r3
 800056a:	88ba      	ldrh	r2, [r7, #4]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	b29b      	uxth	r3, r3
 8000570:	883a      	ldrh	r2, [r7, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	f000 fb18 	bl	8000ba8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	4413      	add	r3, r2
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	429a      	cmp	r2, r3
 8000588:	dde0      	ble.n	800054c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	3301      	adds	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	4413      	add	r3, r2
 8000596:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	3302      	adds	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	4413      	add	r3, r2
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dd09      	ble.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	3b01      	subs	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	4413      	add	r3, r2
 80005b6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	3302      	adds	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80005be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	da99      	bge.n	80004fa <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	372c      	adds	r7, #44	; 0x2c
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd90      	pop	{r4, r7, pc}

080005d0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <ILI9341_SPI_Init+0x14>)
 80005da:	f002 fbdd 	bl	8002d98 <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	2301      	movs	r3, #1
 80005f6:	2201      	movs	r2, #1
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <ILI9341_SPI_Send+0x20>)
 80005fa:	f006 fc6c 	bl	8006ed6 <HAL_SPI_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000154 	.word	0x20000154

0800060c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2110      	movs	r1, #16
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <ILI9341_Write_Command+0x38>)
 800061c:	f002 fbbc 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000620:	2200      	movs	r2, #0
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <ILI9341_Write_Command+0x38>)
 8000626:	f002 fbb7 	bl	8002d98 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffdb 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <ILI9341_Write_Command+0x38>)
 8000638:	f002 fbae 	bl	8002d98 <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000652:	2201      	movs	r2, #1
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <ILI9341_Write_Data+0x38>)
 8000658:	f002 fb9e 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2110      	movs	r1, #16
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <ILI9341_Write_Data+0x38>)
 8000662:	f002 fb99 	bl	8002d98 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffbd 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <ILI9341_Write_Data+0x38>)
 8000674:	f002 fb90 	bl	8002d98 <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000

08000684 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4604      	mov	r4, r0
 800068c:	4608      	mov	r0, r1
 800068e:	4611      	mov	r1, r2
 8000690:	461a      	mov	r2, r3
 8000692:	4623      	mov	r3, r4
 8000694:	80fb      	strh	r3, [r7, #6]
 8000696:	4603      	mov	r3, r0
 8000698:	80bb      	strh	r3, [r7, #4]
 800069a:	460b      	mov	r3, r1
 800069c:	807b      	strh	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80006a2:	202a      	movs	r0, #42	; 0x2a
 80006a4:	f7ff ffb2 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffc9 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffc4 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffbd 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ffb8 	bl	8000648 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80006d8:	202b      	movs	r0, #43	; 0x2b
 80006da:	f7ff ff97 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80006de:	88bb      	ldrh	r3, [r7, #4]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffae 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffa9 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80006f6:	883b      	ldrh	r3, [r7, #0]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffa2 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000704:	883b      	ldrh	r3, [r7, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff9d 	bl	8000648 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800070e:	202c      	movs	r0, #44	; 0x2c
 8000710:	f7ff ff7c 	bl	800060c <ILI9341_Write_Command>
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	480a      	ldr	r0, [pc, #40]	; (8000750 <ILI9341_Reset+0x34>)
 8000726:	f002 fb37 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800072a:	20c8      	movs	r0, #200	; 0xc8
 800072c:	f002 f84a 	bl	80027c4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2110      	movs	r1, #16
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <ILI9341_Reset+0x34>)
 8000736:	f002 fb2f 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_Delay(200);
 800073a:	20c8      	movs	r0, #200	; 0xc8
 800073c:	f002 f842 	bl	80027c4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000740:	2201      	movs	r2, #1
 8000742:	2120      	movs	r1, #32
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <ILI9341_Reset+0x34>)
 8000746:	f002 fb27 	bl	8002d98 <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000762:	2036      	movs	r0, #54	; 0x36
 8000764:	f7ff ff52 	bl	800060c <ILI9341_Write_Command>
HAL_Delay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f002 f82b 	bl	80027c4 <HAL_Delay>
	
switch(screen_rotation) 
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d837      	bhi.n	80007e4 <ILI9341_Set_Rotation+0x90>
 8000774:	a201      	add	r2, pc, #4	; (adr r2, 800077c <ILI9341_Set_Rotation+0x28>)
 8000776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077a:	bf00      	nop
 800077c:	0800078d 	.word	0x0800078d
 8000780:	080007a3 	.word	0x080007a3
 8000784:	080007b9 	.word	0x080007b9
 8000788:	080007cf 	.word	0x080007cf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800078c:	2048      	movs	r0, #72	; 0x48
 800078e:	f7ff ff5b 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 8000794:	22f0      	movs	r2, #240	; 0xf0
 8000796:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 800079a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079e:	801a      	strh	r2, [r3, #0]
			break;
 80007a0:	e021      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80007a2:	2028      	movs	r0, #40	; 0x28
 80007a4:	f7ff ff50 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 80007aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 80007b2:	22f0      	movs	r2, #240	; 0xf0
 80007b4:	801a      	strh	r2, [r3, #0]
			break;
 80007b6:	e016      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80007b8:	2088      	movs	r0, #136	; 0x88
 80007ba:	f7ff ff45 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 80007c0:	22f0      	movs	r2, #240	; 0xf0
 80007c2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 80007c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ca:	801a      	strh	r2, [r3, #0]
			break;
 80007cc:	e00b      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80007ce:	20e8      	movs	r0, #232	; 0xe8
 80007d0:	f7ff ff3a 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 80007d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007da:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 80007de:	22f0      	movs	r2, #240	; 0xf0
 80007e0:	801a      	strh	r2, [r3, #0]
			break;
 80007e2:	e000      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80007e4:	bf00      	nop
	}
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000002 	.word	0x20000002
 80007f4:	20000000 	.word	0x20000000

080007f8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2120      	movs	r1, #32
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <ILI9341_Enable+0x14>)
 8000802:	f002 fac9 	bl	8002d98 <HAL_GPIO_WritePin>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000814:	f7ff fff0 	bl	80007f8 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000818:	f7ff feda 	bl	80005d0 <ILI9341_SPI_Init>
ILI9341_Reset();
 800081c:	f7ff ff7e 	bl	800071c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fef3 	bl	800060c <ILI9341_Write_Command>
HAL_Delay(1000);
 8000826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082a:	f001 ffcb 	bl	80027c4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800082e:	20cb      	movs	r0, #203	; 0xcb
 8000830:	f7ff feec 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000834:	2039      	movs	r0, #57	; 0x39
 8000836:	f7ff ff07 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800083a:	202c      	movs	r0, #44	; 0x2c
 800083c:	f7ff ff04 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff ff01 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000846:	2034      	movs	r0, #52	; 0x34
 8000848:	f7ff fefe 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800084c:	2002      	movs	r0, #2
 800084e:	f7ff fefb 	bl	8000648 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000852:	20cf      	movs	r0, #207	; 0xcf
 8000854:	f7ff feda 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fef5 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800085e:	20c1      	movs	r0, #193	; 0xc1
 8000860:	f7ff fef2 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000864:	2030      	movs	r0, #48	; 0x30
 8000866:	f7ff feef 	bl	8000648 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800086a:	20e8      	movs	r0, #232	; 0xe8
 800086c:	f7ff fece 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000870:	2085      	movs	r0, #133	; 0x85
 8000872:	f7ff fee9 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fee6 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800087c:	2078      	movs	r0, #120	; 0x78
 800087e:	f7ff fee3 	bl	8000648 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000882:	20ea      	movs	r0, #234	; 0xea
 8000884:	f7ff fec2 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fedd 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff feda 	bl	8000648 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000894:	20ed      	movs	r0, #237	; 0xed
 8000896:	f7ff feb9 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f7ff fed4 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f7ff fed1 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80008a6:	2012      	movs	r0, #18
 80008a8:	f7ff fece 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80008ac:	2081      	movs	r0, #129	; 0x81
 80008ae:	f7ff fecb 	bl	8000648 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80008b2:	20f7      	movs	r0, #247	; 0xf7
 80008b4:	f7ff feaa 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80008b8:	2020      	movs	r0, #32
 80008ba:	f7ff fec5 	bl	8000648 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80008be:	20c0      	movs	r0, #192	; 0xc0
 80008c0:	f7ff fea4 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80008c4:	2023      	movs	r0, #35	; 0x23
 80008c6:	f7ff febf 	bl	8000648 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80008ca:	20c1      	movs	r0, #193	; 0xc1
 80008cc:	f7ff fe9e 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80008d0:	2010      	movs	r0, #16
 80008d2:	f7ff feb9 	bl	8000648 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80008d6:	20c5      	movs	r0, #197	; 0xc5
 80008d8:	f7ff fe98 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80008dc:	203e      	movs	r0, #62	; 0x3e
 80008de:	f7ff feb3 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80008e2:	2028      	movs	r0, #40	; 0x28
 80008e4:	f7ff feb0 	bl	8000648 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80008e8:	20c7      	movs	r0, #199	; 0xc7
 80008ea:	f7ff fe8f 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80008ee:	2086      	movs	r0, #134	; 0x86
 80008f0:	f7ff feaa 	bl	8000648 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80008f4:	2036      	movs	r0, #54	; 0x36
 80008f6:	f7ff fe89 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80008fa:	2048      	movs	r0, #72	; 0x48
 80008fc:	f7ff fea4 	bl	8000648 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000900:	203a      	movs	r0, #58	; 0x3a
 8000902:	f7ff fe83 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000906:	2055      	movs	r0, #85	; 0x55
 8000908:	f7ff fe9e 	bl	8000648 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800090c:	20b1      	movs	r0, #177	; 0xb1
 800090e:	f7ff fe7d 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fe98 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000918:	2018      	movs	r0, #24
 800091a:	f7ff fe95 	bl	8000648 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800091e:	20b6      	movs	r0, #182	; 0xb6
 8000920:	f7ff fe74 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000924:	2008      	movs	r0, #8
 8000926:	f7ff fe8f 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800092a:	2082      	movs	r0, #130	; 0x82
 800092c:	f7ff fe8c 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000930:	2027      	movs	r0, #39	; 0x27
 8000932:	f7ff fe89 	bl	8000648 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000936:	20f2      	movs	r0, #242	; 0xf2
 8000938:	f7ff fe68 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fe83 	bl	8000648 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000942:	2026      	movs	r0, #38	; 0x26
 8000944:	f7ff fe62 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fe7d 	bl	8000648 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800094e:	20e0      	movs	r0, #224	; 0xe0
 8000950:	f7ff fe5c 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000954:	200f      	movs	r0, #15
 8000956:	f7ff fe77 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800095a:	2031      	movs	r0, #49	; 0x31
 800095c:	f7ff fe74 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000960:	202b      	movs	r0, #43	; 0x2b
 8000962:	f7ff fe71 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000966:	200c      	movs	r0, #12
 8000968:	f7ff fe6e 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800096c:	200e      	movs	r0, #14
 800096e:	f7ff fe6b 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000972:	2008      	movs	r0, #8
 8000974:	f7ff fe68 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000978:	204e      	movs	r0, #78	; 0x4e
 800097a:	f7ff fe65 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800097e:	20f1      	movs	r0, #241	; 0xf1
 8000980:	f7ff fe62 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000984:	2037      	movs	r0, #55	; 0x37
 8000986:	f7ff fe5f 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800098a:	2007      	movs	r0, #7
 800098c:	f7ff fe5c 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000990:	2010      	movs	r0, #16
 8000992:	f7ff fe59 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000996:	2003      	movs	r0, #3
 8000998:	f7ff fe56 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800099c:	200e      	movs	r0, #14
 800099e:	f7ff fe53 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80009a2:	2009      	movs	r0, #9
 80009a4:	f7ff fe50 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fe4d 	bl	8000648 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80009ae:	20e1      	movs	r0, #225	; 0xe1
 80009b0:	f7ff fe2c 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fe47 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80009ba:	200e      	movs	r0, #14
 80009bc:	f7ff fe44 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80009c0:	2014      	movs	r0, #20
 80009c2:	f7ff fe41 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f7ff fe3e 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80009cc:	2011      	movs	r0, #17
 80009ce:	f7ff fe3b 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f7ff fe38 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009d8:	2031      	movs	r0, #49	; 0x31
 80009da:	f7ff fe35 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80009de:	20c1      	movs	r0, #193	; 0xc1
 80009e0:	f7ff fe32 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80009e4:	2048      	movs	r0, #72	; 0x48
 80009e6:	f7ff fe2f 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80009ea:	2008      	movs	r0, #8
 80009ec:	f7ff fe2c 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80009f0:	200f      	movs	r0, #15
 80009f2:	f7ff fe29 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80009f6:	200c      	movs	r0, #12
 80009f8:	f7ff fe26 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009fc:	2031      	movs	r0, #49	; 0x31
 80009fe:	f7ff fe23 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000a02:	2036      	movs	r0, #54	; 0x36
 8000a04:	f7ff fe20 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a08:	200f      	movs	r0, #15
 8000a0a:	f7ff fe1d 	bl	8000648 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000a0e:	2011      	movs	r0, #17
 8000a10:	f7ff fdfc 	bl	800060c <ILI9341_Write_Command>
HAL_Delay(120);
 8000a14:	2078      	movs	r0, #120	; 0x78
 8000a16:	f001 fed5 	bl	80027c4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000a1a:	2029      	movs	r0, #41	; 0x29
 8000a1c:	f7ff fdf6 	bl	800060c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f7ff fe97 	bl	8000754 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000a26:	200a      	movs	r0, #10
 8000a28:	f001 fecc 	bl	80027c4 <HAL_Delay>
//
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	80fb      	strh	r3, [r7, #6]
 8000a3c:	466b      	mov	r3, sp
 8000a3e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a4c:	d202      	bcs.n	8000a54 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
 8000a52:	e002      	b.n	8000a5a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000a54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	483d      	ldr	r0, [pc, #244]	; (8000b54 <ILI9341_Draw_Colour_Burst+0x124>)
 8000a60:	f002 f99a 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2110      	movs	r1, #16
 8000a68:	483a      	ldr	r0, [pc, #232]	; (8000b54 <ILI9341_Draw_Colour_Burst+0x124>)
 8000a6a:	f002 f995 	bl	8002d98 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000a78:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	4620      	mov	r0, r4
 8000a82:	f04f 0100 	mov.w	r1, #0
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	00cb      	lsls	r3, r1, #3
 8000a90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a94:	00c2      	lsls	r2, r0, #3
 8000a96:	4620      	mov	r0, r4
 8000a98:	f04f 0100 	mov.w	r1, #0
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	00cb      	lsls	r3, r1, #3
 8000aa6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000aaa:	00c2      	lsls	r2, r0, #3
 8000aac:	1de3      	adds	r3, r4, #7
 8000aae:	08db      	lsrs	r3, r3, #3
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ab6:	466b      	mov	r3, sp
 8000ab8:	3300      	adds	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac0:	e00e      	b.n	8000ae0 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	4413      	add	r3, r2
 8000ac8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000acc:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	b2d1      	uxtb	r1, r2
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000adc:	3302      	adds	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d3ec      	bcc.n	8000ac2 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b02:	fb01 f202 	mul.w	r2, r1, r2
 8000b06:	1a9b      	subs	r3, r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d010      	beq.n	8000b32 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b14:	e009      	b.n	8000b2a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000b16:	69b9      	ldr	r1, [r7, #24]
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <ILI9341_Draw_Colour_Burst+0x128>)
 8000b20:	f006 f9d9 	bl	8006ed6 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b26:	3301      	adds	r3, #1
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3f1      	bcc.n	8000b16 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000b32:	69b9      	ldr	r1, [r7, #24]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	230a      	movs	r3, #10
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <ILI9341_Draw_Colour_Burst+0x128>)
 8000b3c:	f006 f9cb 	bl	8006ed6 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <ILI9341_Draw_Colour_Burst+0x124>)
 8000b46:	f002 f927 	bl	8002d98 <HAL_GPIO_WritePin>
 8000b4a:	46ad      	mov	sp, r5
}
 8000b4c:	bf00      	nop
 8000b4e:	3730      	adds	r7, #48	; 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bdb0      	pop	{r4, r5, r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	20000154 	.word	0x20000154

08000b5c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <ILI9341_Fill_Screen+0x44>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <ILI9341_Fill_Screen+0x48>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd85 	bl	8000684 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <ILI9341_Fill_Screen+0x44>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <ILI9341_Fill_Screen+0x48>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	fb03 f302 	mul.w	r3, r3, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff4c 	bl	8000a30 <ILI9341_Draw_Colour_Burst>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000002 	.word	0x20000002
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	80bb      	strh	r3, [r7, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000bba:	4b5b      	ldr	r3, [pc, #364]	; (8000d28 <ILI9341_Draw_Pixel+0x180>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	88fa      	ldrh	r2, [r7, #6]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f080 80ac 	bcs.w	8000d20 <ILI9341_Draw_Pixel+0x178>
 8000bc8:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <ILI9341_Draw_Pixel+0x184>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f080 80a5 	bcs.w	8000d20 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	4855      	ldr	r0, [pc, #340]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000bdc:	f002 f8dc 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	4852      	ldr	r0, [pc, #328]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000be6:	f002 f8d7 	bl	8002d98 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000bea:	202a      	movs	r0, #42	; 0x2a
 8000bec:	f7ff fcfc 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	484e      	ldr	r0, [pc, #312]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000bf6:	f002 f8cf 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	484c      	ldr	r0, [pc, #304]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c00:	f002 f8ca 	bl	8002d98 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	4849      	ldr	r0, [pc, #292]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c0a:	f002 f8c5 	bl	8002d98 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	753b      	strb	r3, [r7, #20]
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	757b      	strb	r3, [r7, #21]
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	3301      	adds	r3, #1
 8000c22:	121b      	asrs	r3, r3, #8
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	75bb      	strb	r3, [r7, #22]
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000c32:	f107 0114 	add.w	r1, r7, #20
 8000c36:	2301      	movs	r3, #1
 8000c38:	2204      	movs	r2, #4
 8000c3a:	483e      	ldr	r0, [pc, #248]	; (8000d34 <ILI9341_Draw_Pixel+0x18c>)
 8000c3c:	f006 f94b 	bl	8006ed6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	483a      	ldr	r0, [pc, #232]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c46:	f002 f8a7 	bl	8002d98 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	4838      	ldr	r0, [pc, #224]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c50:	f002 f8a2 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c54:	2200      	movs	r2, #0
 8000c56:	2110      	movs	r1, #16
 8000c58:	4835      	ldr	r0, [pc, #212]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c5a:	f002 f89d 	bl	8002d98 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000c5e:	202b      	movs	r0, #43	; 0x2b
 8000c60:	f7ff fcc2 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000c64:	2201      	movs	r2, #1
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	4831      	ldr	r0, [pc, #196]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c6a:	f002 f895 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2110      	movs	r1, #16
 8000c72:	482f      	ldr	r0, [pc, #188]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c74:	f002 f890 	bl	8002d98 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	482c      	ldr	r0, [pc, #176]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c7e:	f002 f88b 	bl	8002d98 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	743b      	strb	r3, [r7, #16]
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	747b      	strb	r3, [r7, #17]
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	121b      	asrs	r3, r3, #8
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	74bb      	strb	r3, [r7, #18]
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000ca6:	f107 0110 	add.w	r1, r7, #16
 8000caa:	2301      	movs	r3, #1
 8000cac:	2204      	movs	r2, #4
 8000cae:	4821      	ldr	r0, [pc, #132]	; (8000d34 <ILI9341_Draw_Pixel+0x18c>)
 8000cb0:	f006 f911 	bl	8006ed6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	481d      	ldr	r0, [pc, #116]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cba:	f002 f86d 	bl	8002d98 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	481b      	ldr	r0, [pc, #108]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cc4:	f002 f868 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4818      	ldr	r0, [pc, #96]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cce:	f002 f863 	bl	8002d98 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000cd2:	202c      	movs	r0, #44	; 0x2c
 8000cd4:	f7ff fc88 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cde:	f002 f85b 	bl	8002d98 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4812      	ldr	r0, [pc, #72]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000ce8:	f002 f856 	bl	8002d98 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2110      	movs	r1, #16
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cf2:	f002 f851 	bl	8002d98 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	733b      	strb	r3, [r7, #12]
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000d06:	f107 010c 	add.w	r1, r7, #12
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <ILI9341_Draw_Pixel+0x18c>)
 8000d10:	f006 f8e1 	bl	8006ed6 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2110      	movs	r1, #16
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000d1a:	f002 f83d 	bl	8002d98 <HAL_GPIO_WritePin>
 8000d1e:	e000      	b.n	8000d22 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000d20:	bf00      	nop
	
}
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000002 	.word	0x20000002
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	20000154 	.word	0x20000154

08000d38 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	int i =0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8000d44:	e036      	b.n	8000db4 <speed_test_LCD+0x7c>
	{
		i ++;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d60:	4819      	ldr	r0, [pc, #100]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d62:	f006 f81a 	bl	8006d9a <HAL_RNG_GetRandomNumber>
 8000d66:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d6e:	f006 f814 	bl	8006d9a <HAL_RNG_GetRandomNumber>
 8000d72:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d78:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d7a:	f006 f80e 	bl	8006d9a <HAL_RNG_GetRandomNumber>
 8000d7e:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d86:	f006 f808 	bl	8006d9a <HAL_RNG_GetRandomNumber>
 8000d8a:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d96:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8000d98:	89bb      	ldrh	r3, [r7, #12]
 8000d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d9e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8000da0:	897b      	ldrh	r3, [r7, #10]
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8000da8:	893b      	ldrh	r3, [r7, #8]
 8000daa:	897a      	ldrh	r2, [r7, #10]
 8000dac:	89b9      	ldrh	r1, [r7, #12]
 8000dae:	89f8      	ldrh	r0, [r7, #14]
 8000db0:	f7ff fb86 	bl	80004c0 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	ddc4      	ble.n	8000d46 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000023c 	.word	0x2000023c

08000dcc <I2C_1_scaner>:

};

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e043      	b.n	8000e66 <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f001 fcf0 	bl	80027c4 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	b299      	uxth	r1, r3
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <I2C_1_scaner+0xb8>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b298      	uxth	r0, r3
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <I2C_1_scaner+0xbc>)
 8000df6:	881c      	ldrh	r4, [r3, #0]
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <I2C_1_scaner+0xbc>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <I2C_1_scaner+0xc0>)
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	9202      	str	r2, [sp, #8]
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <I2C_1_scaner+0xc4>)
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4623      	mov	r3, r4
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	4821      	ldr	r0, [pc, #132]	; (8000e94 <I2C_1_scaner+0xc8>)
 8000e0e:	f003 ff9d 	bl	8004d4c <HAL_I2C_Mem_Read>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <I2C_1_scaner+0xcc>)
 8000e18:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <I2C_1_scaner+0xcc>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d11b      	bne.n	8000e5a <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	3301      	adds	r3, #1
 8000e26:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b40      	cmp	r3, #64	; 0x40
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b3c      	cmp	r3, #60	; 0x3c
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b3c      	cmp	r3, #60	; 0x3c
 8000e52:	d001      	beq.n	8000e58 <I2C_1_scaner+0x8c>
 8000e54:	2b40      	cmp	r3, #64	; 0x40
 8000e56:	e000      	b.n	8000e5a <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 8000e58:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d1b7      	bne.n	8000dde <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 8000e6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e72:	f001 fca7 	bl	80027c4 <HAL_Delay>
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000bc 	.word	0x200000bc
 8000e84:	200000bd 	.word	0x200000bd
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	200000be 	.word	0x200000be
 8000e94:	20000100 	.word	0x20000100
 8000e98:	200000c0 	.word	0x200000c0

08000e9c <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000ea6:	f000 f853 	bl	8000f50 <read_one_digit_from_keyboard>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b23      	cmp	r3, #35	; 0x23
 8000eb2:	d10a      	bne.n	8000eca <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000eb4:	221e      	movs	r2, #30
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4824      	ldr	r0, [pc, #144]	; (8000f4c <read_digits+0xb0>)
 8000eba:	f00a fcdf 	bl	800b87c <memset>
		keyboard.read_digits_position = 0;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <read_digits+0xb0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <read_digits+0xb0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8000ece:	d109      	bne.n	8000ee4 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <read_digits+0xb0>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <read_digits+0xb0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <read_digits+0xb0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d028      	beq.n	8000f3c <read_digits+0xa0>
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b23      	cmp	r3, #35	; 0x23
 8000eee:	d025      	beq.n	8000f3c <read_digits+0xa0>
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ef4:	d022      	beq.n	8000f3c <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <read_digits+0xb0>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <read_digits+0xb0>)
 8000efc:	7f92      	ldrb	r2, [r2, #30]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	dc11      	bgt.n	8000f26 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <read_digits+0xb0>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	4911      	ldr	r1, [pc, #68]	; (8000f4c <read_digits+0xb0>)
 8000f08:	79fa      	ldrb	r2, [r7, #7]
 8000f0a:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <read_digits+0xb0>)
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <read_digits+0xb0>)
 8000f14:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <read_digits+0xb0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <read_digits+0xb0>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f24:	e00e      	b.n	8000f44 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <read_digits+0xb0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <read_digits+0xb0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <read_digits+0xb0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f3a:	e003      	b.n	8000f44 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <read_digits+0xb0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	77da      	strb	r2, [r3, #31]
	}
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000d8 	.word	0x200000d8

08000f50 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f60:	48cf      	ldr	r0, [pc, #828]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000f62:	f001 ff19 	bl	8002d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	48cc      	ldr	r0, [pc, #816]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000f6e:	f001 ff13 	bl	8002d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	48c9      	ldr	r0, [pc, #804]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000f7a:	f001 ff0d 	bl	8002d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f84:	48c6      	ldr	r0, [pc, #792]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000f86:	f001 ff07 	bl	8002d98 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8e:	48c5      	ldr	r0, [pc, #788]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8000f90:	f001 feea 	bl	8002d68 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d169      	bne.n	800106e <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	48bf      	ldr	r0, [pc, #764]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fa2:	f001 fef9 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fac:	48bc      	ldr	r0, [pc, #752]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fae:	f001 fef3 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	48b9      	ldr	r0, [pc, #740]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fba:	f001 feed 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc4:	48b6      	ldr	r0, [pc, #728]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fc6:	f001 fee7 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fce:	48b5      	ldr	r0, [pc, #724]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8000fd0:	f001 feca 	bl	8002d68 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000fda:	2331      	movs	r3, #49	; 0x31
 8000fdc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe4:	48ae      	ldr	r0, [pc, #696]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fe6:	f001 fed7 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff0:	48ab      	ldr	r0, [pc, #684]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000ff2:	f001 fed1 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000ff6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffa:	48aa      	ldr	r0, [pc, #680]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8000ffc:	f001 feb4 	bl	8002d68 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8001006:	2334      	movs	r3, #52	; 0x34
 8001008:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001010:	48a3      	ldr	r0, [pc, #652]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001012:	f001 fec1 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101c:	48a0      	ldr	r0, [pc, #640]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800101e:	f001 febb 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001022:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001026:	489f      	ldr	r0, [pc, #636]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001028:	f001 fe9e 	bl	8002d68 <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8001032:	2337      	movs	r3, #55	; 0x37
 8001034:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103c:	4898      	ldr	r0, [pc, #608]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800103e:	f001 feab 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001048:	4895      	ldr	r0, [pc, #596]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800104a:	f001 fea5 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800104e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001052:	4894      	ldr	r0, [pc, #592]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001054:	f001 fe88 	bl	8002d68 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800105e:	232a      	movs	r3, #42	; 0x2a
 8001060:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001068:	488d      	ldr	r0, [pc, #564]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800106a:	f001 fe95 	bl	8002d98 <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	488a      	ldr	r0, [pc, #552]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001076:	f001 fe8f 	bl	8002d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001080:	4887      	ldr	r0, [pc, #540]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001082:	f001 fe89 	bl	8002d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	4884      	ldr	r0, [pc, #528]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800108e:	f001 fe83 	bl	8002d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	4881      	ldr	r0, [pc, #516]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800109a:	f001 fe7d 	bl	8002d98 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800109e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a2:	4880      	ldr	r0, [pc, #512]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 80010a4:	f001 fe60 	bl	8002d68 <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d169      	bne.n	8001182 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b4:	487a      	ldr	r0, [pc, #488]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010b6:	f001 fe6f 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c0:	4877      	ldr	r0, [pc, #476]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010c2:	f001 fe69 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	4874      	ldr	r0, [pc, #464]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010ce:	f001 fe63 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d8:	4871      	ldr	r0, [pc, #452]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010da:	f001 fe5d 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e2:	4870      	ldr	r0, [pc, #448]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 80010e4:	f001 fe40 	bl	8002d68 <HAL_GPIO_ReadPin>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80010ee:	2332      	movs	r3, #50	; 0x32
 80010f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f8:	4869      	ldr	r0, [pc, #420]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010fa:	f001 fe4d 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001104:	4866      	ldr	r0, [pc, #408]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001106:	f001 fe47 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	4865      	ldr	r0, [pc, #404]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001110:	f001 fe2a 	bl	8002d68 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800111a:	2335      	movs	r3, #53	; 0x35
 800111c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001124:	485e      	ldr	r0, [pc, #376]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001126:	f001 fe37 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	485b      	ldr	r0, [pc, #364]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001132:	f001 fe31 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113a:	485a      	ldr	r0, [pc, #360]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 800113c:	f001 fe14 	bl	8002d68 <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001146:	2338      	movs	r3, #56	; 0x38
 8001148:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	4853      	ldr	r0, [pc, #332]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001152:	f001 fe21 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115c:	4850      	ldr	r0, [pc, #320]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800115e:	f001 fe1b 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001166:	484f      	ldr	r0, [pc, #316]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001168:	f001 fdfe 	bl	8002d68 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8001172:	2330      	movs	r3, #48	; 0x30
 8001174:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117c:	4848      	ldr	r0, [pc, #288]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800117e:	f001 fe0b 	bl	8002d98 <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	4845      	ldr	r0, [pc, #276]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800118a:	f001 fe05 	bl	8002d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001194:	4842      	ldr	r0, [pc, #264]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001196:	f001 fdff 	bl	8002d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	483f      	ldr	r0, [pc, #252]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011a2:	f001 fdf9 	bl	8002d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	483c      	ldr	r0, [pc, #240]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011ae:	f001 fdf3 	bl	8002d98 <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 80011b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b6:	483b      	ldr	r0, [pc, #236]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 80011b8:	f001 fdd6 	bl	8002d68 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d169      	bne.n	8001296 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c8:	4835      	ldr	r0, [pc, #212]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011ca:	f001 fde5 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d4:	4832      	ldr	r0, [pc, #200]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011d6:	f001 fddf 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e0:	482f      	ldr	r0, [pc, #188]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011e2:	f001 fdd9 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011ee:	f001 fdd3 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f6:	482b      	ldr	r0, [pc, #172]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 80011f8:	f001 fdb6 	bl	8002d68 <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8001202:	2333      	movs	r3, #51	; 0x33
 8001204:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800120c:	4824      	ldr	r0, [pc, #144]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800120e:	f001 fdc3 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800121a:	f001 fdbd 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800121e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001222:	4820      	ldr	r0, [pc, #128]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001224:	f001 fda0 	bl	8002d68 <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800122e:	2336      	movs	r3, #54	; 0x36
 8001230:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001238:	4819      	ldr	r0, [pc, #100]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800123a:	f001 fdad 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001246:	f001 fda7 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800124a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124e:	4815      	ldr	r0, [pc, #84]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001250:	f001 fd8a 	bl	8002d68 <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800125a:	2339      	movs	r3, #57	; 0x39
 800125c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001264:	480e      	ldr	r0, [pc, #56]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001266:	f001 fd97 	bl	8002d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001272:	f001 fd91 	bl	8002d98 <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127a:	480a      	ldr	r0, [pc, #40]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 800127c:	f001 fd74 	bl	8002d68 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001286:	2323      	movs	r3, #35	; 0x23
 8001288:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001292:	f001 fd81 	bl	8002d98 <HAL_GPIO_WritePin>
	}
	return digit;
 8001296:	79fb      	ldrb	r3, [r7, #7]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40020400 	.word	0x40020400

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f001 fa17 	bl	80026e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f88d 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f000 fb11 	bl	80018dc <MX_GPIO_Init>
  MX_I2S3_Init();
 80012ba:	f000 f945 	bl	8001548 <MX_I2S3_Init>
  MX_SPI1_Init();
 80012be:	f000 f987 	bl	80015d0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80012c2:	f009 ff99 	bl	800b1f8 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80012c6:	f000 fa47 	bl	8001758 <MX_TIM2_Init>
  MX_SPI2_Init();
 80012ca:	f000 f9b7 	bl	800163c <MX_SPI2_Init>
  MX_RNG_Init();
 80012ce:	f000 f96b 	bl	80015a8 <MX_RNG_Init>
  MX_TIM3_Init();
 80012d2:	f000 fa8f 	bl	80017f4 <MX_TIM3_Init>
  MX_TIM1_Init();
 80012d6:	f000 f9e7 	bl	80016a8 <MX_TIM1_Init>
  MX_I2C3_Init();
 80012da:	f000 f907 	bl	80014ec <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012de:	f000 f8f9 	bl	80014d4 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80012e2:	f7ff fa95 	bl	8000810 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fc38 	bl	8000b5c <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80012ec:	2003      	movs	r0, #3
 80012ee:	f7ff fa31 	bl	8000754 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff fc32 	bl	8000b5c <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80012f8:	2364      	movs	r3, #100	; 0x64
 80012fa:	60fb      	str	r3, [r7, #12]
  speed_test_LCD(number_of_tests);
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff fd1b 	bl	8000d38 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fc2a 	bl	8000b5c <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8001308:	482d      	ldr	r0, [pc, #180]	; (80013c0 <main+0x118>)
 800130a:	f006 f83b 	bl	8007384 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800130e:	2100      	movs	r1, #0
 8001310:	482b      	ldr	r0, [pc, #172]	; (80013c0 <main+0x118>)
 8001312:	f006 f8a7 	bl	8007464 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8001316:	4b2b      	ldr	r3, [pc, #172]	; (80013c4 <main+0x11c>)
 8001318:	220a      	movs	r2, #10
 800131a:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  I2C_1_scaner();
 800131c:	f7ff fd56 	bl	8000dcc <I2C_1_scaner>
  // 0x246				//  ????
  // 0x247				// MEMS
  // 0x255              //  ????

  // Read ID from BME280 ////////////////////////////////////////////////////////////////
  uint16_t STATUS=0;
 8001320:	2300      	movs	r3, #0
 8001322:	817b      	strh	r3, [r7, #10]
  uint16_t addres_devise = 0x76;   // BME280
 8001324:	2376      	movs	r3, #118	; 0x76
 8001326:	813b      	strh	r3, [r7, #8]
  uint16_t addr = 0xD0;
 8001328:	23d0      	movs	r3, #208	; 0xd0
 800132a:	80fb      	strh	r3, [r7, #6]
  uint8_t buff=0;         // Return 0x96 -> Dec 60
 800132c:	2300      	movs	r3, #0
 800132e:	717b      	strb	r3, [r7, #5]
  STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8001330:	893b      	ldrh	r3, [r7, #8]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	b299      	uxth	r1, r3
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2301      	movs	r3, #1
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	1d7b      	adds	r3, r7, #5
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	481f      	ldr	r0, [pc, #124]	; (80013c8 <main+0x120>)
 800134a:	f003 fcff 	bl	8004d4c <HAL_I2C_Mem_Read>
 800134e:	4603      	mov	r3, r0
 8001350:	817b      	strh	r3, [r7, #10]
  /////////////////////////////////////////////////////////////////////////////////////////

  // Read ID from DS3231 ////////////////////////////////////////////////////////////////
  addres_devise = 0x68;            // DS3231
 8001352:	2368      	movs	r3, #104	; 0x68
 8001354:	813b      	strh	r3, [r7, #8]
  addr = 0x00;						// Read seconds register
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
  buff=0;
 800135a:	2300      	movs	r3, #0
 800135c:	717b      	strb	r3, [r7, #5]
  STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 800135e:	893b      	ldrh	r3, [r7, #8]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	b299      	uxth	r1, r3
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	1d7b      	adds	r3, r7, #5
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	2301      	movs	r3, #1
 8001376:	4814      	ldr	r0, [pc, #80]	; (80013c8 <main+0x120>)
 8001378:	f003 fce8 	bl	8004d4c <HAL_I2C_Mem_Read>
 800137c:	4603      	mov	r3, r0
 800137e:	817b      	strh	r3, [r7, #10]
  /////////////////////////////////////////////////////////////////////////////////////////

  // Test OLED  ////////////////////////////////////////////////////////////////
  oled_init();
 8001380:	f001 f912 	bl	80025a8 <oled_init>
  char oled_buff[] = "TEST";
 8001384:	4a11      	ldr	r2, [pc, #68]	; (80013cc <main+0x124>)
 8001386:	463b      	mov	r3, r7
 8001388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138c:	6018      	str	r0, [r3, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	7019      	strb	r1, [r3, #0]
  // draw_pixel(10, 10, WHITE);
  graphics_text(1, 1, 1, oled_buff);
 8001392:	463b      	mov	r3, r7
 8001394:	2201      	movs	r2, #1
 8001396:	2101      	movs	r1, #1
 8001398:	2001      	movs	r0, #1
 800139a:	f000 fffd 	bl	8002398 <graphics_text>
  graphics_text(1, 20, 2, oled_buff);
 800139e:	463b      	mov	r3, r7
 80013a0:	2202      	movs	r2, #2
 80013a2:	2114      	movs	r1, #20
 80013a4:	2001      	movs	r0, #1
 80013a6:	f000 fff7 	bl	8002398 <graphics_text>
  graphics_text(50, 1, 3, oled_buff);
 80013aa:	463b      	mov	r3, r7
 80013ac:	2203      	movs	r2, #3
 80013ae:	2101      	movs	r1, #1
 80013b0:	2032      	movs	r0, #50	; 0x32
 80013b2:	f000 fff1 	bl	8002398 <graphics_text>
  oled_update();
 80013b6:	f001 f8a3 	bl	8002500 <oled_update>
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80013ba:	f009 ff43 	bl	800b244 <MX_USB_HOST_Process>
 80013be:	e7fc      	b.n	80013ba <main+0x112>
 80013c0:	200001ac 	.word	0x200001ac
 80013c4:	200000d8 	.word	0x200000d8
 80013c8:	20000100 	.word	0x20000100
 80013cc:	0800ba34 	.word	0x0800ba34

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b098      	sub	sp, #96	; 0x60
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013da:	2230      	movs	r2, #48	; 0x30
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f00a fa4c 	bl	800b87c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <SystemClock_Config+0xfc>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	4a30      	ldr	r2, [pc, #192]	; (80014cc <SystemClock_Config+0xfc>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6413      	str	r3, [r2, #64]	; 0x40
 8001412:	4b2e      	ldr	r3, [pc, #184]	; (80014cc <SystemClock_Config+0xfc>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800141e:	2300      	movs	r3, #0
 8001420:	607b      	str	r3, [r7, #4]
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <SystemClock_Config+0x100>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a2a      	ldr	r2, [pc, #168]	; (80014d0 <SystemClock_Config+0x100>)
 8001428:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <SystemClock_Config+0x100>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800143a:	2301      	movs	r3, #1
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800143e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001444:	2302      	movs	r3, #2
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001448:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800144c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800144e:	2308      	movs	r3, #8
 8001450:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001452:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001456:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001458:	2302      	movs	r3, #2
 800145a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800145c:	2307      	movs	r3, #7
 800145e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001460:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001464:	4618      	mov	r0, r3
 8001466:	f004 fe7f 	bl	8006168 <HAL_RCC_OscConfig>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001470:	f000 fbae 	bl	8001bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001474:	230f      	movs	r3, #15
 8001476:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001478:	2302      	movs	r3, #2
 800147a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001480:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	2105      	movs	r1, #5
 8001492:	4618      	mov	r0, r3
 8001494:	f005 f8e0 	bl	8006658 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800149e:	f000 fb97 	bl	8001bd0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014a2:	2301      	movs	r3, #1
 80014a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80014a6:	23c0      	movs	r3, #192	; 0xc0
 80014a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80014aa:	2302      	movs	r3, #2
 80014ac:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ae:	f107 030c 	add.w	r3, r7, #12
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fab8 	bl	8006a28 <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80014be:	f000 fb87 	bl	8001bd0 <Error_Handler>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3760      	adds	r7, #96	; 0x60
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40007000 	.word	0x40007000

080014d4 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d8:	2200      	movs	r2, #0
 80014da:	2100      	movs	r1, #0
 80014dc:	201c      	movs	r0, #28
 80014de:	f001 fa70 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014e2:	201c      	movs	r0, #28
 80014e4:	f001 fa89 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 80014e8:	bf00      	nop
 80014ea:	bd80      	pop	{r7, pc}

080014ec <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80014f0:	4b12      	ldr	r3, [pc, #72]	; (800153c <MX_I2C3_Init+0x50>)
 80014f2:	4a13      	ldr	r2, [pc, #76]	; (8001540 <MX_I2C3_Init+0x54>)
 80014f4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <MX_I2C3_Init+0x50>)
 80014f8:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_I2C3_Init+0x58>)
 80014fa:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <MX_I2C3_Init+0x50>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001502:	4b0e      	ldr	r3, [pc, #56]	; (800153c <MX_I2C3_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001508:	4b0c      	ldr	r3, [pc, #48]	; (800153c <MX_I2C3_Init+0x50>)
 800150a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <MX_I2C3_Init+0x50>)
 8001512:	2200      	movs	r2, #0
 8001514:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <MX_I2C3_Init+0x50>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <MX_I2C3_Init+0x50>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <MX_I2C3_Init+0x50>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_I2C3_Init+0x50>)
 800152a:	f003 f9cd 	bl	80048c8 <HAL_I2C_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001534:	f000 fb4c 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20000100 	.word	0x20000100
 8001540:	40005c00 	.word	0x40005c00
 8001544:	000186a0 	.word	0x000186a0

08001548 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_I2S3_Init+0x54>)
 800154e:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <MX_I2S3_Init+0x58>)
 8001550:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_I2S3_Init+0x54>)
 8001554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001558:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800155a:	4b10      	ldr	r3, [pc, #64]	; (800159c <MX_I2S3_Init+0x54>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_I2S3_Init+0x54>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001566:	4b0d      	ldr	r3, [pc, #52]	; (800159c <MX_I2S3_Init+0x54>)
 8001568:	f44f 7200 	mov.w	r2, #512	; 0x200
 800156c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800156e:	4b0b      	ldr	r3, [pc, #44]	; (800159c <MX_I2S3_Init+0x54>)
 8001570:	4a0c      	ldr	r2, [pc, #48]	; (80015a4 <MX_I2S3_Init+0x5c>)
 8001572:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_I2S3_Init+0x54>)
 8001576:	2200      	movs	r2, #0
 8001578:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <MX_I2S3_Init+0x54>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <MX_I2S3_Init+0x54>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_I2S3_Init+0x54>)
 8001588:	f004 f94e 	bl	8005828 <HAL_I2S_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001592:	f000 fb1d 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200002ec 	.word	0x200002ec
 80015a0:	40003c00 	.word	0x40003c00
 80015a4:	00017700 	.word	0x00017700

080015a8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_RNG_Init+0x20>)
 80015ae:	4a07      	ldr	r2, [pc, #28]	; (80015cc <MX_RNG_Init+0x24>)
 80015b0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80015b2:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_RNG_Init+0x20>)
 80015b4:	f005 fb78 	bl	8006ca8 <HAL_RNG_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80015be:	f000 fb07 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	2000023c 	.word	0x2000023c
 80015cc:	50060800 	.word	0x50060800

080015d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_SPI1_Init+0x64>)
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <MX_SPI1_Init+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_SPI1_Init+0x64>)
 80015dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_SPI1_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_SPI1_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_SPI1_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_SPI1_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_SPI1_Init+0x64>)
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_SPI1_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_SPI1_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_SPI1_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_SPI1_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_SPI1_Init+0x64>)
 800161c:	220a      	movs	r2, #10
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_SPI1_Init+0x64>)
 8001622:	f005 fbcf 	bl	8006dc4 <HAL_SPI_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800162c:	f000 fad0 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	2000024c 	.word	0x2000024c
 8001638:	40013000 	.word	0x40013000

0800163c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001640:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001642:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <MX_SPI2_Init+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001646:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001648:	f44f 7282 	mov.w	r2, #260	; 0x104
 800164c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800164e:	4b14      	ldr	r3, [pc, #80]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001654:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800165a:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_SPI2_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001660:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001666:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001668:	f44f 7200 	mov.w	r2, #512	; 0x200
 800166c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001670:	2200      	movs	r2, #0
 8001672:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001676:	2200      	movs	r2, #0
 8001678:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <MX_SPI2_Init+0x64>)
 800167c:	2200      	movs	r2, #0
 800167e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001682:	2200      	movs	r2, #0
 8001684:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <MX_SPI2_Init+0x64>)
 8001688:	220a      	movs	r2, #10
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_SPI2_Init+0x64>)
 800168e:	f005 fb99 	bl	8006dc4 <HAL_SPI_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001698:	f000 fa9a 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000154 	.word	0x20000154
 80016a4:	40003800 	.word	0x40003800

080016a8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b08c      	sub	sp, #48	; 0x30
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	2224      	movs	r2, #36	; 0x24
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f00a f8e0 	bl	800b87c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c4:	4b22      	ldr	r3, [pc, #136]	; (8001750 <MX_TIM1_Init+0xa8>)
 80016c6:	4a23      	ldr	r2, [pc, #140]	; (8001754 <MX_TIM1_Init+0xac>)
 80016c8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <MX_TIM1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d0:	4b1f      	ldr	r3, [pc, #124]	; (8001750 <MX_TIM1_Init+0xa8>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016d6:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <MX_TIM1_Init+0xa8>)
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016de:	4b1c      	ldr	r3, [pc, #112]	; (8001750 <MX_TIM1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e4:	4b1a      	ldr	r3, [pc, #104]	; (8001750 <MX_TIM1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_TIM1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80016f0:	2301      	movs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80016f4:	2300      	movs	r3, #0
 80016f6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80016f8:	2301      	movs	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001708:	2301      	movs	r3, #1
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	4619      	mov	r1, r3
 800171a:	480d      	ldr	r0, [pc, #52]	; (8001750 <MX_TIM1_Init+0xa8>)
 800171c:	f006 f809 	bl	8007732 <HAL_TIM_Encoder_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001726:	f000 fa53 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172e:	2300      	movs	r3, #0
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	4619      	mov	r1, r3
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <MX_TIM1_Init+0xa8>)
 8001738:	f006 fe6e 	bl	8008418 <HAL_TIMEx_MasterConfigSynchronization>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001742:	f000 fa45 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	3730      	adds	r7, #48	; 0x30
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200001f4 	.word	0x200001f4
 8001754:	40010000 	.word	0x40010000

08001758 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	605a      	str	r2, [r3, #4]
 8001768:	609a      	str	r2, [r3, #8]
 800176a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800176c:	463b      	mov	r3, r7
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_TIM2_Init+0x98>)
 8001776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800177a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_TIM2_Init+0x98>)
 800177e:	f240 3247 	movw	r2, #839	; 0x347
 8001782:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_TIM2_Init+0x98>)
 8001786:	2200      	movs	r2, #0
 8001788:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_TIM2_Init+0x98>)
 800178c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001790:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001792:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_TIM2_Init+0x98>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <MX_TIM2_Init+0x98>)
 800179a:	2280      	movs	r2, #128	; 0x80
 800179c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800179e:	4814      	ldr	r0, [pc, #80]	; (80017f0 <MX_TIM2_Init+0x98>)
 80017a0:	f005 fda0 	bl	80072e4 <HAL_TIM_Base_Init>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017aa:	f000 fa11 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	4619      	mov	r1, r3
 80017ba:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_TIM2_Init+0x98>)
 80017bc:	f006 fa26 	bl	8007c0c <HAL_TIM_ConfigClockSource>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80017c6:	f000 fa03 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80017ca:	2310      	movs	r3, #16
 80017cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017d2:	463b      	mov	r3, r7
 80017d4:	4619      	mov	r1, r3
 80017d6:	4806      	ldr	r0, [pc, #24]	; (80017f0 <MX_TIM2_Init+0x98>)
 80017d8:	f006 fe1e 	bl	8008418 <HAL_TIMEx_MasterConfigSynchronization>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80017e2:	f000 f9f5 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	3718      	adds	r7, #24
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200002a4 	.word	0x200002a4

080017f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	; 0x38
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	615a      	str	r2, [r3, #20]
 8001822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001824:	4b2b      	ldr	r3, [pc, #172]	; (80018d4 <MX_TIM3_Init+0xe0>)
 8001826:	4a2c      	ldr	r2, [pc, #176]	; (80018d8 <MX_TIM3_Init+0xe4>)
 8001828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <MX_TIM3_Init+0xe0>)
 800182c:	f640 0233 	movw	r2, #2099	; 0x833
 8001830:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001832:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <MX_TIM3_Init+0xe0>)
 8001834:	2200      	movs	r2, #0
 8001836:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001838:	4b26      	ldr	r3, [pc, #152]	; (80018d4 <MX_TIM3_Init+0xe0>)
 800183a:	f242 7210 	movw	r2, #10000	; 0x2710
 800183e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <MX_TIM3_Init+0xe0>)
 8001842:	2200      	movs	r2, #0
 8001844:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001846:	4b23      	ldr	r3, [pc, #140]	; (80018d4 <MX_TIM3_Init+0xe0>)
 8001848:	2280      	movs	r2, #128	; 0x80
 800184a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800184c:	4821      	ldr	r0, [pc, #132]	; (80018d4 <MX_TIM3_Init+0xe0>)
 800184e:	f005 fd49 	bl	80072e4 <HAL_TIM_Base_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001858:	f000 f9ba 	bl	8001bd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001866:	4619      	mov	r1, r3
 8001868:	481a      	ldr	r0, [pc, #104]	; (80018d4 <MX_TIM3_Init+0xe0>)
 800186a:	f006 f9cf 	bl	8007c0c <HAL_TIM_ConfigClockSource>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001874:	f000 f9ac 	bl	8001bd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001878:	4816      	ldr	r0, [pc, #88]	; (80018d4 <MX_TIM3_Init+0xe0>)
 800187a:	f005 ff01 	bl	8007680 <HAL_TIM_PWM_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001884:	f000 f9a4 	bl	8001bd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001890:	f107 0320 	add.w	r3, r7, #32
 8001894:	4619      	mov	r1, r3
 8001896:	480f      	ldr	r0, [pc, #60]	; (80018d4 <MX_TIM3_Init+0xe0>)
 8001898:	f006 fdbe 	bl	8008418 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018a2:	f000 f995 	bl	8001bd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
 80018a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	2200      	movs	r2, #0
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_TIM3_Init+0xe0>)
 80018be:	f006 f8e7 	bl	8007a90 <HAL_TIM_PWM_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018c8:	f000 f982 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3738      	adds	r7, #56	; 0x38
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200001ac 	.word	0x200001ac
 80018d8:	40000400 	.word	0x40000400

080018dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e2:	f107 031c 	add.w	r3, r7, #28
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
 80018f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	4baf      	ldr	r3, [pc, #700]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4aae      	ldr	r2, [pc, #696]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 80018fc:	f043 0310 	orr.w	r3, r3, #16
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4bac      	ldr	r3, [pc, #688]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0310 	and.w	r3, r3, #16
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	4ba8      	ldr	r3, [pc, #672]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4aa7      	ldr	r2, [pc, #668]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4ba5      	ldr	r3, [pc, #660]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	4ba1      	ldr	r3, [pc, #644]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4aa0      	ldr	r2, [pc, #640]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b9e      	ldr	r3, [pc, #632]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001942:	613b      	str	r3, [r7, #16]
 8001944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001946:	2300      	movs	r3, #0
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	4b9a      	ldr	r3, [pc, #616]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a99      	ldr	r2, [pc, #612]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b97      	ldr	r3, [pc, #604]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	60fb      	str	r3, [r7, #12]
 8001960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	4b93      	ldr	r3, [pc, #588]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a92      	ldr	r2, [pc, #584]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 800196c:	f043 0302 	orr.w	r3, r3, #2
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b90      	ldr	r3, [pc, #576]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	4b8c      	ldr	r3, [pc, #560]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a8b      	ldr	r2, [pc, #556]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b89      	ldr	r3, [pc, #548]	; (8001bb4 <MX_GPIO_Init+0x2d8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800199a:	2200      	movs	r2, #0
 800199c:	217c      	movs	r1, #124	; 0x7c
 800199e:	4886      	ldr	r0, [pc, #536]	; (8001bb8 <MX_GPIO_Init+0x2dc>)
 80019a0:	f001 f9fa 	bl	8002d98 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80019a4:	2201      	movs	r2, #1
 80019a6:	2101      	movs	r1, #1
 80019a8:	4884      	ldr	r0, [pc, #528]	; (8001bbc <MX_GPIO_Init+0x2e0>)
 80019aa:	f001 f9f5 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 80019ae:	2200      	movs	r2, #0
 80019b0:	f64f 7110 	movw	r1, #65296	; 0xff10
 80019b4:	4882      	ldr	r0, [pc, #520]	; (8001bc0 <MX_GPIO_Init+0x2e4>)
 80019b6:	f001 f9ef 	bl	8002d98 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 80019ba:	2200      	movs	r2, #0
 80019bc:	f44f 6104 	mov.w	r1, #2112	; 0x840
 80019c0:	487e      	ldr	r0, [pc, #504]	; (8001bbc <MX_GPIO_Init+0x2e0>)
 80019c2:	f001 f9e9 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80019cc:	487d      	ldr	r0, [pc, #500]	; (8001bc4 <MX_GPIO_Init+0x2e8>)
 80019ce:	f001 f9e3 	bl	8002d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 80019d2:	2374      	movs	r3, #116	; 0x74
 80019d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4873      	ldr	r0, [pc, #460]	; (8001bb8 <MX_GPIO_Init+0x2dc>)
 80019ea:	f001 f821 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80019ee:	2308      	movs	r3, #8
 80019f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f2:	2301      	movs	r3, #1
 80019f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f6:	2300      	movs	r3, #0
 80019f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019fa:	2300      	movs	r3, #0
 80019fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	486c      	ldr	r0, [pc, #432]	; (8001bb8 <MX_GPIO_Init+0x2dc>)
 8001a06:	f001 f813 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8001a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a10:	2300      	movs	r3, #0
 8001a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4867      	ldr	r0, [pc, #412]	; (8001bbc <MX_GPIO_Init+0x2e0>)
 8001a20:	f001 f806 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 8001a24:	f640 0341 	movw	r3, #2113	; 0x841
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a36:	f107 031c 	add.w	r3, r7, #28
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	485f      	ldr	r0, [pc, #380]	; (8001bbc <MX_GPIO_Init+0x2e0>)
 8001a3e:	f000 fff7 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001a42:	2308      	movs	r3, #8
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a52:	2305      	movs	r3, #5
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4857      	ldr	r0, [pc, #348]	; (8001bbc <MX_GPIO_Init+0x2e0>)
 8001a5e:	f000 ffe7 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a62:	2301      	movs	r3, #1
 8001a64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a66:	4b58      	ldr	r3, [pc, #352]	; (8001bc8 <MX_GPIO_Init+0x2ec>)
 8001a68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 031c 	add.w	r3, r7, #28
 8001a72:	4619      	mov	r1, r3
 8001a74:	4855      	ldr	r0, [pc, #340]	; (8001bcc <MX_GPIO_Init+0x2f0>)
 8001a76:	f000 ffdb 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	484d      	ldr	r0, [pc, #308]	; (8001bc4 <MX_GPIO_Init+0x2e8>)
 8001a8e:	f000 ffcf 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4844      	ldr	r0, [pc, #272]	; (8001bb8 <MX_GPIO_Init+0x2dc>)
 8001aa8:	f000 ffc2 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001aac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aba:	2300      	movs	r3, #0
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001abe:	2305      	movs	r3, #5
 8001ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	483e      	ldr	r0, [pc, #248]	; (8001bc4 <MX_GPIO_Init+0x2e8>)
 8001aca:	f000 ffb1 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001ace:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4838      	ldr	r0, [pc, #224]	; (8001bc4 <MX_GPIO_Init+0x2e8>)
 8001ae4:	f000 ffa4 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001ae8:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001aec:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	482f      	ldr	r0, [pc, #188]	; (8001bc0 <MX_GPIO_Init+0x2e4>)
 8001b02:	f000 ff95 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b06:	2320      	movs	r3, #32
 8001b08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	4829      	ldr	r0, [pc, #164]	; (8001bc0 <MX_GPIO_Init+0x2e4>)
 8001b1a:	f000 ff89 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b1e:	2340      	movs	r3, #64	; 0x40
 8001b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b22:	2301      	movs	r3, #1
 8001b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4823      	ldr	r0, [pc, #140]	; (8001bc4 <MX_GPIO_Init+0x2e8>)
 8001b36:	f000 ff7b 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001b3a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	481c      	ldr	r0, [pc, #112]	; (8001bc4 <MX_GPIO_Init+0x2e8>)
 8001b54:	f000 ff6c 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b5e:	2312      	movs	r3, #18
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b6a:	2304      	movs	r3, #4
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <MX_GPIO_Init+0x2e8>)
 8001b76:	f000 ff5b 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	480a      	ldr	r0, [pc, #40]	; (8001bb8 <MX_GPIO_Init+0x2dc>)
 8001b8e:	f000 ff4f 	bl	8002a30 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b92:	2302      	movs	r3, #2
 8001b94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <MX_GPIO_Init+0x2ec>)
 8001b98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f107 031c 	add.w	r3, r7, #28
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <MX_GPIO_Init+0x2dc>)
 8001ba6:	f000 ff43 	bl	8002a30 <HAL_GPIO_Init>

}
 8001baa:	bf00      	nop
 8001bac:	3730      	adds	r7, #48	; 0x30
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40020800 	.word	0x40020800
 8001bc0:	40020c00 	.word	0x40020c00
 8001bc4:	40020400 	.word	0x40020400
 8001bc8:	10120000 	.word	0x10120000
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd4:	b672      	cpsid	i
}
 8001bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <Error_Handler+0x8>
	...

08001bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	607b      	str	r3, [r7, #4]
 8001be6:	4b14      	ldr	r3, [pc, #80]	; (8001c38 <HAL_MspInit+0x5c>)
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	4a13      	ldr	r2, [pc, #76]	; (8001c38 <HAL_MspInit+0x5c>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf2:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <HAL_MspInit+0x5c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfa:	607b      	str	r3, [r7, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	603b      	str	r3, [r7, #0]
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <HAL_MspInit+0x5c>)
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	4a0c      	ldr	r2, [pc, #48]	; (8001c38 <HAL_MspInit+0x5c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_MspInit+0x5c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c1a:	2007      	movs	r0, #7
 8001c1c:	f000 fec6 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2005      	movs	r0, #5
 8001c26:	f000 fecc 	bl	80029c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001c2a:	2005      	movs	r0, #5
 8001c2c:	f000 fee5 	bl	80029fa <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <HAL_I2C_MspInit+0xc4>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d14b      	bne.n	8001cf6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	4a27      	ldr	r2, [pc, #156]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	f003 0304 	and.w	r3, r3, #4
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a20      	ldr	r2, [pc, #128]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4815      	ldr	r0, [pc, #84]	; (8001d08 <HAL_I2C_MspInit+0xcc>)
 8001cb4:	f000 febc 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001cb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cbe:	2312      	movs	r3, #18
 8001cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001cca:	2304      	movs	r3, #4
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480d      	ldr	r0, [pc, #52]	; (8001d0c <HAL_I2C_MspInit+0xd0>)
 8001cd6:	f000 feab 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a08      	ldr	r2, [pc, #32]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001ce4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_I2C_MspInit+0xc8>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cf6:	bf00      	nop
 8001cf8:	3728      	adds	r7, #40	; 0x28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40005c00 	.word	0x40005c00
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	; 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a28      	ldr	r2, [pc, #160]	; (8001dd0 <HAL_I2S_MspInit+0xc0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d14a      	bne.n	8001dc8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b27      	ldr	r3, [pc, #156]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a26      	ldr	r2, [pc, #152]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b24      	ldr	r3, [pc, #144]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a1f      	ldr	r2, [pc, #124]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <HAL_I2S_MspInit+0xc4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d86:	2310      	movs	r3, #16
 8001d88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d96:	2306      	movs	r3, #6
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	480d      	ldr	r0, [pc, #52]	; (8001dd8 <HAL_I2S_MspInit+0xc8>)
 8001da2:	f000 fe45 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001da6:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001daa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dac:	2302      	movs	r3, #2
 8001dae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db0:	2300      	movs	r3, #0
 8001db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db4:	2300      	movs	r3, #0
 8001db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001db8:	2306      	movs	r3, #6
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbc:	f107 0314 	add.w	r3, r7, #20
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HAL_I2S_MspInit+0xcc>)
 8001dc4:	f000 fe34 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3728      	adds	r7, #40	; 0x28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40003c00 	.word	0x40003c00
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	40020800 	.word	0x40020800

08001de0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a0b      	ldr	r2, [pc, #44]	; (8001e1c <HAL_RNG_MspInit+0x3c>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10d      	bne.n	8001e0e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_RNG_MspInit+0x40>)
 8001df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfa:	4a09      	ldr	r2, [pc, #36]	; (8001e20 <HAL_RNG_MspInit+0x40>)
 8001dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e00:	6353      	str	r3, [r2, #52]	; 0x34
 8001e02:	4b07      	ldr	r3, [pc, #28]	; (8001e20 <HAL_RNG_MspInit+0x40>)
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001e0e:	bf00      	nop
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	50060800 	.word	0x50060800
 8001e20:	40023800 	.word	0x40023800

08001e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08c      	sub	sp, #48	; 0x30
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 031c 	add.w	r3, r7, #28
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a41      	ldr	r2, [pc, #260]	; (8001f48 <HAL_SPI_MspInit+0x124>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d12c      	bne.n	8001ea0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61bb      	str	r3, [r7, #24]
 8001e4a:	4b40      	ldr	r3, [pc, #256]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a3f      	ldr	r2, [pc, #252]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	4b39      	ldr	r3, [pc, #228]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a38      	ldr	r2, [pc, #224]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b36      	ldr	r3, [pc, #216]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
 8001e7c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e7e:	23e0      	movs	r3, #224	; 0xe0
 8001e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e8e:	2305      	movs	r3, #5
 8001e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e92:	f107 031c 	add.w	r3, r7, #28
 8001e96:	4619      	mov	r1, r3
 8001e98:	482d      	ldr	r0, [pc, #180]	; (8001f50 <HAL_SPI_MspInit+0x12c>)
 8001e9a:	f000 fdc9 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e9e:	e04f      	b.n	8001f40 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	; (8001f54 <HAL_SPI_MspInit+0x130>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d14a      	bne.n	8001f40 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	613b      	str	r3, [r7, #16]
 8001eae:	4b27      	ldr	r3, [pc, #156]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a26      	ldr	r2, [pc, #152]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	4a1f      	ldr	r2, [pc, #124]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ed0:	f043 0304 	orr.w	r3, r3, #4
 8001ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed6:	4b1d      	ldr	r3, [pc, #116]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	60bb      	str	r3, [r7, #8]
 8001ee6:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	4a18      	ldr	r2, [pc, #96]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef2:	4b16      	ldr	r3, [pc, #88]	; (8001f4c <HAL_SPI_MspInit+0x128>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	f003 0302 	and.w	r3, r3, #2
 8001efa:	60bb      	str	r3, [r7, #8]
 8001efc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001efe:	2304      	movs	r3, #4
 8001f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f06:	2300      	movs	r3, #0
 8001f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f0e:	2305      	movs	r3, #5
 8001f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	480f      	ldr	r0, [pc, #60]	; (8001f58 <HAL_SPI_MspInit+0x134>)
 8001f1a:	f000 fd89 	bl	8002a30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001f1e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f30:	2305      	movs	r3, #5
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 031c 	add.w	r3, r7, #28
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4808      	ldr	r0, [pc, #32]	; (8001f5c <HAL_SPI_MspInit+0x138>)
 8001f3c:	f000 fd78 	bl	8002a30 <HAL_GPIO_Init>
}
 8001f40:	bf00      	nop
 8001f42:	3730      	adds	r7, #48	; 0x30
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40013000 	.word	0x40013000
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	40020000 	.word	0x40020000
 8001f54:	40003800 	.word	0x40003800
 8001f58:	40020800 	.word	0x40020800
 8001f5c:	40020400 	.word	0x40020400

08001f60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a19      	ldr	r2, [pc, #100]	; (8001fe4 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d12c      	bne.n	8001fdc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	4b18      	ldr	r3, [pc, #96]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4a17      	ldr	r2, [pc, #92]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f8c:	f043 0301 	orr.w	r3, r3, #1
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	613b      	str	r3, [r7, #16]
 8001f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa6:	4a10      	ldr	r2, [pc, #64]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fa8:	f043 0310 	orr.w	r3, r3, #16
 8001fac:	6313      	str	r3, [r2, #48]	; 0x30
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <HAL_TIM_Encoder_MspInit+0x88>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001fba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001fbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fd0:	f107 0314 	add.w	r3, r7, #20
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4805      	ldr	r0, [pc, #20]	; (8001fec <HAL_TIM_Encoder_MspInit+0x8c>)
 8001fd8:	f000 fd2a 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001fdc:	bf00      	nop
 8001fde:	3728      	adds	r7, #40	; 0x28
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40010000 	.word	0x40010000
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40021000 	.word	0x40021000

08001ff0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002000:	d10e      	bne.n	8002020 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	6413      	str	r3, [r2, #64]	; 0x40
 8002012:	4b13      	ldr	r3, [pc, #76]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800201e:	e01a      	b.n	8002056 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0f      	ldr	r2, [pc, #60]	; (8002064 <HAL_TIM_Base_MspInit+0x74>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d115      	bne.n	8002056 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b09      	ldr	r3, [pc, #36]	; (8002060 <HAL_TIM_Base_MspInit+0x70>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201d      	movs	r0, #29
 800204c:	f000 fcb9 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002050:	201d      	movs	r0, #29
 8002052:	f000 fcd2 	bl	80029fa <HAL_NVIC_EnableIRQ>
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800
 8002064:	40000400 	.word	0x40000400

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800206c:	e7fe      	b.n	800206c <NMI_Handler+0x4>

0800206e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800206e:	b480      	push	{r7}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002072:	e7fe      	b.n	8002072 <HardFault_Handler+0x4>

08002074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002078:	e7fe      	b.n	8002078 <MemManage_Handler+0x4>

0800207a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800207e:	e7fe      	b.n	800207e <BusFault_Handler+0x4>

08002080 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002084:	e7fe      	b.n	8002084 <UsageFault_Handler+0x4>

08002086 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020b4:	f000 fb66 	bl	8002784 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 80020d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020d4:	481b      	ldr	r0, [pc, #108]	; (8002144 <TIM2_IRQHandler+0x78>)
 80020d6:	f000 fe78 	bl	8002dca <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 80020da:	4b1b      	ldr	r3, [pc, #108]	; (8002148 <TIM2_IRQHandler+0x7c>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d111      	bne.n	8002106 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 80020e2:	4b1a      	ldr	r3, [pc, #104]	; (800214c <TIM2_IRQHandler+0x80>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2bc8      	cmp	r3, #200	; 0xc8
 80020e8:	dc0a      	bgt.n	8002100 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020ea:	4b18      	ldr	r3, [pc, #96]	; (800214c <TIM2_IRQHandler+0x80>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <TIM2_IRQHandler+0x84>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 80020f4:	4b15      	ldr	r3, [pc, #84]	; (800214c <TIM2_IRQHandler+0x80>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	4a14      	ldr	r2, [pc, #80]	; (800214c <TIM2_IRQHandler+0x80>)
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e002      	b.n	8002106 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <TIM2_IRQHandler+0x7c>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <TIM2_IRQHandler+0x7c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d114      	bne.n	8002138 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 800210e:	4b0f      	ldr	r3, [pc, #60]	; (800214c <TIM2_IRQHandler+0x80>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2b63      	cmp	r3, #99	; 0x63
 8002114:	dd0a      	ble.n	800212c <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <TIM2_IRQHandler+0x80>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <TIM2_IRQHandler+0x84>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8002120:	4b0a      	ldr	r3, [pc, #40]	; (800214c <TIM2_IRQHandler+0x80>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	3b01      	subs	r3, #1
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <TIM2_IRQHandler+0x80>)
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e005      	b.n	8002138 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <TIM2_IRQHandler+0x7c>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
		  i = 100;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <TIM2_IRQHandler+0x80>)
 8002134:	2264      	movs	r2, #100	; 0x64
 8002136:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002138:	4805      	ldr	r0, [pc, #20]	; (8002150 <TIM2_IRQHandler+0x84>)
 800213a:	f005 fba0 	bl	800787e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800213e:	bf00      	nop
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	40020c00 	.word	0x40020c00
 8002148:	200000c4 	.word	0x200000c4
 800214c:	2000000c 	.word	0x2000000c
 8002150:	200002a4 	.word	0x200002a4

08002154 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8002158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800215c:	4804      	ldr	r0, [pc, #16]	; (8002170 <TIM3_IRQHandler+0x1c>)
 800215e:	f000 fe34 	bl	8002dca <HAL_GPIO_TogglePin>
  read_digits();
 8002162:	f7fe fe9b 	bl	8000e9c <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002166:	4803      	ldr	r0, [pc, #12]	; (8002174 <TIM3_IRQHandler+0x20>)
 8002168:	f005 fb89 	bl	800787e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40020c00 	.word	0x40020c00
 8002174:	200001ac 	.word	0x200001ac

08002178 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <OTG_FS_IRQHandler+0x10>)
 800217e:	f001 f8a9 	bl	80032d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000910 	.word	0x20000910

0800218c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002194:	4a14      	ldr	r2, [pc, #80]	; (80021e8 <_sbrk+0x5c>)
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <_sbrk+0x60>)
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a0:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <_sbrk+0x64>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021a8:	4b11      	ldr	r3, [pc, #68]	; (80021f0 <_sbrk+0x64>)
 80021aa:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <_sbrk+0x68>)
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <_sbrk+0x64>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4413      	add	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d207      	bcs.n	80021cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021bc:	f009 fb24 	bl	800b808 <__errno>
 80021c0:	4603      	mov	r3, r0
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3718      	adds	r7, #24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20020000 	.word	0x20020000
 80021ec:	00000400 	.word	0x00000400
 80021f0:	200000c8 	.word	0x200000c8
 80021f4:	20000c28 	.word	0x20000c28

080021f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <SystemInit+0x20>)
 80021fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <SystemInit+0x20>)
 8002204:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002208:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <draw_pixel>:

uint8_t gddram[4][128];


void draw_pixel(uint8_t x, uint8_t y, uint8_t color)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
 8002226:	460b      	mov	r3, r1
 8002228:	71bb      	strb	r3, [r7, #6]
 800222a:	4613      	mov	r3, r2
 800222c:	717b      	strb	r3, [r7, #5]
	if(x<128 && y<32)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db3b      	blt.n	80022ae <draw_pixel+0x92>
 8002236:	79bb      	ldrb	r3, [r7, #6]
 8002238:	2b1f      	cmp	r3, #31
 800223a:	d838      	bhi.n	80022ae <draw_pixel+0x92>
	{
		uint8_t pixel = 0x01;
 800223c:	2301      	movs	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
		uint8_t line = y>>3;
 8002240:	79bb      	ldrb	r3, [r7, #6]
 8002242:	08db      	lsrs	r3, r3, #3
 8002244:	73bb      	strb	r3, [r7, #14]
		uint8_t byte = pixel<<(y%8);
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	79bb      	ldrb	r3, [r7, #6]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	737b      	strb	r3, [r7, #13]
		if(color)
 8002254:	797b      	ldrb	r3, [r7, #5]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <draw_pixel+0x64>
			gddram[line][x] |= byte;
 800225a:	7bba      	ldrb	r2, [r7, #14]
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	4917      	ldr	r1, [pc, #92]	; (80022bc <draw_pixel+0xa0>)
 8002260:	01d2      	lsls	r2, r2, #7
 8002262:	440a      	add	r2, r1
 8002264:	4413      	add	r3, r2
 8002266:	7818      	ldrb	r0, [r3, #0]
 8002268:	7bba      	ldrb	r2, [r7, #14]
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	7b79      	ldrb	r1, [r7, #13]
 800226e:	4301      	orrs	r1, r0
 8002270:	b2c8      	uxtb	r0, r1
 8002272:	4912      	ldr	r1, [pc, #72]	; (80022bc <draw_pixel+0xa0>)
 8002274:	01d2      	lsls	r2, r2, #7
 8002276:	440a      	add	r2, r1
 8002278:	4413      	add	r3, r2
 800227a:	4602      	mov	r2, r0
 800227c:	701a      	strb	r2, [r3, #0]
		else
			gddram[line][x] &= ~byte;
	}
}
 800227e:	e016      	b.n	80022ae <draw_pixel+0x92>
			gddram[line][x] &= ~byte;
 8002280:	7bba      	ldrb	r2, [r7, #14]
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	490d      	ldr	r1, [pc, #52]	; (80022bc <draw_pixel+0xa0>)
 8002286:	01d2      	lsls	r2, r2, #7
 8002288:	440a      	add	r2, r1
 800228a:	4413      	add	r3, r2
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	b25a      	sxtb	r2, r3
 8002290:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002294:	43db      	mvns	r3, r3
 8002296:	b25b      	sxtb	r3, r3
 8002298:	4013      	ands	r3, r2
 800229a:	b259      	sxtb	r1, r3
 800229c:	7bba      	ldrb	r2, [r7, #14]
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	b2c8      	uxtb	r0, r1
 80022a2:	4906      	ldr	r1, [pc, #24]	; (80022bc <draw_pixel+0xa0>)
 80022a4:	01d2      	lsls	r2, r2, #7
 80022a6:	440a      	add	r2, r1
 80022a8:	4413      	add	r3, r2
 80022aa:	4602      	mov	r2, r0
 80022ac:	701a      	strb	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000334 	.word	0x20000334

080022c0 <graphics_Glyph>:


void graphics_Glyph(unsigned char left, unsigned char top,
			   unsigned char width, unsigned char height,
			   const unsigned char *glyph, unsigned char store_width)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4623      	mov	r3, r4
 80022d0:	71fb      	strb	r3, [r7, #7]
 80022d2:	4603      	mov	r3, r0
 80022d4:	71bb      	strb	r3, [r7, #6]
 80022d6:	460b      	mov	r3, r1
 80022d8:	717b      	strb	r3, [r7, #5]
 80022da:	4613      	mov	r3, r2
 80022dc:	713b      	strb	r3, [r7, #4]
	unsigned char x,b,glyph_idx, bitmask;
	int8_t y;
	const unsigned char *glyph_scan = glyph;
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	613b      	str	r3, [r7, #16]

	for (x=0; x<width; x++)
 80022e2:	2300      	movs	r3, #0
 80022e4:	75fb      	strb	r3, [r7, #23]
 80022e6:	e04d      	b.n	8002384 <graphics_Glyph+0xc4>
	{
		for (y=0; y<height; y++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	75bb      	strb	r3, [r7, #22]
 80022ec:	e042      	b.n	8002374 <graphics_Glyph+0xb4>
		{
			glyph_idx = (x / 8) + y*store_width;
 80022ee:	7dfb      	ldrb	r3, [r7, #23]
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	b2da      	uxtb	r2, r3
 80022f4:	7dbb      	ldrb	r3, [r7, #22]
 80022f6:	f897 102c 	ldrb.w	r1, [r7, #44]	; 0x2c
 80022fa:	fb11 f303 	smulbb	r3, r1, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4413      	add	r3, r2
 8002302:	73fb      	strb	r3, [r7, #15]
			b = glyph_scan[glyph_idx];
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4413      	add	r3, r2
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	73bb      	strb	r3, [r7, #14]
			bitmask = 1<<(7-(x % 8));
 800230e:	7dfb      	ldrb	r3, [r7, #23]
 8002310:	43db      	mvns	r3, r3
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	2201      	movs	r2, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	737b      	strb	r3, [r7, #13]
			if (b & bitmask)
 800231e:	7bba      	ldrb	r2, [r7, #14]
 8002320:	7b7b      	ldrb	r3, [r7, #13]
 8002322:	4013      	ands	r3, r2
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00f      	beq.n	800234a <graphics_Glyph+0x8a>
				draw_pixel(left-width+x,top+y,1);
 800232a:	79fa      	ldrb	r2, [r7, #7]
 800232c:	797b      	ldrb	r3, [r7, #5]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	b2da      	uxtb	r2, r3
 8002332:	7dfb      	ldrb	r3, [r7, #23]
 8002334:	4413      	add	r3, r2
 8002336:	b2d8      	uxtb	r0, r3
 8002338:	7dba      	ldrb	r2, [r7, #22]
 800233a:	79bb      	ldrb	r3, [r7, #6]
 800233c:	4413      	add	r3, r2
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2201      	movs	r2, #1
 8002342:	4619      	mov	r1, r3
 8002344:	f7ff ff6a 	bl	800221c <draw_pixel>
 8002348:	e00e      	b.n	8002368 <graphics_Glyph+0xa8>
			else
				draw_pixel(left-width+x,top+y,0);
 800234a:	79fa      	ldrb	r2, [r7, #7]
 800234c:	797b      	ldrb	r3, [r7, #5]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	b2da      	uxtb	r2, r3
 8002352:	7dfb      	ldrb	r3, [r7, #23]
 8002354:	4413      	add	r3, r2
 8002356:	b2d8      	uxtb	r0, r3
 8002358:	7dba      	ldrb	r2, [r7, #22]
 800235a:	79bb      	ldrb	r3, [r7, #6]
 800235c:	4413      	add	r3, r2
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2200      	movs	r2, #0
 8002362:	4619      	mov	r1, r3
 8002364:	f7ff ff5a 	bl	800221c <draw_pixel>
		for (y=0; y<height; y++)
 8002368:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3301      	adds	r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	75bb      	strb	r3, [r7, #22]
 8002374:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8002378:	793b      	ldrb	r3, [r7, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	dbb7      	blt.n	80022ee <graphics_Glyph+0x2e>
	for (x=0; x<width; x++)
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	3301      	adds	r3, #1
 8002382:	75fb      	strb	r3, [r7, #23]
 8002384:	7dfa      	ldrb	r2, [r7, #23]
 8002386:	797b      	ldrb	r3, [r7, #5]
 8002388:	429a      	cmp	r2, r3
 800238a:	d3ad      	bcc.n	80022e8 <graphics_Glyph+0x28>
		}
	}
}
 800238c:	bf00      	nop
 800238e:	bf00      	nop
 8002390:	371c      	adds	r7, #28
 8002392:	46bd      	mov	sp, r7
 8002394:	bd90      	pop	{r4, r7, pc}
	...

08002398 <graphics_text>:

void graphics_text(unsigned char left, unsigned char top, unsigned char font, char *str)
{
 8002398:	b590      	push	{r4, r7, lr}
 800239a:	b089      	sub	sp, #36	; 0x24
 800239c:	af02      	add	r7, sp, #8
 800239e:	603b      	str	r3, [r7, #0]
 80023a0:	4603      	mov	r3, r0
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	460b      	mov	r3, r1
 80023a6:	71bb      	strb	r3, [r7, #6]
 80023a8:	4613      	mov	r3, r2
 80023aa:	717b      	strb	r3, [r7, #5]
	unsigned char x = left;
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	75fb      	strb	r3, [r7, #23]
 	unsigned char width;
	unsigned char height;
	unsigned char store_width;
	const unsigned char *glyph_ptr;

  while(*str != 0x00)
 80023b0:	e081      	b.n	80024b6 <graphics_text+0x11e>
  {

		glyph = (unsigned char)*str;
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	75bb      	strb	r3, [r7, #22]

		/* check to make sure the symbol is a legal one */
		/* if not then just replace it with the default character */
		if((glyph < fonts[font].glyph_beg) || (glyph > fonts[font].glyph_end))
 80023b8:	797a      	ldrb	r2, [r7, #5]
 80023ba:	4944      	ldr	r1, [pc, #272]	; (80024cc <graphics_text+0x134>)
 80023bc:	4613      	mov	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4413      	add	r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	3310      	adds	r3, #16
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	7dba      	ldrb	r2, [r7, #22]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d30b      	bcc.n	80023e8 <graphics_text+0x50>
 80023d0:	797a      	ldrb	r2, [r7, #5]
 80023d2:	493e      	ldr	r1, [pc, #248]	; (80024cc <graphics_text+0x134>)
 80023d4:	4613      	mov	r3, r2
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	4413      	add	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	3311      	adds	r3, #17
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	7dba      	ldrb	r2, [r7, #22]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d909      	bls.n	80023fc <graphics_text+0x64>
		{
			glyph = fonts[font].glyph_def;
 80023e8:	797a      	ldrb	r2, [r7, #5]
 80023ea:	4938      	ldr	r1, [pc, #224]	; (80024cc <graphics_text+0x134>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3312      	adds	r3, #18
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	75bb      	strb	r3, [r7, #22]
		}


		/* make zero based index into the font data arrays */
		glyph -= fonts[font].glyph_beg;
 80023fc:	797a      	ldrb	r2, [r7, #5]
 80023fe:	4933      	ldr	r1, [pc, #204]	; (80024cc <graphics_text+0x134>)
 8002400:	4613      	mov	r3, r2
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	3310      	adds	r3, #16
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	7dba      	ldrb	r2, [r7, #22]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	75bb      	strb	r3, [r7, #22]
		width = fonts[font].fixed_width;	/* check if it is a fixed width */
 8002414:	797a      	ldrb	r2, [r7, #5]
 8002416:	492d      	ldr	r1, [pc, #180]	; (80024cc <graphics_text+0x134>)
 8002418:	4613      	mov	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	3308      	adds	r3, #8
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	757b      	strb	r3, [r7, #21]
		if(width == 0)
 8002428:	7d7b      	ldrb	r3, [r7, #21]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10c      	bne.n	8002448 <graphics_text+0xb0>
		{
			width=fonts[font].width_table[glyph];	/* get the variable width instead */
 800242e:	797a      	ldrb	r2, [r7, #5]
 8002430:	4926      	ldr	r1, [pc, #152]	; (80024cc <graphics_text+0x134>)
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	330c      	adds	r3, #12
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	7dbb      	ldrb	r3, [r7, #22]
 8002442:	4413      	add	r3, r2
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	757b      	strb	r3, [r7, #21]
		}

		height = fonts[font].glyph_height;
 8002448:	797a      	ldrb	r2, [r7, #5]
 800244a:	4920      	ldr	r1, [pc, #128]	; (80024cc <graphics_text+0x134>)
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	3301      	adds	r3, #1
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	753b      	strb	r3, [r7, #20]
		store_width = fonts[font].store_width;
 800245c:	797a      	ldrb	r2, [r7, #5]
 800245e:	491b      	ldr	r1, [pc, #108]	; (80024cc <graphics_text+0x134>)
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	74fb      	strb	r3, [r7, #19]

		glyph_ptr = fonts[font].glyph_table + ((unsigned int)glyph * (unsigned int)store_width * (unsigned int)height);
 800246e:	797a      	ldrb	r2, [r7, #5]
 8002470:	4916      	ldr	r1, [pc, #88]	; (80024cc <graphics_text+0x134>)
 8002472:	4613      	mov	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	440b      	add	r3, r1
 800247c:	3304      	adds	r3, #4
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	7dbb      	ldrb	r3, [r7, #22]
 8002482:	7cf9      	ldrb	r1, [r7, #19]
 8002484:	fb01 f303 	mul.w	r3, r1, r3
 8002488:	7d39      	ldrb	r1, [r7, #20]
 800248a:	fb01 f303 	mul.w	r3, r1, r3
 800248e:	4413      	add	r3, r2
 8002490:	60fb      	str	r3, [r7, #12]


		x+=width;
 8002492:	7dfa      	ldrb	r2, [r7, #23]
 8002494:	7d7b      	ldrb	r3, [r7, #21]
 8002496:	4413      	add	r3, r2
 8002498:	75fb      	strb	r3, [r7, #23]
		graphics_Glyph(x,top,width,height,glyph_ptr,store_width);  /* plug symbol into buffer */
 800249a:	7d3c      	ldrb	r4, [r7, #20]
 800249c:	7d7a      	ldrb	r2, [r7, #21]
 800249e:	79b9      	ldrb	r1, [r7, #6]
 80024a0:	7df8      	ldrb	r0, [r7, #23]
 80024a2:	7cfb      	ldrb	r3, [r7, #19]
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	4623      	mov	r3, r4
 80024ac:	f7ff ff08 	bl	80022c0 <graphics_Glyph>
		str++;								/* point to next character in string */
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	3301      	adds	r3, #1
 80024b4:	603b      	str	r3, [r7, #0]
  while(*str != 0x00)
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f47f af79 	bne.w	80023b2 <graphics_text+0x1a>
	}

}
 80024c0:	bf00      	nop
 80024c2:	bf00      	nop
 80024c4:	371c      	adds	r7, #28
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd90      	pop	{r4, r7, pc}
 80024ca:	bf00      	nop
 80024cc:	0800ba58 	.word	0x0800ba58

080024d0 <ssd1306_command>:
extern I2C_HandleTypeDef hi2c3;

extern uint8_t gddram[4][128];

void ssd1306_command(uint8_t byte)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af02      	add	r7, sp, #8
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
   uint8_t buffer[2];
	buffer[0] = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	733b      	strb	r3, [r7, #12]
	buffer[1] = byte;
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,2,50);
 80024e2:	f107 020c 	add.w	r2, r7, #12
 80024e6:	2332      	movs	r3, #50	; 0x32
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2302      	movs	r3, #2
 80024ec:	2178      	movs	r1, #120	; 0x78
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <ssd1306_command+0x2c>)
 80024f0:	f002 fb2e 	bl	8004b50 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&hi2c1,0x78,&buffer[1],1,50);

}
 80024f4:	bf00      	nop
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000100 	.word	0x20000100

08002500 <oled_update>:

void oled_update(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b088      	sub	sp, #32
 8002504:	af02      	add	r7, sp, #8
  ssd1306_command(SSD1306_COLUMNADDR);
 8002506:	2021      	movs	r0, #33	; 0x21
 8002508:	f7ff ffe2 	bl	80024d0 <ssd1306_command>
  ssd1306_command(0);   // Column start address (0 = reset)
 800250c:	2000      	movs	r0, #0
 800250e:	f7ff ffdf 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
 8002512:	207f      	movs	r0, #127	; 0x7f
 8002514:	f7ff ffdc 	bl	80024d0 <ssd1306_command>

  ssd1306_command(SSD1306_PAGEADDR);
 8002518:	2022      	movs	r0, #34	; 0x22
 800251a:	f7ff ffd9 	bl	80024d0 <ssd1306_command>
  ssd1306_command(0); // Page start address (0 = reset)
 800251e:	2000      	movs	r0, #0
 8002520:	f7ff ffd6 	bl	80024d0 <ssd1306_command>
  ssd1306_command(3); // Page end address
 8002524:	2003      	movs	r0, #3
 8002526:	f7ff ffd3 	bl	80024d0 <ssd1306_command>



	//SEND data in 16byte packs
	uint8_t buffer[17];
	buffer[0] = 0x40;
 800252a:	2340      	movs	r3, #64	; 0x40
 800252c:	703b      	strb	r3, [r7, #0]
	for(uint16_t line=0; line<4; line++)
 800252e:	2300      	movs	r3, #0
 8002530:	82fb      	strh	r3, [r7, #22]
 8002532:	e02d      	b.n	8002590 <oled_update+0x90>
	{
		for(uint8_t x=0;x<127;x+=16)
 8002534:	2300      	movs	r3, #0
 8002536:	757b      	strb	r3, [r7, #21]
 8002538:	e024      	b.n	8002584 <oled_update+0x84>
		{
			for(uint8_t i=1;i<17;i++)
 800253a:	2301      	movs	r3, #1
 800253c:	753b      	strb	r3, [r7, #20]
 800253e:	e012      	b.n	8002566 <oled_update+0x66>
			{
				buffer[i] = gddram[line][x+i-1];
 8002540:	8af9      	ldrh	r1, [r7, #22]
 8002542:	7d7a      	ldrb	r2, [r7, #21]
 8002544:	7d3b      	ldrb	r3, [r7, #20]
 8002546:	4413      	add	r3, r2
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	7d3b      	ldrb	r3, [r7, #20]
 800254c:	4814      	ldr	r0, [pc, #80]	; (80025a0 <oled_update+0xa0>)
 800254e:	01c9      	lsls	r1, r1, #7
 8002550:	4401      	add	r1, r0
 8002552:	440a      	add	r2, r1
 8002554:	7812      	ldrb	r2, [r2, #0]
 8002556:	f107 0118 	add.w	r1, r7, #24
 800255a:	440b      	add	r3, r1
 800255c:	f803 2c18 	strb.w	r2, [r3, #-24]
			for(uint8_t i=1;i<17;i++)
 8002560:	7d3b      	ldrb	r3, [r7, #20]
 8002562:	3301      	adds	r3, #1
 8002564:	753b      	strb	r3, [r7, #20]
 8002566:	7d3b      	ldrb	r3, [r7, #20]
 8002568:	2b10      	cmp	r3, #16
 800256a:	d9e9      	bls.n	8002540 <oled_update+0x40>
			}
			HAL_I2C_Master_Transmit(&hi2c3,0x78,buffer,17,1000);
 800256c:	463a      	mov	r2, r7
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	2311      	movs	r3, #17
 8002576:	2178      	movs	r1, #120	; 0x78
 8002578:	480a      	ldr	r0, [pc, #40]	; (80025a4 <oled_update+0xa4>)
 800257a:	f002 fae9 	bl	8004b50 <HAL_I2C_Master_Transmit>
		for(uint8_t x=0;x<127;x+=16)
 800257e:	7d7b      	ldrb	r3, [r7, #21]
 8002580:	3310      	adds	r3, #16
 8002582:	757b      	strb	r3, [r7, #21]
 8002584:	7d7b      	ldrb	r3, [r7, #21]
 8002586:	2b7e      	cmp	r3, #126	; 0x7e
 8002588:	d9d7      	bls.n	800253a <oled_update+0x3a>
	for(uint16_t line=0; line<4; line++)
 800258a:	8afb      	ldrh	r3, [r7, #22]
 800258c:	3301      	adds	r3, #1
 800258e:	82fb      	strh	r3, [r7, #22]
 8002590:	8afb      	ldrh	r3, [r7, #22]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d9ce      	bls.n	8002534 <oled_update+0x34>
		}
	}

}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20000334 	.word	0x20000334
 80025a4:	20000100 	.word	0x20000100

080025a8 <oled_init>:

void oled_init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
	// Init sequence
  ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80025ae:	20ae      	movs	r0, #174	; 0xae
 80025b0:	f7ff ff8e 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80025b4:	20d5      	movs	r0, #213	; 0xd5
 80025b6:	f7ff ff8b 	bl	80024d0 <ssd1306_command>
  ssd1306_command(0x80);                                  // the suggested ratio 0x80
 80025ba:	2080      	movs	r0, #128	; 0x80
 80025bc:	f7ff ff88 	bl	80024d0 <ssd1306_command>

  ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 80025c0:	20a8      	movs	r0, #168	; 0xa8
 80025c2:	f7ff ff85 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_LCDHEIGHT - 1);
 80025c6:	201f      	movs	r0, #31
 80025c8:	f7ff ff82 	bl	80024d0 <ssd1306_command>

  ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 80025cc:	20d3      	movs	r0, #211	; 0xd3
 80025ce:	f7ff ff7f 	bl	80024d0 <ssd1306_command>
  ssd1306_command(0x0);                                   // no offset
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7ff ff7c 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 80025d8:	2040      	movs	r0, #64	; 0x40
 80025da:	f7ff ff79 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 80025de:	208d      	movs	r0, #141	; 0x8d
 80025e0:	f7ff ff76 	bl	80024d0 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x10); }
  else
    { ssd1306_command(0x14); }
 80025e4:	2014      	movs	r0, #20
 80025e6:	f7ff ff73 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 80025ea:	2020      	movs	r0, #32
 80025ec:	f7ff ff70 	bl	80024d0 <ssd1306_command>
  ssd1306_command(0x00);                                  // 0x0 act like ks0108
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7ff ff6d 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_SEGREMAP | 0x1);
 80025f6:	20a1      	movs	r0, #161	; 0xa1
 80025f8:	f7ff ff6a 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_COMSCANDEC);
 80025fc:	20c8      	movs	r0, #200	; 0xc8
 80025fe:	f7ff ff67 	bl	80024d0 <ssd1306_command>

 #if defined SSD1306_128_32
  ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 8002602:	20da      	movs	r0, #218	; 0xda
 8002604:	f7ff ff64 	bl	80024d0 <ssd1306_command>
  ssd1306_command(0x02);
 8002608:	2002      	movs	r0, #2
 800260a:	f7ff ff61 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 800260e:	2081      	movs	r0, #129	; 0x81
 8002610:	f7ff ff5e 	bl	80024d0 <ssd1306_command>
  ssd1306_command(0x8F);
 8002614:	208f      	movs	r0, #143	; 0x8f
 8002616:	f7ff ff5b 	bl	80024d0 <ssd1306_command>
  else
    { ssd1306_command(0xAF); }

#endif

  ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 800261a:	20d9      	movs	r0, #217	; 0xd9
 800261c:	f7ff ff58 	bl	80024d0 <ssd1306_command>
  if (vccstate == SSD1306_EXTERNALVCC)
    { ssd1306_command(0x22); }
  else
    { ssd1306_command(0xF1); }
 8002620:	20f1      	movs	r0, #241	; 0xf1
 8002622:	f7ff ff55 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 8002626:	20db      	movs	r0, #219	; 0xdb
 8002628:	f7ff ff52 	bl	80024d0 <ssd1306_command>
  ssd1306_command(0x40);
 800262c:	2040      	movs	r0, #64	; 0x40
 800262e:	f7ff ff4f 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 8002632:	20a4      	movs	r0, #164	; 0xa4
 8002634:	f7ff ff4c 	bl	80024d0 <ssd1306_command>
  ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 8002638:	20a6      	movs	r0, #166	; 0xa6
 800263a:	f7ff ff49 	bl	80024d0 <ssd1306_command>

  ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
 800263e:	202e      	movs	r0, #46	; 0x2e
 8002640:	f7ff ff46 	bl	80024d0 <ssd1306_command>

  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 8002644:	20af      	movs	r0, #175	; 0xaf
 8002646:	f7ff ff43 	bl	80024d0 <ssd1306_command>

	//init buffer
	 for(int i = 0; i<4; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	607b      	str	r3, [r7, #4]
 800264e:	e013      	b.n	8002678 <oled_init+0xd0>
		for(int j = 0; j<128; j++)
 8002650:	2300      	movs	r3, #0
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	e00a      	b.n	800266c <oled_init+0xc4>
			gddram[i][j] = 0x00;
 8002656:	4a0c      	ldr	r2, [pc, #48]	; (8002688 <oled_init+0xe0>)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	01db      	lsls	r3, r3, #7
 800265c:	441a      	add	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	4413      	add	r3, r2
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j<128; j++)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	3301      	adds	r3, #1
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	2b7f      	cmp	r3, #127	; 0x7f
 8002670:	ddf1      	ble.n	8002656 <oled_init+0xae>
	 for(int i = 0; i<4; i++)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	3301      	adds	r3, #1
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b03      	cmp	r3, #3
 800267c:	dde8      	ble.n	8002650 <oled_init+0xa8>
}
 800267e:	bf00      	nop
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000334 	.word	0x20000334

0800268c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800268c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002690:	480d      	ldr	r0, [pc, #52]	; (80026c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002692:	490e      	ldr	r1, [pc, #56]	; (80026cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002694:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002696:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002698:	e002      	b.n	80026a0 <LoopCopyDataInit>

0800269a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800269a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800269c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800269e:	3304      	adds	r3, #4

080026a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026a4:	d3f9      	bcc.n	800269a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026a6:	4a0b      	ldr	r2, [pc, #44]	; (80026d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026a8:	4c0b      	ldr	r4, [pc, #44]	; (80026d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ac:	e001      	b.n	80026b2 <LoopFillZerobss>

080026ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b0:	3204      	adds	r2, #4

080026b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026b4:	d3fb      	bcc.n	80026ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026b6:	f7ff fd9f 	bl	80021f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026ba:	f009 f8ab 	bl	800b814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026be:	f7fe fdf3 	bl	80012a8 <main>
  bx  lr    
 80026c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026cc:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80026d0:	0800ded0 	.word	0x0800ded0
  ldr r2, =_sbss
 80026d4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80026d8:	20000c24 	.word	0x20000c24

080026dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026dc:	e7fe      	b.n	80026dc <ADC_IRQHandler>
	...

080026e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <HAL_Init+0x40>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a0d      	ldr	r2, [pc, #52]	; (8002720 <HAL_Init+0x40>)
 80026ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <HAL_Init+0x40>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <HAL_Init+0x40>)
 80026f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026fc:	4b08      	ldr	r3, [pc, #32]	; (8002720 <HAL_Init+0x40>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_Init+0x40>)
 8002702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002706:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002708:	2003      	movs	r0, #3
 800270a:	f000 f94f 	bl	80029ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800270e:	2000      	movs	r0, #0
 8002710:	f000 f808 	bl	8002724 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002714:	f7ff fa62 	bl	8001bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	40023c00 	.word	0x40023c00

08002724 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800272c:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_InitTick+0x54>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	4b12      	ldr	r3, [pc, #72]	; (800277c <HAL_InitTick+0x58>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800273a:	fbb3 f3f1 	udiv	r3, r3, r1
 800273e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002742:	4618      	mov	r0, r3
 8002744:	f000 f967 	bl	8002a16 <HAL_SYSTICK_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d001      	beq.n	8002752 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00e      	b.n	8002770 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b0f      	cmp	r3, #15
 8002756:	d80a      	bhi.n	800276e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002758:	2200      	movs	r2, #0
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002760:	f000 f92f 	bl	80029c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002764:	4a06      	ldr	r2, [pc, #24]	; (8002780 <HAL_InitTick+0x5c>)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	e000      	b.n	8002770 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	20000010 	.word	0x20000010
 800277c:	20000018 	.word	0x20000018
 8002780:	20000014 	.word	0x20000014

08002784 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002784:	b480      	push	{r7}
 8002786:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002788:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_IncTick+0x20>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	461a      	mov	r2, r3
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_IncTick+0x24>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4413      	add	r3, r2
 8002794:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <HAL_IncTick+0x24>)
 8002796:	6013      	str	r3, [r2, #0]
}
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000018 	.word	0x20000018
 80027a8:	20000534 	.word	0x20000534

080027ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return uwTick;
 80027b0:	4b03      	ldr	r3, [pc, #12]	; (80027c0 <HAL_GetTick+0x14>)
 80027b2:	681b      	ldr	r3, [r3, #0]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000534 	.word	0x20000534

080027c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027cc:	f7ff ffee 	bl	80027ac <HAL_GetTick>
 80027d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027dc:	d005      	beq.n	80027ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027de:	4b0a      	ldr	r3, [pc, #40]	; (8002808 <HAL_Delay+0x44>)
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ea:	bf00      	nop
 80027ec:	f7ff ffde 	bl	80027ac <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d8f7      	bhi.n	80027ec <HAL_Delay+0x28>
  {
  }
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	20000018 	.word	0x20000018

0800280c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002828:	4013      	ands	r3, r2
 800282a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002834:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002838:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800283c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800283e:	4a04      	ldr	r2, [pc, #16]	; (8002850 <__NVIC_SetPriorityGrouping+0x44>)
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	60d3      	str	r3, [r2, #12]
}
 8002844:	bf00      	nop
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <__NVIC_GetPriorityGrouping+0x18>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	0a1b      	lsrs	r3, r3, #8
 800285e:	f003 0307 	and.w	r3, r3, #7
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	4603      	mov	r3, r0
 8002878:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800287a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800287e:	2b00      	cmp	r3, #0
 8002880:	db0b      	blt.n	800289a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002882:	79fb      	ldrb	r3, [r7, #7]
 8002884:	f003 021f 	and.w	r2, r3, #31
 8002888:	4907      	ldr	r1, [pc, #28]	; (80028a8 <__NVIC_EnableIRQ+0x38>)
 800288a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800288e:	095b      	lsrs	r3, r3, #5
 8002890:	2001      	movs	r0, #1
 8002892:	fa00 f202 	lsl.w	r2, r0, r2
 8002896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	e000e100 	.word	0xe000e100

080028ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	4603      	mov	r3, r0
 80028b4:	6039      	str	r1, [r7, #0]
 80028b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db0a      	blt.n	80028d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	490c      	ldr	r1, [pc, #48]	; (80028f8 <__NVIC_SetPriority+0x4c>)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	0112      	lsls	r2, r2, #4
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	440b      	add	r3, r1
 80028d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028d4:	e00a      	b.n	80028ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	4908      	ldr	r1, [pc, #32]	; (80028fc <__NVIC_SetPriority+0x50>)
 80028dc:	79fb      	ldrb	r3, [r7, #7]
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	3b04      	subs	r3, #4
 80028e4:	0112      	lsls	r2, r2, #4
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	440b      	add	r3, r1
 80028ea:	761a      	strb	r2, [r3, #24]
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	e000e100 	.word	0xe000e100
 80028fc:	e000ed00 	.word	0xe000ed00

08002900 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 0307 	and.w	r3, r3, #7
 8002912:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	f1c3 0307 	rsb	r3, r3, #7
 800291a:	2b04      	cmp	r3, #4
 800291c:	bf28      	it	cs
 800291e:	2304      	movcs	r3, #4
 8002920:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	3304      	adds	r3, #4
 8002926:	2b06      	cmp	r3, #6
 8002928:	d902      	bls.n	8002930 <NVIC_EncodePriority+0x30>
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	3b03      	subs	r3, #3
 800292e:	e000      	b.n	8002932 <NVIC_EncodePriority+0x32>
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	fa02 f303 	lsl.w	r3, r2, r3
 800293e:	43da      	mvns	r2, r3
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	401a      	ands	r2, r3
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	43d9      	mvns	r1, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002958:	4313      	orrs	r3, r2
         );
}
 800295a:	4618      	mov	r0, r3
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3b01      	subs	r3, #1
 8002974:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002978:	d301      	bcc.n	800297e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800297a:	2301      	movs	r3, #1
 800297c:	e00f      	b.n	800299e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <SysTick_Config+0x40>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3b01      	subs	r3, #1
 8002984:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002986:	210f      	movs	r1, #15
 8002988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800298c:	f7ff ff8e 	bl	80028ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002990:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <SysTick_Config+0x40>)
 8002992:	2200      	movs	r2, #0
 8002994:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002996:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <SysTick_Config+0x40>)
 8002998:	2207      	movs	r2, #7
 800299a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	e000e010 	.word	0xe000e010

080029ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff29 	bl	800280c <__NVIC_SetPriorityGrouping>
}
 80029ba:	bf00      	nop
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029c2:	b580      	push	{r7, lr}
 80029c4:	b086      	sub	sp, #24
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4603      	mov	r3, r0
 80029ca:	60b9      	str	r1, [r7, #8]
 80029cc:	607a      	str	r2, [r7, #4]
 80029ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029d4:	f7ff ff3e 	bl	8002854 <__NVIC_GetPriorityGrouping>
 80029d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	6978      	ldr	r0, [r7, #20]
 80029e0:	f7ff ff8e 	bl	8002900 <NVIC_EncodePriority>
 80029e4:	4602      	mov	r2, r0
 80029e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ea:	4611      	mov	r1, r2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff ff5d 	bl	80028ac <__NVIC_SetPriority>
}
 80029f2:	bf00      	nop
 80029f4:	3718      	adds	r7, #24
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b082      	sub	sp, #8
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	4603      	mov	r3, r0
 8002a02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff31 	bl	8002870 <__NVIC_EnableIRQ>
}
 8002a0e:	bf00      	nop
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ffa2 	bl	8002968 <SysTick_Config>
 8002a24:	4603      	mov	r3, r0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	; 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e16b      	b.n	8002d24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f040 815a 	bne.w	8002d1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d005      	beq.n	8002a82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d130      	bne.n	8002ae4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 0201 	and.w	r2, r3, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d017      	beq.n	8002b20 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d123      	bne.n	8002b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	08da      	lsrs	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3208      	adds	r2, #8
 8002b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	69b9      	ldr	r1, [r7, #24]
 8002b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0203 	and.w	r2, r3, #3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80b4 	beq.w	8002d1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b60      	ldr	r3, [pc, #384]	; (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbe:	4a5f      	ldr	r2, [pc, #380]	; (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	; (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd2:	4a5b      	ldr	r2, [pc, #364]	; (8002d40 <HAL_GPIO_Init+0x310>)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	; (8002d44 <HAL_GPIO_Init+0x314>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d02b      	beq.n	8002c56 <HAL_GPIO_Init+0x226>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a51      	ldr	r2, [pc, #324]	; (8002d48 <HAL_GPIO_Init+0x318>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d025      	beq.n	8002c52 <HAL_GPIO_Init+0x222>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a50      	ldr	r2, [pc, #320]	; (8002d4c <HAL_GPIO_Init+0x31c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01f      	beq.n	8002c4e <HAL_GPIO_Init+0x21e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4f      	ldr	r2, [pc, #316]	; (8002d50 <HAL_GPIO_Init+0x320>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d019      	beq.n	8002c4a <HAL_GPIO_Init+0x21a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4e      	ldr	r2, [pc, #312]	; (8002d54 <HAL_GPIO_Init+0x324>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x216>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4d      	ldr	r2, [pc, #308]	; (8002d58 <HAL_GPIO_Init+0x328>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x212>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4c      	ldr	r2, [pc, #304]	; (8002d5c <HAL_GPIO_Init+0x32c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x20e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4b      	ldr	r2, [pc, #300]	; (8002d60 <HAL_GPIO_Init+0x330>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x20a>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e00e      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	e00c      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c3e:	2306      	movs	r3, #6
 8002c40:	e00a      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c42:	2305      	movs	r3, #5
 8002c44:	e008      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c56:	2300      	movs	r3, #0
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	f002 0203 	and.w	r2, r2, #3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4093      	lsls	r3, r2
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c68:	4935      	ldr	r1, [pc, #212]	; (8002d40 <HAL_GPIO_Init+0x310>)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c76:	4b3b      	ldr	r3, [pc, #236]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c9a:	4a32      	ldr	r2, [pc, #200]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ca0:	4b30      	ldr	r3, [pc, #192]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cc4:	4a27      	ldr	r2, [pc, #156]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cca:	4b26      	ldr	r3, [pc, #152]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cee:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d18:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <HAL_GPIO_Init+0x334>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	f67f ae90 	bls.w	8002a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3724      	adds	r7, #36	; 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	40020c00 	.word	0x40020c00
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40021400 	.word	0x40021400
 8002d5c:	40021800 	.word	0x40021800
 8002d60:	40021c00 	.word	0x40021c00
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691a      	ldr	r2, [r3, #16]
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d002      	beq.n	8002d86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d80:	2301      	movs	r3, #1
 8002d82:	73fb      	strb	r3, [r7, #15]
 8002d84:	e001      	b.n	8002d8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d86:	2300      	movs	r3, #0
 8002d88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr

08002d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	807b      	strh	r3, [r7, #2]
 8002da4:	4613      	mov	r3, r2
 8002da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002da8:	787b      	ldrb	r3, [r7, #1]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dae:	887a      	ldrh	r2, [r7, #2]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002db4:	e003      	b.n	8002dbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	041a      	lsls	r2, r3, #16
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	619a      	str	r2, [r3, #24]
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b085      	sub	sp, #20
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ddc:	887a      	ldrh	r2, [r7, #2]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	4013      	ands	r3, r2
 8002de2:	041a      	lsls	r2, r3, #16
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	43d9      	mvns	r1, r3
 8002de8:	887b      	ldrh	r3, [r7, #2]
 8002dea:	400b      	ands	r3, r1
 8002dec:	431a      	orrs	r2, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	619a      	str	r2, [r3, #24]
}
 8002df2:	bf00      	nop
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002dfe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e00:	b08f      	sub	sp, #60	; 0x3c
 8002e02:	af0a      	add	r7, sp, #40	; 0x28
 8002e04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e054      	b.n	8002eba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d106      	bne.n	8002e30 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f008 fa42 	bl	800b2b4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2203      	movs	r2, #3
 8002e34:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f005 fbe4 	bl	800861c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	687e      	ldr	r6, [r7, #4]
 8002e5c:	466d      	mov	r5, sp
 8002e5e:	f106 0410 	add.w	r4, r6, #16
 8002e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e6a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e72:	1d33      	adds	r3, r6, #4
 8002e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e76:	6838      	ldr	r0, [r7, #0]
 8002e78:	f005 fb5e 	bl	8008538 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2101      	movs	r1, #1
 8002e82:	4618      	mov	r0, r3
 8002e84:	f005 fbdb 	bl	800863e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	687e      	ldr	r6, [r7, #4]
 8002e90:	466d      	mov	r5, sp
 8002e92:	f106 0410 	add.w	r4, r6, #16
 8002e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e9e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ea2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ea6:	1d33      	adds	r3, r6, #4
 8002ea8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002eaa:	6838      	ldr	r0, [r7, #0]
 8002eac:	f005 fcee 	bl	800888c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ec2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002ec2:	b590      	push	{r4, r7, lr}
 8002ec4:	b089      	sub	sp, #36	; 0x24
 8002ec6:	af04      	add	r7, sp, #16
 8002ec8:	6078      	str	r0, [r7, #4]
 8002eca:	4608      	mov	r0, r1
 8002ecc:	4611      	mov	r1, r2
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	70fb      	strb	r3, [r7, #3]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	70bb      	strb	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d101      	bne.n	8002eea <HAL_HCD_HC_Init+0x28>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e076      	b.n	8002fd8 <HAL_HCD_HC_Init+0x116>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	212c      	movs	r1, #44	; 0x2c
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	333d      	adds	r3, #61	; 0x3d
 8002f00:	2200      	movs	r2, #0
 8002f02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	687a      	ldr	r2, [r7, #4]
 8002f08:	212c      	movs	r1, #44	; 0x2c
 8002f0a:	fb01 f303 	mul.w	r3, r1, r3
 8002f0e:	4413      	add	r3, r2
 8002f10:	3338      	adds	r3, #56	; 0x38
 8002f12:	787a      	ldrb	r2, [r7, #1]
 8002f14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	212c      	movs	r1, #44	; 0x2c
 8002f1c:	fb01 f303 	mul.w	r3, r1, r3
 8002f20:	4413      	add	r3, r2
 8002f22:	3340      	adds	r3, #64	; 0x40
 8002f24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002f26:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	fb01 f303 	mul.w	r3, r1, r3
 8002f32:	4413      	add	r3, r2
 8002f34:	3339      	adds	r3, #57	; 0x39
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	212c      	movs	r1, #44	; 0x2c
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	333f      	adds	r3, #63	; 0x3f
 8002f48:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002f4c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	78ba      	ldrb	r2, [r7, #2]
 8002f52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002f56:	b2d0      	uxtb	r0, r2
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	212c      	movs	r1, #44	; 0x2c
 8002f5c:	fb01 f303 	mul.w	r3, r1, r3
 8002f60:	4413      	add	r3, r2
 8002f62:	333a      	adds	r3, #58	; 0x3a
 8002f64:	4602      	mov	r2, r0
 8002f66:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002f68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	da09      	bge.n	8002f84 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	212c      	movs	r1, #44	; 0x2c
 8002f76:	fb01 f303 	mul.w	r3, r1, r3
 8002f7a:	4413      	add	r3, r2
 8002f7c:	333b      	adds	r3, #59	; 0x3b
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
 8002f82:	e008      	b.n	8002f96 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	212c      	movs	r1, #44	; 0x2c
 8002f8a:	fb01 f303 	mul.w	r3, r1, r3
 8002f8e:	4413      	add	r3, r2
 8002f90:	333b      	adds	r3, #59	; 0x3b
 8002f92:	2200      	movs	r2, #0
 8002f94:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	333c      	adds	r3, #60	; 0x3c
 8002fa4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002fa8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6818      	ldr	r0, [r3, #0]
 8002fae:	787c      	ldrb	r4, [r7, #1]
 8002fb0:	78ba      	ldrb	r2, [r7, #2]
 8002fb2:	78f9      	ldrb	r1, [r7, #3]
 8002fb4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002fb6:	9302      	str	r3, [sp, #8]
 8002fb8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002fbc:	9301      	str	r3, [sp, #4]
 8002fbe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	4623      	mov	r3, r4
 8002fc6:	f005 fde3 	bl	8008b90 <USB_HC_Init>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd90      	pop	{r4, r7, pc}

08002fe0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d101      	bne.n	8002ffe <HAL_HCD_HC_Halt+0x1e>
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	e00f      	b.n	800301e <HAL_HCD_HC_Halt+0x3e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f006 f81f 	bl	8009052 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	4608      	mov	r0, r1
 8003032:	4611      	mov	r1, r2
 8003034:	461a      	mov	r2, r3
 8003036:	4603      	mov	r3, r0
 8003038:	70fb      	strb	r3, [r7, #3]
 800303a:	460b      	mov	r3, r1
 800303c:	70bb      	strb	r3, [r7, #2]
 800303e:	4613      	mov	r3, r2
 8003040:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	212c      	movs	r1, #44	; 0x2c
 8003048:	fb01 f303 	mul.w	r3, r1, r3
 800304c:	4413      	add	r3, r2
 800304e:	333b      	adds	r3, #59	; 0x3b
 8003050:	78ba      	ldrb	r2, [r7, #2]
 8003052:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003054:	78fb      	ldrb	r3, [r7, #3]
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	212c      	movs	r1, #44	; 0x2c
 800305a:	fb01 f303 	mul.w	r3, r1, r3
 800305e:	4413      	add	r3, r2
 8003060:	333f      	adds	r3, #63	; 0x3f
 8003062:	787a      	ldrb	r2, [r7, #1]
 8003064:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003066:	7c3b      	ldrb	r3, [r7, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d112      	bne.n	8003092 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800306c:	78fb      	ldrb	r3, [r7, #3]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	212c      	movs	r1, #44	; 0x2c
 8003072:	fb01 f303 	mul.w	r3, r1, r3
 8003076:	4413      	add	r3, r2
 8003078:	3342      	adds	r3, #66	; 0x42
 800307a:	2203      	movs	r2, #3
 800307c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800307e:	78fb      	ldrb	r3, [r7, #3]
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	212c      	movs	r1, #44	; 0x2c
 8003084:	fb01 f303 	mul.w	r3, r1, r3
 8003088:	4413      	add	r3, r2
 800308a:	333d      	adds	r3, #61	; 0x3d
 800308c:	7f3a      	ldrb	r2, [r7, #28]
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e008      	b.n	80030a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	212c      	movs	r1, #44	; 0x2c
 8003098:	fb01 f303 	mul.w	r3, r1, r3
 800309c:	4413      	add	r3, r2
 800309e:	3342      	adds	r3, #66	; 0x42
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80030a4:	787b      	ldrb	r3, [r7, #1]
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	f200 80c6 	bhi.w	8003238 <HAL_HCD_HC_SubmitRequest+0x210>
 80030ac:	a201      	add	r2, pc, #4	; (adr r2, 80030b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80030ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b2:	bf00      	nop
 80030b4:	080030c5 	.word	0x080030c5
 80030b8:	08003225 	.word	0x08003225
 80030bc:	08003129 	.word	0x08003129
 80030c0:	080031a7 	.word	0x080031a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80030c4:	7c3b      	ldrb	r3, [r7, #16]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	f040 80b8 	bne.w	800323c <HAL_HCD_HC_SubmitRequest+0x214>
 80030cc:	78bb      	ldrb	r3, [r7, #2]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f040 80b4 	bne.w	800323c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80030d4:	8b3b      	ldrh	r3, [r7, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d108      	bne.n	80030ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80030da:	78fb      	ldrb	r3, [r7, #3]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	212c      	movs	r1, #44	; 0x2c
 80030e0:	fb01 f303 	mul.w	r3, r1, r3
 80030e4:	4413      	add	r3, r2
 80030e6:	3355      	adds	r3, #85	; 0x55
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	212c      	movs	r1, #44	; 0x2c
 80030f2:	fb01 f303 	mul.w	r3, r1, r3
 80030f6:	4413      	add	r3, r2
 80030f8:	3355      	adds	r3, #85	; 0x55
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d109      	bne.n	8003114 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003100:	78fb      	ldrb	r3, [r7, #3]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	212c      	movs	r1, #44	; 0x2c
 8003106:	fb01 f303 	mul.w	r3, r1, r3
 800310a:	4413      	add	r3, r2
 800310c:	3342      	adds	r3, #66	; 0x42
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003112:	e093      	b.n	800323c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3342      	adds	r3, #66	; 0x42
 8003122:	2202      	movs	r2, #2
 8003124:	701a      	strb	r2, [r3, #0]
      break;
 8003126:	e089      	b.n	800323c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003128:	78bb      	ldrb	r3, [r7, #2]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d11d      	bne.n	800316a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	212c      	movs	r1, #44	; 0x2c
 8003134:	fb01 f303 	mul.w	r3, r1, r3
 8003138:	4413      	add	r3, r2
 800313a:	3355      	adds	r3, #85	; 0x55
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d109      	bne.n	8003156 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003142:	78fb      	ldrb	r3, [r7, #3]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	212c      	movs	r1, #44	; 0x2c
 8003148:	fb01 f303 	mul.w	r3, r1, r3
 800314c:	4413      	add	r3, r2
 800314e:	3342      	adds	r3, #66	; 0x42
 8003150:	2200      	movs	r2, #0
 8003152:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003154:	e073      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	212c      	movs	r1, #44	; 0x2c
 800315c:	fb01 f303 	mul.w	r3, r1, r3
 8003160:	4413      	add	r3, r2
 8003162:	3342      	adds	r3, #66	; 0x42
 8003164:	2202      	movs	r2, #2
 8003166:	701a      	strb	r2, [r3, #0]
      break;
 8003168:	e069      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	212c      	movs	r1, #44	; 0x2c
 8003170:	fb01 f303 	mul.w	r3, r1, r3
 8003174:	4413      	add	r3, r2
 8003176:	3354      	adds	r3, #84	; 0x54
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	212c      	movs	r1, #44	; 0x2c
 8003184:	fb01 f303 	mul.w	r3, r1, r3
 8003188:	4413      	add	r3, r2
 800318a:	3342      	adds	r3, #66	; 0x42
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
      break;
 8003190:	e055      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3342      	adds	r3, #66	; 0x42
 80031a0:	2202      	movs	r2, #2
 80031a2:	701a      	strb	r2, [r3, #0]
      break;
 80031a4:	e04b      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80031a6:	78bb      	ldrb	r3, [r7, #2]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11d      	bne.n	80031e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	212c      	movs	r1, #44	; 0x2c
 80031b2:	fb01 f303 	mul.w	r3, r1, r3
 80031b6:	4413      	add	r3, r2
 80031b8:	3355      	adds	r3, #85	; 0x55
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d109      	bne.n	80031d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	212c      	movs	r1, #44	; 0x2c
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	3342      	adds	r3, #66	; 0x42
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80031d2:	e034      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3342      	adds	r3, #66	; 0x42
 80031e2:	2202      	movs	r2, #2
 80031e4:	701a      	strb	r2, [r3, #0]
      break;
 80031e6:	e02a      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	212c      	movs	r1, #44	; 0x2c
 80031ee:	fb01 f303 	mul.w	r3, r1, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	3354      	adds	r3, #84	; 0x54
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	212c      	movs	r1, #44	; 0x2c
 8003202:	fb01 f303 	mul.w	r3, r1, r3
 8003206:	4413      	add	r3, r2
 8003208:	3342      	adds	r3, #66	; 0x42
 800320a:	2200      	movs	r2, #0
 800320c:	701a      	strb	r2, [r3, #0]
      break;
 800320e:	e016      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3342      	adds	r3, #66	; 0x42
 800321e:	2202      	movs	r2, #2
 8003220:	701a      	strb	r2, [r3, #0]
      break;
 8003222:	e00c      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3342      	adds	r3, #66	; 0x42
 8003232:	2200      	movs	r2, #0
 8003234:	701a      	strb	r2, [r3, #0]
      break;
 8003236:	e002      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003238:	bf00      	nop
 800323a:	e000      	b.n	800323e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800323c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	212c      	movs	r1, #44	; 0x2c
 8003244:	fb01 f303 	mul.w	r3, r1, r3
 8003248:	4413      	add	r3, r2
 800324a:	3344      	adds	r3, #68	; 0x44
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	8b3a      	ldrh	r2, [r7, #24]
 8003254:	6879      	ldr	r1, [r7, #4]
 8003256:	202c      	movs	r0, #44	; 0x2c
 8003258:	fb00 f303 	mul.w	r3, r0, r3
 800325c:	440b      	add	r3, r1
 800325e:	334c      	adds	r3, #76	; 0x4c
 8003260:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	3360      	adds	r3, #96	; 0x60
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003274:	78fb      	ldrb	r3, [r7, #3]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3350      	adds	r3, #80	; 0x50
 8003282:	2200      	movs	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	212c      	movs	r1, #44	; 0x2c
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3339      	adds	r3, #57	; 0x39
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003298:	78fb      	ldrb	r3, [r7, #3]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	212c      	movs	r1, #44	; 0x2c
 800329e:	fb01 f303 	mul.w	r3, r1, r3
 80032a2:	4413      	add	r3, r2
 80032a4:	3361      	adds	r3, #97	; 0x61
 80032a6:	2200      	movs	r2, #0
 80032a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	78fb      	ldrb	r3, [r7, #3]
 80032b0:	222c      	movs	r2, #44	; 0x2c
 80032b2:	fb02 f303 	mul.w	r3, r2, r3
 80032b6:	3338      	adds	r3, #56	; 0x38
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	18d1      	adds	r1, r2, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691b      	ldr	r3, [r3, #16]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	461a      	mov	r2, r3
 80032c4:	f005 fd72 	bl	8008dac <USB_HC_StartXfer>
 80032c8:	4603      	mov	r3, r0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop

080032d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f005 fa8b 	bl	8008806 <USB_GetMode>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	f040 80ef 	bne.w	80034d6 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f005 fa6f 	bl	80087e0 <USB_ReadInterrupts>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80e5 	beq.w	80034d4 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f005 fa66 	bl	80087e0 <USB_ReadInterrupts>
 8003314:	4603      	mov	r3, r0
 8003316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800331e:	d104      	bne.n	800332a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003328:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f005 fa56 	bl	80087e0 <USB_ReadInterrupts>
 8003334:	4603      	mov	r3, r0
 8003336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800333a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800333e:	d104      	bne.n	800334a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003348:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f005 fa46 	bl	80087e0 <USB_ReadInterrupts>
 8003354:	4603      	mov	r3, r0
 8003356:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800335a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800335e:	d104      	bne.n	800336a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003368:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f005 fa36 	bl	80087e0 <USB_ReadInterrupts>
 8003374:	4603      	mov	r3, r0
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b02      	cmp	r3, #2
 800337c:	d103      	bne.n	8003386 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2202      	movs	r2, #2
 8003384:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f005 fa28 	bl	80087e0 <USB_ReadInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800339a:	d115      	bne.n	80033c8 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80033a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f007 fffa 	bl	800b3b0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2101      	movs	r1, #1
 80033c2:	4618      	mov	r0, r3
 80033c4:	f005 fb1e 	bl	8008a04 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f005 fa07 	bl	80087e0 <USB_ReadInterrupts>
 80033d2:	4603      	mov	r3, r0
 80033d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033dc:	d102      	bne.n	80033e4 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f001 f9ff 	bl	80047e2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f005 f9f9 	bl	80087e0 <USB_ReadInterrupts>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f003 0308 	and.w	r3, r3, #8
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d106      	bne.n	8003406 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f007 ffbd 	bl	800b378 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2208      	movs	r2, #8
 8003404:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f005 f9e8 	bl	80087e0 <USB_ReadInterrupts>
 8003410:	4603      	mov	r3, r0
 8003412:	f003 0310 	and.w	r3, r3, #16
 8003416:	2b10      	cmp	r3, #16
 8003418:	d101      	bne.n	800341e <HAL_HCD_IRQHandler+0x14a>
 800341a:	2301      	movs	r3, #1
 800341c:	e000      	b.n	8003420 <HAL_HCD_IRQHandler+0x14c>
 800341e:	2300      	movs	r3, #0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d012      	beq.n	800344a <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0210 	bic.w	r2, r2, #16
 8003432:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f001 f902 	bl	800463e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699a      	ldr	r2, [r3, #24]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f042 0210 	orr.w	r2, r2, #16
 8003448:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f005 f9c6 	bl	80087e0 <USB_ReadInterrupts>
 8003454:	4603      	mov	r3, r0
 8003456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800345e:	d13a      	bne.n	80034d6 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4618      	mov	r0, r3
 8003466:	f005 fde3 	bl	8009030 <USB_HC_ReadInterrupt>
 800346a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800346c:	2300      	movs	r3, #0
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e025      	b.n	80034be <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 030f 	and.w	r3, r3, #15
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	fa22 f303 	lsr.w	r3, r2, r3
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	015a      	lsls	r2, r3, #5
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800349c:	d106      	bne.n	80034ac <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	4619      	mov	r1, r3
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f8ab 	bl	8003600 <HCD_HC_IN_IRQHandler>
 80034aa:	e005      	b.n	80034b8 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	4619      	mov	r1, r3
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 fcc6 	bl	8003e44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	3301      	adds	r3, #1
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d3d4      	bcc.n	8003472 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034d0:	615a      	str	r2, [r3, #20]
 80034d2:	e000      	b.n	80034d6 <HAL_HCD_IRQHandler+0x202>
      return;
 80034d4:	bf00      	nop
    }
  }
}
 80034d6:	3718      	adds	r7, #24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d101      	bne.n	80034f2 <HAL_HCD_Start+0x16>
 80034ee:	2302      	movs	r3, #2
 80034f0:	e013      	b.n	800351a <HAL_HCD_Start+0x3e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f005 f87b 	bl	80085fa <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2101      	movs	r1, #1
 800350a:	4618      	mov	r0, r3
 800350c:	f005 fade 	bl	8008acc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b082      	sub	sp, #8
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_HCD_Stop+0x16>
 8003534:	2302      	movs	r3, #2
 8003536:	e00d      	b.n	8003554 <HAL_HCD_Stop+0x32>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f005 fedd 	bl	8009304 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003552:	2300      	movs	r3, #0
}
 8003554:	4618      	mov	r0, r3
 8003556:	3708      	adds	r7, #8
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4618      	mov	r0, r3
 800356a:	f005 fa85 	bl	8008a78 <USB_ResetPort>
 800356e:	4603      	mov	r3, r0
}
 8003570:	4618      	mov	r0, r3
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3360      	adds	r3, #96	; 0x60
 8003592:	781b      	ldrb	r3, [r3, #0]
}
 8003594:	4618      	mov	r0, r3
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	3350      	adds	r3, #80	; 0x50
 80035ba:	681b      	ldr	r3, [r3, #0]
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f005 fac9 	bl	8008b6c <USB_GetCurrentFrame>
 80035da:	4603      	mov	r3, r0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f005 faa4 	bl	8008b3e <USB_GetHostSpeed>
 80035f6:	4603      	mov	r3, r0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3708      	adds	r7, #8
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
 8003608:	460b      	mov	r3, r1
 800360a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003616:	78fb      	ldrb	r3, [r7, #3]
 8003618:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b04      	cmp	r3, #4
 800362e:	d119      	bne.n	8003664 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	015a      	lsls	r2, r3, #5
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	4413      	add	r3, r2
 8003638:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363c:	461a      	mov	r2, r3
 800363e:	2304      	movs	r3, #4
 8003640:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	0151      	lsls	r1, r2, #5
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	440a      	add	r2, r1
 8003658:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800365c:	f043 0302 	orr.w	r3, r3, #2
 8003660:	60d3      	str	r3, [r2, #12]
 8003662:	e101      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800367a:	d12b      	bne.n	80036d4 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800368e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3361      	adds	r3, #97	; 0x61
 800369e:	2207      	movs	r2, #7
 80036a0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	015a      	lsls	r2, r3, #5
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4413      	add	r3, r2
 80036aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	0151      	lsls	r1, r2, #5
 80036b4:	693a      	ldr	r2, [r7, #16]
 80036b6:	440a      	add	r2, r1
 80036b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80036bc:	f043 0302 	orr.w	r3, r3, #2
 80036c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f005 fcc0 	bl	8009052 <USB_HC_Halt>
 80036d2:	e0c9      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d109      	bne.n	80036fe <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f6:	461a      	mov	r2, r3
 80036f8:	2320      	movs	r3, #32
 80036fa:	6093      	str	r3, [r2, #8]
 80036fc:	e0b4      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	015a      	lsls	r2, r3, #5
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	4413      	add	r3, r2
 8003706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b08      	cmp	r3, #8
 8003712:	d133      	bne.n	800377c <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4413      	add	r3, r2
 800371c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	0151      	lsls	r1, r2, #5
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	440a      	add	r2, r1
 800372a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800372e:	f043 0302 	orr.w	r3, r3, #2
 8003732:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	3361      	adds	r3, #97	; 0x61
 8003742:	2205      	movs	r2, #5
 8003744:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	4413      	add	r3, r2
 800374e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003752:	461a      	mov	r2, r3
 8003754:	2310      	movs	r3, #16
 8003756:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	2308      	movs	r3, #8
 8003768:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	4611      	mov	r1, r2
 8003774:	4618      	mov	r0, r3
 8003776:	f005 fc6c 	bl	8009052 <USB_HC_Halt>
 800377a:	e075      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	015a      	lsls	r2, r3, #5
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4413      	add	r3, r2
 8003784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800378e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003792:	d134      	bne.n	80037fe <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	0151      	lsls	r1, r2, #5
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	440a      	add	r2, r1
 80037aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037ae:	f043 0302 	orr.w	r3, r3, #2
 80037b2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	212c      	movs	r1, #44	; 0x2c
 80037ba:	fb01 f303 	mul.w	r3, r1, r3
 80037be:	4413      	add	r3, r2
 80037c0:	3361      	adds	r3, #97	; 0x61
 80037c2:	2208      	movs	r2, #8
 80037c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	2310      	movs	r3, #16
 80037d6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	461a      	mov	r2, r3
 80037e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80037ea:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f005 fc2b 	bl	8009052 <USB_HC_Halt>
 80037fc:	e034      	b.n	8003868 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	015a      	lsls	r2, r3, #5
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	4413      	add	r3, r2
 8003806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003810:	2b80      	cmp	r3, #128	; 0x80
 8003812:	d129      	bne.n	8003868 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	0151      	lsls	r1, r2, #5
 8003826:	693a      	ldr	r2, [r7, #16]
 8003828:	440a      	add	r2, r1
 800382a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	212c      	movs	r1, #44	; 0x2c
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	4413      	add	r3, r2
 8003840:	3361      	adds	r3, #97	; 0x61
 8003842:	2206      	movs	r2, #6
 8003844:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	4611      	mov	r1, r2
 8003850:	4618      	mov	r0, r3
 8003852:	f005 fbfe 	bl	8009052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	4413      	add	r3, r2
 800385e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003862:	461a      	mov	r2, r3
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800387e:	d122      	bne.n	80038c6 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	015a      	lsls	r2, r3, #5
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4413      	add	r3, r2
 8003888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	0151      	lsls	r1, r2, #5
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	440a      	add	r2, r1
 8003896:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800389a:	f043 0302 	orr.w	r3, r3, #2
 800389e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	4611      	mov	r1, r2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f005 fbd1 	bl	8009052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038bc:	461a      	mov	r2, r3
 80038be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80038c4:	e2ba      	b.n	8003e3c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 811b 	bne.w	8003b14 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d019      	beq.n	800391a <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3348      	adds	r3, #72	; 0x48
 80038f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	0159      	lsls	r1, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	440b      	add	r3, r1
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003908:	1ad2      	subs	r2, r2, r3
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	202c      	movs	r0, #44	; 0x2c
 8003910:	fb00 f303 	mul.w	r3, r0, r3
 8003914:	440b      	add	r3, r1
 8003916:	3350      	adds	r3, #80	; 0x50
 8003918:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	3361      	adds	r3, #97	; 0x61
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	212c      	movs	r1, #44	; 0x2c
 8003932:	fb01 f303 	mul.w	r3, r1, r3
 8003936:	4413      	add	r3, r2
 8003938:	335c      	adds	r3, #92	; 0x5c
 800393a:	2200      	movs	r2, #0
 800393c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4413      	add	r3, r2
 8003946:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394a:	461a      	mov	r2, r3
 800394c:	2301      	movs	r3, #1
 800394e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	212c      	movs	r1, #44	; 0x2c
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	333f      	adds	r3, #63	; 0x3f
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d009      	beq.n	8003978 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	212c      	movs	r1, #44	; 0x2c
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	333f      	adds	r3, #63	; 0x3f
 8003972:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003974:	2b02      	cmp	r3, #2
 8003976:	d121      	bne.n	80039bc <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4413      	add	r3, r2
 8003980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	0151      	lsls	r1, r2, #5
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	440a      	add	r2, r1
 800398e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003992:	f043 0302 	orr.w	r3, r3, #2
 8003996:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	b2d2      	uxtb	r2, r2
 80039a0:	4611      	mov	r1, r2
 80039a2:	4618      	mov	r0, r3
 80039a4:	f005 fb55 	bl	8009052 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	015a      	lsls	r2, r3, #5
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4413      	add	r3, r2
 80039b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b4:	461a      	mov	r2, r3
 80039b6:	2310      	movs	r3, #16
 80039b8:	6093      	str	r3, [r2, #8]
 80039ba:	e066      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	212c      	movs	r1, #44	; 0x2c
 80039c2:	fb01 f303 	mul.w	r3, r1, r3
 80039c6:	4413      	add	r3, r2
 80039c8:	333f      	adds	r3, #63	; 0x3f
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b03      	cmp	r3, #3
 80039ce:	d127      	bne.n	8003a20 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	0151      	lsls	r1, r2, #5
 80039e2:	693a      	ldr	r2, [r7, #16]
 80039e4:	440a      	add	r2, r1
 80039e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039ee:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	212c      	movs	r1, #44	; 0x2c
 80039f6:	fb01 f303 	mul.w	r3, r1, r3
 80039fa:	4413      	add	r3, r2
 80039fc:	3360      	adds	r3, #96	; 0x60
 80039fe:	2201      	movs	r2, #1
 8003a00:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	b2d9      	uxtb	r1, r3
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	202c      	movs	r0, #44	; 0x2c
 8003a0c:	fb00 f303 	mul.w	r3, r0, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3360      	adds	r3, #96	; 0x60
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	461a      	mov	r2, r3
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f007 fcd7 	bl	800b3cc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a1e:	e034      	b.n	8003a8a <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	212c      	movs	r1, #44	; 0x2c
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	4413      	add	r3, r2
 8003a2c:	333f      	adds	r3, #63	; 0x3f
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d12a      	bne.n	8003a8a <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3360      	adds	r3, #96	; 0x60
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	212c      	movs	r1, #44	; 0x2c
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3354      	adds	r3, #84	; 0x54
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	f083 0301 	eor.w	r3, r3, #1
 8003a5a:	b2d8      	uxtb	r0, r3
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3354      	adds	r3, #84	; 0x54
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	b2d9      	uxtb	r1, r3
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	202c      	movs	r0, #44	; 0x2c
 8003a78:	fb00 f303 	mul.w	r3, r0, r3
 8003a7c:	4413      	add	r3, r2
 8003a7e:	3360      	adds	r3, #96	; 0x60
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f007 fca1 	bl	800b3cc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d12b      	bne.n	8003aea <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	3348      	adds	r3, #72	; 0x48
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	202c      	movs	r0, #44	; 0x2c
 8003aa8:	fb00 f202 	mul.w	r2, r0, r2
 8003aac:	440a      	add	r2, r1
 8003aae:	3240      	adds	r2, #64	; 0x40
 8003ab0:	8812      	ldrh	r2, [r2, #0]
 8003ab2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 81be 	beq.w	8003e3c <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	212c      	movs	r1, #44	; 0x2c
 8003ac6:	fb01 f303 	mul.w	r3, r1, r3
 8003aca:	4413      	add	r3, r2
 8003acc:	3354      	adds	r3, #84	; 0x54
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	f083 0301 	eor.w	r3, r3, #1
 8003ad4:	b2d8      	uxtb	r0, r3
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	3354      	adds	r3, #84	; 0x54
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	701a      	strb	r2, [r3, #0]
}
 8003ae8:	e1a8      	b.n	8003e3c <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	3354      	adds	r3, #84	; 0x54
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2d8      	uxtb	r0, r3
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	212c      	movs	r1, #44	; 0x2c
 8003b06:	fb01 f303 	mul.w	r3, r1, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	3354      	adds	r3, #84	; 0x54
 8003b0e:	4602      	mov	r2, r0
 8003b10:	701a      	strb	r2, [r3, #0]
}
 8003b12:	e193      	b.n	8003e3c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	f040 8106 	bne.w	8003d38 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b46:	f023 0302 	bic.w	r3, r3, #2
 8003b4a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	3361      	adds	r3, #97	; 0x61
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d109      	bne.n	8003b74 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	212c      	movs	r1, #44	; 0x2c
 8003b66:	fb01 f303 	mul.w	r3, r1, r3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	3360      	adds	r3, #96	; 0x60
 8003b6e:	2201      	movs	r2, #1
 8003b70:	701a      	strb	r2, [r3, #0]
 8003b72:	e0c9      	b.n	8003d08 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	212c      	movs	r1, #44	; 0x2c
 8003b7a:	fb01 f303 	mul.w	r3, r1, r3
 8003b7e:	4413      	add	r3, r2
 8003b80:	3361      	adds	r3, #97	; 0x61
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	d109      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	212c      	movs	r1, #44	; 0x2c
 8003b8e:	fb01 f303 	mul.w	r3, r1, r3
 8003b92:	4413      	add	r3, r2
 8003b94:	3360      	adds	r3, #96	; 0x60
 8003b96:	2205      	movs	r2, #5
 8003b98:	701a      	strb	r2, [r3, #0]
 8003b9a:	e0b5      	b.n	8003d08 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	212c      	movs	r1, #44	; 0x2c
 8003ba2:	fb01 f303 	mul.w	r3, r1, r3
 8003ba6:	4413      	add	r3, r2
 8003ba8:	3361      	adds	r3, #97	; 0x61
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b06      	cmp	r3, #6
 8003bae:	d009      	beq.n	8003bc4 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	3361      	adds	r3, #97	; 0x61
 8003bbe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d150      	bne.n	8003c66 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	212c      	movs	r1, #44	; 0x2c
 8003bca:	fb01 f303 	mul.w	r3, r1, r3
 8003bce:	4413      	add	r3, r2
 8003bd0:	335c      	adds	r3, #92	; 0x5c
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	202c      	movs	r0, #44	; 0x2c
 8003bdc:	fb00 f303 	mul.w	r3, r0, r3
 8003be0:	440b      	add	r3, r1
 8003be2:	335c      	adds	r3, #92	; 0x5c
 8003be4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	212c      	movs	r1, #44	; 0x2c
 8003bec:	fb01 f303 	mul.w	r3, r1, r3
 8003bf0:	4413      	add	r3, r2
 8003bf2:	335c      	adds	r3, #92	; 0x5c
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d912      	bls.n	8003c20 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	212c      	movs	r1, #44	; 0x2c
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	4413      	add	r3, r2
 8003c06:	335c      	adds	r3, #92	; 0x5c
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	212c      	movs	r1, #44	; 0x2c
 8003c12:	fb01 f303 	mul.w	r3, r1, r3
 8003c16:	4413      	add	r3, r2
 8003c18:	3360      	adds	r3, #96	; 0x60
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c1e:	e073      	b.n	8003d08 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	212c      	movs	r1, #44	; 0x2c
 8003c26:	fb01 f303 	mul.w	r3, r1, r3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3360      	adds	r3, #96	; 0x60
 8003c2e:	2202      	movs	r2, #2
 8003c30:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	015a      	lsls	r2, r3, #5
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	4413      	add	r3, r2
 8003c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c48:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003c50:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003c64:	e050      	b.n	8003d08 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	212c      	movs	r1, #44	; 0x2c
 8003c6c:	fb01 f303 	mul.w	r3, r1, r3
 8003c70:	4413      	add	r3, r2
 8003c72:	3361      	adds	r3, #97	; 0x61
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2b03      	cmp	r3, #3
 8003c78:	d122      	bne.n	8003cc0 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	212c      	movs	r1, #44	; 0x2c
 8003c80:	fb01 f303 	mul.w	r3, r1, r3
 8003c84:	4413      	add	r3, r2
 8003c86:	3360      	adds	r3, #96	; 0x60
 8003c88:	2202      	movs	r2, #2
 8003c8a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ca2:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003caa:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	6013      	str	r3, [r2, #0]
 8003cbe:	e023      	b.n	8003d08 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	212c      	movs	r1, #44	; 0x2c
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	3361      	adds	r3, #97	; 0x61
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b07      	cmp	r3, #7
 8003cd2:	d119      	bne.n	8003d08 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	335c      	adds	r3, #92	; 0x5c
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	202c      	movs	r0, #44	; 0x2c
 8003cec:	fb00 f303 	mul.w	r3, r0, r3
 8003cf0:	440b      	add	r3, r1
 8003cf2:	335c      	adds	r3, #92	; 0x5c
 8003cf4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	212c      	movs	r1, #44	; 0x2c
 8003cfc:	fb01 f303 	mul.w	r3, r1, r3
 8003d00:	4413      	add	r3, r2
 8003d02:	3360      	adds	r3, #96	; 0x60
 8003d04:	2204      	movs	r2, #4
 8003d06:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	015a      	lsls	r2, r3, #5
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	4413      	add	r3, r2
 8003d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d14:	461a      	mov	r2, r3
 8003d16:	2302      	movs	r3, #2
 8003d18:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	b2d9      	uxtb	r1, r3
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	202c      	movs	r0, #44	; 0x2c
 8003d24:	fb00 f303 	mul.w	r3, r0, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	3360      	adds	r3, #96	; 0x60
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f007 fb4b 	bl	800b3cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003d36:	e081      	b.n	8003e3c <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d176      	bne.n	8003e3c <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	212c      	movs	r1, #44	; 0x2c
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	4413      	add	r3, r2
 8003d5a:	333f      	adds	r3, #63	; 0x3f
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d121      	bne.n	8003da6 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	212c      	movs	r1, #44	; 0x2c
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	4413      	add	r3, r2
 8003d6e:	335c      	adds	r3, #92	; 0x5c
 8003d70:	2200      	movs	r2, #0
 8003d72:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	015a      	lsls	r2, r3, #5
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	0151      	lsls	r1, r2, #5
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	440a      	add	r2, r1
 8003d8a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f005 f957 	bl	8009052 <USB_HC_Halt>
 8003da4:	e041      	b.n	8003e2a <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	212c      	movs	r1, #44	; 0x2c
 8003dac:	fb01 f303 	mul.w	r3, r1, r3
 8003db0:	4413      	add	r3, r2
 8003db2:	333f      	adds	r3, #63	; 0x3f
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d009      	beq.n	8003dce <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	212c      	movs	r1, #44	; 0x2c
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	4413      	add	r3, r2
 8003dc6:	333f      	adds	r3, #63	; 0x3f
 8003dc8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d12d      	bne.n	8003e2a <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	212c      	movs	r1, #44	; 0x2c
 8003dd4:	fb01 f303 	mul.w	r3, r1, r3
 8003dd8:	4413      	add	r3, r2
 8003dda:	335c      	adds	r3, #92	; 0x5c
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d120      	bne.n	8003e2a <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	3361      	adds	r3, #97	; 0x61
 8003df6:	2203      	movs	r2, #3
 8003df8:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	0151      	lsls	r1, r2, #5
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	440a      	add	r2, r1
 8003e10:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e14:	f043 0302 	orr.w	r3, r3, #2
 8003e18:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f005 f914 	bl	8009052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	461a      	mov	r2, r3
 8003e38:	2310      	movs	r3, #16
 8003e3a:	6093      	str	r3, [r2, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	3718      	adds	r7, #24
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d119      	bne.n	8003ea8 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	015a      	lsls	r2, r3, #5
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e80:	461a      	mov	r2, r3
 8003e82:	2304      	movs	r3, #4
 8003e84:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	015a      	lsls	r2, r3, #5
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	0151      	lsls	r1, r2, #5
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	440a      	add	r2, r1
 8003e9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea0:	f043 0302 	orr.w	r3, r3, #2
 8003ea4:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003ea6:	e3c6      	b.n	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	015a      	lsls	r2, r3, #5
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	4413      	add	r3, r2
 8003eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0320 	and.w	r3, r3, #32
 8003eba:	2b20      	cmp	r3, #32
 8003ebc:	d13e      	bne.n	8003f3c <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2320      	movs	r3, #32
 8003ece:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003ed0:	687a      	ldr	r2, [r7, #4]
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	212c      	movs	r1, #44	; 0x2c
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	4413      	add	r3, r2
 8003edc:	333d      	adds	r3, #61	; 0x3d
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	f040 83a8 	bne.w	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	212c      	movs	r1, #44	; 0x2c
 8003eec:	fb01 f303 	mul.w	r3, r1, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	333d      	adds	r3, #61	; 0x3d
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3360      	adds	r3, #96	; 0x60
 8003f06:	2202      	movs	r2, #2
 8003f08:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f005 f88c 	bl	8009052 <USB_HC_Halt>
}
 8003f3a:	e37c      	b.n	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f52:	d122      	bne.n	8003f9a <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	0151      	lsls	r1, r2, #5
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	440a      	add	r2, r1
 8003f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	4611      	mov	r1, r2
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f005 f867 	bl	8009052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f90:	461a      	mov	r2, r3
 8003f92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f96:	6093      	str	r3, [r2, #8]
}
 8003f98:	e34d      	b.n	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 0301 	and.w	r3, r3, #1
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d150      	bne.n	8004052 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	212c      	movs	r1, #44	; 0x2c
 8003fb6:	fb01 f303 	mul.w	r3, r1, r3
 8003fba:	4413      	add	r3, r2
 8003fbc:	335c      	adds	r3, #92	; 0x5c
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d111      	bne.n	8003ffc <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	333d      	adds	r3, #61	; 0x3d
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	015a      	lsls	r2, r3, #5
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	2340      	movs	r3, #64	; 0x40
 8003ffa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	4413      	add	r3, r2
 8004004:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	440a      	add	r2, r1
 8004012:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004016:	f043 0302 	orr.w	r3, r3, #2
 800401a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	4611      	mov	r1, r2
 8004026:	4618      	mov	r0, r3
 8004028:	f005 f813 	bl	8009052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	461a      	mov	r2, r3
 800403a:	2301      	movs	r3, #1
 800403c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	212c      	movs	r1, #44	; 0x2c
 8004044:	fb01 f303 	mul.w	r3, r1, r3
 8004048:	4413      	add	r3, r2
 800404a:	3361      	adds	r3, #97	; 0x61
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
}
 8004050:	e2f1      	b.n	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	4413      	add	r3, r2
 800405a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004064:	2b40      	cmp	r3, #64	; 0x40
 8004066:	d13c      	bne.n	80040e2 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	212c      	movs	r1, #44	; 0x2c
 800406e:	fb01 f303 	mul.w	r3, r1, r3
 8004072:	4413      	add	r3, r2
 8004074:	3361      	adds	r3, #97	; 0x61
 8004076:	2204      	movs	r2, #4
 8004078:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	212c      	movs	r1, #44	; 0x2c
 8004080:	fb01 f303 	mul.w	r3, r1, r3
 8004084:	4413      	add	r3, r2
 8004086:	333d      	adds	r3, #61	; 0x3d
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	212c      	movs	r1, #44	; 0x2c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	335c      	adds	r3, #92	; 0x5c
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b8:	f043 0302 	orr.w	r3, r3, #2
 80040bc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	b2d2      	uxtb	r2, r2
 80040c6:	4611      	mov	r1, r2
 80040c8:	4618      	mov	r0, r3
 80040ca:	f004 ffc2 	bl	8009052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040da:	461a      	mov	r2, r3
 80040dc:	2340      	movs	r3, #64	; 0x40
 80040de:	6093      	str	r3, [r2, #8]
}
 80040e0:	e2a9      	b.n	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b08      	cmp	r3, #8
 80040f6:	d12a      	bne.n	800414e <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	015a      	lsls	r2, r3, #5
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004104:	461a      	mov	r2, r3
 8004106:	2308      	movs	r3, #8
 8004108:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	69bb      	ldr	r3, [r7, #24]
 8004110:	4413      	add	r3, r2
 8004112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	697a      	ldr	r2, [r7, #20]
 800411a:	0151      	lsls	r1, r2, #5
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	440a      	add	r2, r1
 8004120:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004124:	f043 0302 	orr.w	r3, r3, #2
 8004128:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	4611      	mov	r1, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f004 ff8c 	bl	8009052 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	212c      	movs	r1, #44	; 0x2c
 8004140:	fb01 f303 	mul.w	r3, r1, r3
 8004144:	4413      	add	r3, r2
 8004146:	3361      	adds	r3, #97	; 0x61
 8004148:	2205      	movs	r2, #5
 800414a:	701a      	strb	r2, [r3, #0]
}
 800414c:	e273      	b.n	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	015a      	lsls	r2, r3, #5
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	4413      	add	r3, r2
 8004156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 0310 	and.w	r3, r3, #16
 8004160:	2b10      	cmp	r3, #16
 8004162:	d150      	bne.n	8004206 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	212c      	movs	r1, #44	; 0x2c
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	335c      	adds	r3, #92	; 0x5c
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	3361      	adds	r3, #97	; 0x61
 8004184:	2203      	movs	r2, #3
 8004186:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	212c      	movs	r1, #44	; 0x2c
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	333d      	adds	r3, #61	; 0x3d
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d112      	bne.n	80041c2 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	333c      	adds	r3, #60	; 0x3c
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d108      	bne.n	80041c2 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	212c      	movs	r1, #44	; 0x2c
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	333d      	adds	r3, #61	; 0x3d
 80041be:	2201      	movs	r2, #1
 80041c0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	0151      	lsls	r1, r2, #5
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	440a      	add	r2, r1
 80041d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	b2d2      	uxtb	r2, r2
 80041ea:	4611      	mov	r1, r2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f004 ff30 	bl	8009052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	015a      	lsls	r2, r3, #5
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	4413      	add	r3, r2
 80041fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041fe:	461a      	mov	r2, r3
 8004200:	2310      	movs	r3, #16
 8004202:	6093      	str	r3, [r2, #8]
}
 8004204:	e217      	b.n	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	015a      	lsls	r2, r3, #5
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	4413      	add	r3, r2
 800420e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	2b80      	cmp	r3, #128	; 0x80
 800421a:	d174      	bne.n	8004306 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	691b      	ldr	r3, [r3, #16]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d121      	bne.n	8004268 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	212c      	movs	r1, #44	; 0x2c
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	4413      	add	r3, r2
 8004230:	3361      	adds	r3, #97	; 0x61
 8004232:	2206      	movs	r2, #6
 8004234:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	69bb      	ldr	r3, [r7, #24]
 800423c:	4413      	add	r3, r2
 800423e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	697a      	ldr	r2, [r7, #20]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	440a      	add	r2, r1
 800424c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004250:	f043 0302 	orr.w	r3, r3, #2
 8004254:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f004 fef6 	bl	8009052 <USB_HC_Halt>
 8004266:	e044      	b.n	80042f2 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	212c      	movs	r1, #44	; 0x2c
 800426e:	fb01 f303 	mul.w	r3, r1, r3
 8004272:	4413      	add	r3, r2
 8004274:	335c      	adds	r3, #92	; 0x5c
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	202c      	movs	r0, #44	; 0x2c
 8004280:	fb00 f303 	mul.w	r3, r0, r3
 8004284:	440b      	add	r3, r1
 8004286:	335c      	adds	r3, #92	; 0x5c
 8004288:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	212c      	movs	r1, #44	; 0x2c
 8004290:	fb01 f303 	mul.w	r3, r1, r3
 8004294:	4413      	add	r3, r2
 8004296:	335c      	adds	r3, #92	; 0x5c
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d920      	bls.n	80042e0 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	212c      	movs	r1, #44	; 0x2c
 80042a4:	fb01 f303 	mul.w	r3, r1, r3
 80042a8:	4413      	add	r3, r2
 80042aa:	335c      	adds	r3, #92	; 0x5c
 80042ac:	2200      	movs	r2, #0
 80042ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	212c      	movs	r1, #44	; 0x2c
 80042b6:	fb01 f303 	mul.w	r3, r1, r3
 80042ba:	4413      	add	r3, r2
 80042bc:	3360      	adds	r3, #96	; 0x60
 80042be:	2204      	movs	r2, #4
 80042c0:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	b2d9      	uxtb	r1, r3
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	202c      	movs	r0, #44	; 0x2c
 80042cc:	fb00 f303 	mul.w	r3, r0, r3
 80042d0:	4413      	add	r3, r2
 80042d2:	3360      	adds	r3, #96	; 0x60
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f007 f877 	bl	800b3cc <HAL_HCD_HC_NotifyURBChange_Callback>
 80042de:	e008      	b.n	80042f2 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	212c      	movs	r1, #44	; 0x2c
 80042e6:	fb01 f303 	mul.w	r3, r1, r3
 80042ea:	4413      	add	r3, r2
 80042ec:	3360      	adds	r3, #96	; 0x60
 80042ee:	2202      	movs	r2, #2
 80042f0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	461a      	mov	r2, r3
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	6093      	str	r3, [r2, #8]
}
 8004304:	e197      	b.n	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	015a      	lsls	r2, r3, #5
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	4413      	add	r3, r2
 800430e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800431c:	d134      	bne.n	8004388 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	440a      	add	r2, r1
 8004334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004338:	f043 0302 	orr.w	r3, r3, #2
 800433c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	697a      	ldr	r2, [r7, #20]
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	4611      	mov	r1, r2
 8004348:	4618      	mov	r0, r3
 800434a:	f004 fe82 	bl	8009052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	015a      	lsls	r2, r3, #5
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	4413      	add	r3, r2
 8004356:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435a:	461a      	mov	r2, r3
 800435c:	2310      	movs	r3, #16
 800435e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	015a      	lsls	r2, r3, #5
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	4413      	add	r3, r2
 8004368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800436c:	461a      	mov	r2, r3
 800436e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004372:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	212c      	movs	r1, #44	; 0x2c
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	4413      	add	r3, r2
 8004380:	3361      	adds	r3, #97	; 0x61
 8004382:	2208      	movs	r2, #8
 8004384:	701a      	strb	r2, [r3, #0]
}
 8004386:	e156      	b.n	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b02      	cmp	r3, #2
 800439c:	f040 814b 	bne.w	8004636 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80043ba:	f023 0302 	bic.w	r3, r3, #2
 80043be:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	3361      	adds	r3, #97	; 0x61
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d179      	bne.n	80044c8 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	212c      	movs	r1, #44	; 0x2c
 80043da:	fb01 f303 	mul.w	r3, r1, r3
 80043de:	4413      	add	r3, r2
 80043e0:	3360      	adds	r3, #96	; 0x60
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	212c      	movs	r1, #44	; 0x2c
 80043ec:	fb01 f303 	mul.w	r3, r1, r3
 80043f0:	4413      	add	r3, r2
 80043f2:	333f      	adds	r3, #63	; 0x3f
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d00a      	beq.n	8004410 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	212c      	movs	r1, #44	; 0x2c
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	4413      	add	r3, r2
 8004406:	333f      	adds	r3, #63	; 0x3f
 8004408:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800440a:	2b03      	cmp	r3, #3
 800440c:	f040 80fc 	bne.w	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d142      	bne.n	800449e <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	212c      	movs	r1, #44	; 0x2c
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	334c      	adds	r3, #76	; 0x4c
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80ed 	beq.w	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	212c      	movs	r1, #44	; 0x2c
 8004434:	fb01 f303 	mul.w	r3, r1, r3
 8004438:	4413      	add	r3, r2
 800443a:	334c      	adds	r3, #76	; 0x4c
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	202c      	movs	r0, #44	; 0x2c
 8004444:	fb00 f202 	mul.w	r2, r0, r2
 8004448:	440a      	add	r2, r1
 800444a:	3240      	adds	r2, #64	; 0x40
 800444c:	8812      	ldrh	r2, [r2, #0]
 800444e:	4413      	add	r3, r2
 8004450:	3b01      	subs	r3, #1
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	202c      	movs	r0, #44	; 0x2c
 8004458:	fb00 f202 	mul.w	r2, r0, r2
 800445c:	440a      	add	r2, r1
 800445e:	3240      	adds	r2, #64	; 0x40
 8004460:	8812      	ldrh	r2, [r2, #0]
 8004462:	fbb3 f3f2 	udiv	r3, r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b00      	cmp	r3, #0
 8004470:	f000 80ca 	beq.w	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	212c      	movs	r1, #44	; 0x2c
 800447a:	fb01 f303 	mul.w	r3, r1, r3
 800447e:	4413      	add	r3, r2
 8004480:	3355      	adds	r3, #85	; 0x55
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	f083 0301 	eor.w	r3, r3, #1
 8004488:	b2d8      	uxtb	r0, r3
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	212c      	movs	r1, #44	; 0x2c
 8004490:	fb01 f303 	mul.w	r3, r1, r3
 8004494:	4413      	add	r3, r2
 8004496:	3355      	adds	r3, #85	; 0x55
 8004498:	4602      	mov	r2, r0
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e0b4      	b.n	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	212c      	movs	r1, #44	; 0x2c
 80044a4:	fb01 f303 	mul.w	r3, r1, r3
 80044a8:	4413      	add	r3, r2
 80044aa:	3355      	adds	r3, #85	; 0x55
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	f083 0301 	eor.w	r3, r3, #1
 80044b2:	b2d8      	uxtb	r0, r3
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	3355      	adds	r3, #85	; 0x55
 80044c2:	4602      	mov	r2, r0
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e09f      	b.n	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	212c      	movs	r1, #44	; 0x2c
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	4413      	add	r3, r2
 80044d4:	3361      	adds	r3, #97	; 0x61
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d109      	bne.n	80044f0 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	212c      	movs	r1, #44	; 0x2c
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	3360      	adds	r3, #96	; 0x60
 80044ea:	2202      	movs	r2, #2
 80044ec:	701a      	strb	r2, [r3, #0]
 80044ee:	e08b      	b.n	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	212c      	movs	r1, #44	; 0x2c
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	3361      	adds	r3, #97	; 0x61
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	2b04      	cmp	r3, #4
 8004502:	d109      	bne.n	8004518 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	3360      	adds	r3, #96	; 0x60
 8004512:	2202      	movs	r2, #2
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e077      	b.n	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	212c      	movs	r1, #44	; 0x2c
 800451e:	fb01 f303 	mul.w	r3, r1, r3
 8004522:	4413      	add	r3, r2
 8004524:	3361      	adds	r3, #97	; 0x61
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	2b05      	cmp	r3, #5
 800452a:	d109      	bne.n	8004540 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	212c      	movs	r1, #44	; 0x2c
 8004532:	fb01 f303 	mul.w	r3, r1, r3
 8004536:	4413      	add	r3, r2
 8004538:	3360      	adds	r3, #96	; 0x60
 800453a:	2205      	movs	r2, #5
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e063      	b.n	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	212c      	movs	r1, #44	; 0x2c
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	3361      	adds	r3, #97	; 0x61
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	2b06      	cmp	r3, #6
 8004552:	d009      	beq.n	8004568 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	212c      	movs	r1, #44	; 0x2c
 800455a:	fb01 f303 	mul.w	r3, r1, r3
 800455e:	4413      	add	r3, r2
 8004560:	3361      	adds	r3, #97	; 0x61
 8004562:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004564:	2b08      	cmp	r3, #8
 8004566:	d14f      	bne.n	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	212c      	movs	r1, #44	; 0x2c
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	4413      	add	r3, r2
 8004574:	335c      	adds	r3, #92	; 0x5c
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	1c5a      	adds	r2, r3, #1
 800457a:	6879      	ldr	r1, [r7, #4]
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	202c      	movs	r0, #44	; 0x2c
 8004580:	fb00 f303 	mul.w	r3, r0, r3
 8004584:	440b      	add	r3, r1
 8004586:	335c      	adds	r3, #92	; 0x5c
 8004588:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	212c      	movs	r1, #44	; 0x2c
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	4413      	add	r3, r2
 8004596:	335c      	adds	r3, #92	; 0x5c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d912      	bls.n	80045c4 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	212c      	movs	r1, #44	; 0x2c
 80045a4:	fb01 f303 	mul.w	r3, r1, r3
 80045a8:	4413      	add	r3, r2
 80045aa:	335c      	adds	r3, #92	; 0x5c
 80045ac:	2200      	movs	r2, #0
 80045ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	212c      	movs	r1, #44	; 0x2c
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	3360      	adds	r3, #96	; 0x60
 80045be:	2204      	movs	r2, #4
 80045c0:	701a      	strb	r2, [r3, #0]
 80045c2:	e021      	b.n	8004608 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3360      	adds	r3, #96	; 0x60
 80045d2:	2202      	movs	r2, #2
 80045d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045f4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004602:	461a      	mov	r2, r3
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	4413      	add	r3, r2
 8004610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004614:	461a      	mov	r2, r3
 8004616:	2302      	movs	r3, #2
 8004618:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	b2d9      	uxtb	r1, r3
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	202c      	movs	r0, #44	; 0x2c
 8004624:	fb00 f303 	mul.w	r3, r0, r3
 8004628:	4413      	add	r3, r2
 800462a:	3360      	adds	r3, #96	; 0x60
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f006 fecb 	bl	800b3cc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004636:	bf00      	nop
 8004638:	3720      	adds	r7, #32
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b08a      	sub	sp, #40	; 0x28
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004658:	69fb      	ldr	r3, [r7, #28]
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	0c5b      	lsrs	r3, r3, #17
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004672:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	2b02      	cmp	r3, #2
 8004678:	d004      	beq.n	8004684 <HCD_RXQLVL_IRQHandler+0x46>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b05      	cmp	r3, #5
 800467e:	f000 80a9 	beq.w	80047d4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004682:	e0aa      	b.n	80047da <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80a6 	beq.w	80047d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	212c      	movs	r1, #44	; 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	3344      	adds	r3, #68	; 0x44
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 809b 	beq.w	80047d8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	3350      	adds	r3, #80	; 0x50
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	441a      	add	r2, r3
 80046b6:	6879      	ldr	r1, [r7, #4]
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	202c      	movs	r0, #44	; 0x2c
 80046bc:	fb00 f303 	mul.w	r3, r0, r3
 80046c0:	440b      	add	r3, r1
 80046c2:	334c      	adds	r3, #76	; 0x4c
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d87a      	bhi.n	80047c0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	212c      	movs	r1, #44	; 0x2c
 80046d4:	fb01 f303 	mul.w	r3, r1, r3
 80046d8:	4413      	add	r3, r2
 80046da:	3344      	adds	r3, #68	; 0x44
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	b292      	uxth	r2, r2
 80046e2:	4619      	mov	r1, r3
 80046e4:	f004 f853 	bl	800878e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	3344      	adds	r3, #68	; 0x44
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	441a      	add	r2, r3
 80046fc:	6879      	ldr	r1, [r7, #4]
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	202c      	movs	r0, #44	; 0x2c
 8004702:	fb00 f303 	mul.w	r3, r0, r3
 8004706:	440b      	add	r3, r1
 8004708:	3344      	adds	r3, #68	; 0x44
 800470a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	212c      	movs	r1, #44	; 0x2c
 8004712:	fb01 f303 	mul.w	r3, r1, r3
 8004716:	4413      	add	r3, r2
 8004718:	3350      	adds	r3, #80	; 0x50
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	441a      	add	r2, r3
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	202c      	movs	r0, #44	; 0x2c
 8004726:	fb00 f303 	mul.w	r3, r0, r3
 800472a:	440b      	add	r3, r1
 800472c:	3350      	adds	r3, #80	; 0x50
 800472e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	6a3b      	ldr	r3, [r7, #32]
 8004736:	4413      	add	r3, r2
 8004738:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	0cdb      	lsrs	r3, r3, #19
 8004740:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004744:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	212c      	movs	r1, #44	; 0x2c
 800474c:	fb01 f303 	mul.w	r3, r1, r3
 8004750:	4413      	add	r3, r2
 8004752:	3340      	adds	r3, #64	; 0x40
 8004754:	881b      	ldrh	r3, [r3, #0]
 8004756:	461a      	mov	r2, r3
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	4293      	cmp	r3, r2
 800475c:	d13c      	bne.n	80047d8 <HCD_RXQLVL_IRQHandler+0x19a>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d039      	beq.n	80047d8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	4413      	add	r3, r2
 800476c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800477a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004782:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004790:	461a      	mov	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	212c      	movs	r1, #44	; 0x2c
 800479c:	fb01 f303 	mul.w	r3, r1, r3
 80047a0:	4413      	add	r3, r2
 80047a2:	3354      	adds	r3, #84	; 0x54
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	f083 0301 	eor.w	r3, r3, #1
 80047aa:	b2d8      	uxtb	r0, r3
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	212c      	movs	r1, #44	; 0x2c
 80047b2:	fb01 f303 	mul.w	r3, r1, r3
 80047b6:	4413      	add	r3, r2
 80047b8:	3354      	adds	r3, #84	; 0x54
 80047ba:	4602      	mov	r2, r0
 80047bc:	701a      	strb	r2, [r3, #0]
      break;
 80047be:	e00b      	b.n	80047d8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	212c      	movs	r1, #44	; 0x2c
 80047c6:	fb01 f303 	mul.w	r3, r1, r3
 80047ca:	4413      	add	r3, r2
 80047cc:	3360      	adds	r3, #96	; 0x60
 80047ce:	2204      	movs	r2, #4
 80047d0:	701a      	strb	r2, [r3, #0]
      break;
 80047d2:	e001      	b.n	80047d8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80047d4:	bf00      	nop
 80047d6:	e000      	b.n	80047da <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80047d8:	bf00      	nop
  }
}
 80047da:	bf00      	nop
 80047dc:	3728      	adds	r7, #40	; 0x28
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}

080047e2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80047e2:	b580      	push	{r7, lr}
 80047e4:	b086      	sub	sp, #24
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800480e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b02      	cmp	r3, #2
 8004818:	d10b      	bne.n	8004832 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d102      	bne.n	800482a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f006 fdb5 	bl	800b394 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f043 0302 	orr.w	r3, r3, #2
 8004830:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d132      	bne.n	80048a2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	f043 0308 	orr.w	r3, r3, #8
 8004842:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b04      	cmp	r3, #4
 800484c:	d126      	bne.n	800489c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d113      	bne.n	800487e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800485c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004860:	d106      	bne.n	8004870 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2102      	movs	r1, #2
 8004868:	4618      	mov	r0, r3
 800486a:	f004 f8cb 	bl	8008a04 <USB_InitFSLSPClkSel>
 800486e:	e011      	b.n	8004894 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2101      	movs	r1, #1
 8004876:	4618      	mov	r0, r3
 8004878:	f004 f8c4 	bl	8008a04 <USB_InitFSLSPClkSel>
 800487c:	e00a      	b.n	8004894 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d106      	bne.n	8004894 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800488c:	461a      	mov	r2, r3
 800488e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004892:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f006 fda7 	bl	800b3e8 <HAL_HCD_PortEnabled_Callback>
 800489a:	e002      	b.n	80048a2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f006 fdb1 	bl	800b404 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 0320 	and.w	r3, r3, #32
 80048a8:	2b20      	cmp	r3, #32
 80048aa:	d103      	bne.n	80048b4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	f043 0320 	orr.w	r3, r3, #32
 80048b2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048ba:	461a      	mov	r2, r3
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	6013      	str	r3, [r2, #0]
}
 80048c0:	bf00      	nop
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b084      	sub	sp, #16
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e12b      	b.n	8004b32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d106      	bne.n	80048f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fd f9a4 	bl	8001c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2224      	movs	r2, #36	; 0x24
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0201 	bic.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800491a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800492a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800492c:	f002 f868 	bl	8006a00 <HAL_RCC_GetPCLK1Freq>
 8004930:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4a81      	ldr	r2, [pc, #516]	; (8004b3c <HAL_I2C_Init+0x274>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d807      	bhi.n	800494c <HAL_I2C_Init+0x84>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4a80      	ldr	r2, [pc, #512]	; (8004b40 <HAL_I2C_Init+0x278>)
 8004940:	4293      	cmp	r3, r2
 8004942:	bf94      	ite	ls
 8004944:	2301      	movls	r3, #1
 8004946:	2300      	movhi	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e006      	b.n	800495a <HAL_I2C_Init+0x92>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4a7d      	ldr	r2, [pc, #500]	; (8004b44 <HAL_I2C_Init+0x27c>)
 8004950:	4293      	cmp	r3, r2
 8004952:	bf94      	ite	ls
 8004954:	2301      	movls	r3, #1
 8004956:	2300      	movhi	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0e7      	b.n	8004b32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4a78      	ldr	r2, [pc, #480]	; (8004b48 <HAL_I2C_Init+0x280>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	0c9b      	lsrs	r3, r3, #18
 800496c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	4a6a      	ldr	r2, [pc, #424]	; (8004b3c <HAL_I2C_Init+0x274>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d802      	bhi.n	800499c <HAL_I2C_Init+0xd4>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	3301      	adds	r3, #1
 800499a:	e009      	b.n	80049b0 <HAL_I2C_Init+0xe8>
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049a2:	fb02 f303 	mul.w	r3, r2, r3
 80049a6:	4a69      	ldr	r2, [pc, #420]	; (8004b4c <HAL_I2C_Init+0x284>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	099b      	lsrs	r3, r3, #6
 80049ae:	3301      	adds	r3, #1
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	430b      	orrs	r3, r1
 80049b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	495c      	ldr	r1, [pc, #368]	; (8004b3c <HAL_I2C_Init+0x274>)
 80049cc:	428b      	cmp	r3, r1
 80049ce:	d819      	bhi.n	8004a04 <HAL_I2C_Init+0x13c>
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	1e59      	subs	r1, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	005b      	lsls	r3, r3, #1
 80049da:	fbb1 f3f3 	udiv	r3, r1, r3
 80049de:	1c59      	adds	r1, r3, #1
 80049e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80049e4:	400b      	ands	r3, r1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <HAL_I2C_Init+0x138>
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	1e59      	subs	r1, r3, #1
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80049f8:	3301      	adds	r3, #1
 80049fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049fe:	e051      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a00:	2304      	movs	r3, #4
 8004a02:	e04f      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d111      	bne.n	8004a30 <HAL_I2C_Init+0x168>
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	1e58      	subs	r0, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6859      	ldr	r1, [r3, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	440b      	add	r3, r1
 8004a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a1e:	3301      	adds	r3, #1
 8004a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	bf0c      	ite	eq
 8004a28:	2301      	moveq	r3, #1
 8004a2a:	2300      	movne	r3, #0
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	e012      	b.n	8004a56 <HAL_I2C_Init+0x18e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1e58      	subs	r0, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	0099      	lsls	r1, r3, #2
 8004a40:	440b      	add	r3, r1
 8004a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a46:	3301      	adds	r3, #1
 8004a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <HAL_I2C_Init+0x196>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e022      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10e      	bne.n	8004a84 <HAL_I2C_Init+0x1bc>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	1e58      	subs	r0, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6859      	ldr	r1, [r3, #4]
 8004a6e:	460b      	mov	r3, r1
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	440b      	add	r3, r1
 8004a74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a78:	3301      	adds	r3, #1
 8004a7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a82:	e00f      	b.n	8004aa4 <HAL_I2C_Init+0x1dc>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	1e58      	subs	r0, r3, #1
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6859      	ldr	r1, [r3, #4]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	0099      	lsls	r1, r3, #2
 8004a94:	440b      	add	r3, r1
 8004a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	6809      	ldr	r1, [r1, #0]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	69da      	ldr	r2, [r3, #28]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	430a      	orrs	r2, r1
 8004ac6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004ad2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	6911      	ldr	r1, [r2, #16]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68d2      	ldr	r2, [r2, #12]
 8004ade:	4311      	orrs	r1, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	000186a0 	.word	0x000186a0
 8004b40:	001e847f 	.word	0x001e847f
 8004b44:	003d08ff 	.word	0x003d08ff
 8004b48:	431bde83 	.word	0x431bde83
 8004b4c:	10624dd3 	.word	0x10624dd3

08004b50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b088      	sub	sp, #32
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	607a      	str	r2, [r7, #4]
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	817b      	strh	r3, [r7, #10]
 8004b60:	4613      	mov	r3, r2
 8004b62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b64:	f7fd fe22 	bl	80027ac <HAL_GetTick>
 8004b68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	f040 80e0 	bne.w	8004d38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	2319      	movs	r3, #25
 8004b7e:	2201      	movs	r2, #1
 8004b80:	4970      	ldr	r1, [pc, #448]	; (8004d44 <HAL_I2C_Master_Transmit+0x1f4>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 fc72 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e0d3      	b.n	8004d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_I2C_Master_Transmit+0x50>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e0cc      	b.n	8004d3a <HAL_I2C_Master_Transmit+0x1ea>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d007      	beq.n	8004bc6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bd4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2221      	movs	r2, #33	; 0x21
 8004bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2210      	movs	r2, #16
 8004be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	893a      	ldrh	r2, [r7, #8]
 8004bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfc:	b29a      	uxth	r2, r3
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a50      	ldr	r2, [pc, #320]	; (8004d48 <HAL_I2C_Master_Transmit+0x1f8>)
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004c08:	8979      	ldrh	r1, [r7, #10]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	6a3a      	ldr	r2, [r7, #32]
 8004c0e:	68f8      	ldr	r0, [r7, #12]
 8004c10:	f000 fac2 	bl	8005198 <I2C_MasterRequestWrite>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e08d      	b.n	8004d3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1e:	2300      	movs	r3, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	613b      	str	r3, [r7, #16]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	613b      	str	r3, [r7, #16]
 8004c32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004c34:	e066      	b.n	8004d04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	6a39      	ldr	r1, [r7, #32]
 8004c3a:	68f8      	ldr	r0, [r7, #12]
 8004c3c:	f000 fcec 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c40:	4603      	mov	r3, r0
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4a:	2b04      	cmp	r3, #4
 8004c4c:	d107      	bne.n	8004c5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06b      	b.n	8004d3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c66:	781a      	ldrb	r2, [r3, #0]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c8a:	3b01      	subs	r3, #1
 8004c8c:	b29a      	uxth	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0304 	and.w	r3, r3, #4
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d11b      	bne.n	8004cd8 <HAL_I2C_Master_Transmit+0x188>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d017      	beq.n	8004cd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	b29a      	uxth	r2, r3
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	6a39      	ldr	r1, [r7, #32]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 fcdc 	bl	800569a <I2C_WaitOnBTFFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00d      	beq.n	8004d04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	2b04      	cmp	r3, #4
 8004cee:	d107      	bne.n	8004d00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e01a      	b.n	8004d3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d194      	bne.n	8004c36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e000      	b.n	8004d3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004d38:	2302      	movs	r3, #2
  }
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	00100002 	.word	0x00100002
 8004d48:	ffff0000 	.word	0xffff0000

08004d4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	; 0x30
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	4608      	mov	r0, r1
 8004d56:	4611      	mov	r1, r2
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	817b      	strh	r3, [r7, #10]
 8004d5e:	460b      	mov	r3, r1
 8004d60:	813b      	strh	r3, [r7, #8]
 8004d62:	4613      	mov	r3, r2
 8004d64:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d66:	f7fd fd21 	bl	80027ac <HAL_GetTick>
 8004d6a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b20      	cmp	r3, #32
 8004d76:	f040 8208 	bne.w	800518a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	2319      	movs	r3, #25
 8004d80:	2201      	movs	r2, #1
 8004d82:	497b      	ldr	r1, [pc, #492]	; (8004f70 <HAL_I2C_Mem_Read+0x224>)
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 fb71 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d001      	beq.n	8004d94 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d90:	2302      	movs	r3, #2
 8004d92:	e1fb      	b.n	800518c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d101      	bne.n	8004da2 <HAL_I2C_Mem_Read+0x56>
 8004d9e:	2302      	movs	r3, #2
 8004da0:	e1f4      	b.n	800518c <HAL_I2C_Mem_Read+0x440>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0301 	and.w	r3, r3, #1
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d007      	beq.n	8004dc8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f042 0201 	orr.w	r2, r2, #1
 8004dc6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004dd6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2222      	movs	r2, #34	; 0x22
 8004ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2240      	movs	r2, #64	; 0x40
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004df8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	4a5b      	ldr	r2, [pc, #364]	; (8004f74 <HAL_I2C_Mem_Read+0x228>)
 8004e08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004e0a:	88f8      	ldrh	r0, [r7, #6]
 8004e0c:	893a      	ldrh	r2, [r7, #8]
 8004e0e:	8979      	ldrh	r1, [r7, #10]
 8004e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e12:	9301      	str	r3, [sp, #4]
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	9300      	str	r3, [sp, #0]
 8004e18:	4603      	mov	r3, r0
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 fa3e 	bl	800529c <I2C_RequestMemoryRead>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e1b0      	b.n	800518c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d113      	bne.n	8004e5a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e32:	2300      	movs	r3, #0
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	623b      	str	r3, [r7, #32]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	623b      	str	r3, [r7, #32]
 8004e46:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	e184      	b.n	8005164 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d11b      	bne.n	8004e9a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	695b      	ldr	r3, [r3, #20]
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	61fb      	str	r3, [r7, #28]
 8004e86:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e164      	b.n	8005164 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d11b      	bne.n	8004eda <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eb0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ec0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	61bb      	str	r3, [r7, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	699b      	ldr	r3, [r3, #24]
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	e144      	b.n	8005164 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	695b      	ldr	r3, [r3, #20]
 8004ee4:	617b      	str	r3, [r7, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	617b      	str	r3, [r7, #20]
 8004eee:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004ef0:	e138      	b.n	8005164 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	f200 80f1 	bhi.w	80050de <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d123      	bne.n	8004f4c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f06:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 fc07 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e139      	b.n	800518c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691a      	ldr	r2, [r3, #16]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f34:	3b01      	subs	r3, #1
 8004f36:	b29a      	uxth	r2, r3
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f40:	b29b      	uxth	r3, r3
 8004f42:	3b01      	subs	r3, #1
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004f4a:	e10b      	b.n	8005164 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d14e      	bne.n	8004ff2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4906      	ldr	r1, [pc, #24]	; (8004f78 <HAL_I2C_Mem_Read+0x22c>)
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fa84 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8004f64:	4603      	mov	r3, r0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e10e      	b.n	800518c <HAL_I2C_Mem_Read+0x440>
 8004f6e:	bf00      	nop
 8004f70:	00100002 	.word	0x00100002
 8004f74:	ffff0000 	.word	0xffff0000
 8004f78:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9e:	1c5a      	adds	r2, r3, #1
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fb4:	b29b      	uxth	r3, r3
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	b29a      	uxth	r2, r3
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe6:	b29b      	uxth	r3, r3
 8004fe8:	3b01      	subs	r3, #1
 8004fea:	b29a      	uxth	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ff0:	e0b8      	b.n	8005164 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	9300      	str	r3, [sp, #0]
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	4966      	ldr	r1, [pc, #408]	; (8005194 <HAL_I2C_Mem_Read+0x448>)
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 fa35 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0bf      	b.n	800518c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800501a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691a      	ldr	r2, [r3, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	b2d2      	uxtb	r2, r2
 8005028:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502e:	1c5a      	adds	r2, r3, #1
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005038:	3b01      	subs	r3, #1
 800503a:	b29a      	uxth	r2, r3
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005044:	b29b      	uxth	r3, r3
 8005046:	3b01      	subs	r3, #1
 8005048:	b29a      	uxth	r2, r3
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	9300      	str	r3, [sp, #0]
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	2200      	movs	r2, #0
 8005056:	494f      	ldr	r1, [pc, #316]	; (8005194 <HAL_I2C_Mem_Read+0x448>)
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 fa07 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d001      	beq.n	8005068 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e091      	b.n	800518c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005076:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691a      	ldr	r2, [r3, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	b2d2      	uxtb	r2, r2
 8005084:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005094:	3b01      	subs	r3, #1
 8005096:	b29a      	uxth	r2, r3
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	3b01      	subs	r3, #1
 80050a4:	b29a      	uxth	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050c6:	3b01      	subs	r3, #1
 80050c8:	b29a      	uxth	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80050dc:	e042      	b.n	8005164 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80050de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fb1a 	bl	800571c <I2C_WaitOnRXNEFlagUntilTimeout>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e04c      	b.n	800518c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	691a      	ldr	r2, [r3, #16]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	b2d2      	uxtb	r2, r2
 80050fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	3b01      	subs	r3, #1
 8005110:	b29a      	uxth	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b04      	cmp	r3, #4
 8005130:	d118      	bne.n	8005164 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005144:	1c5a      	adds	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005168:	2b00      	cmp	r3, #0
 800516a:	f47f aec2 	bne.w	8004ef2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005186:	2300      	movs	r3, #0
 8005188:	e000      	b.n	800518c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800518a:	2302      	movs	r3, #2
  }
}
 800518c:	4618      	mov	r0, r3
 800518e:	3728      	adds	r7, #40	; 0x28
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	00010004 	.word	0x00010004

08005198 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	607a      	str	r2, [r7, #4]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	460b      	mov	r3, r1
 80051a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d006      	beq.n	80051c2 <I2C_MasterRequestWrite+0x2a>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d003      	beq.n	80051c2 <I2C_MasterRequestWrite+0x2a>
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80051c0:	d108      	bne.n	80051d4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	e00b      	b.n	80051ec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d8:	2b12      	cmp	r3, #18
 80051da:	d107      	bne.n	80051ec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051ea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f000 f937 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00d      	beq.n	8005220 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800520e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005212:	d103      	bne.n	800521c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f44f 7200 	mov.w	r2, #512	; 0x200
 800521a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e035      	b.n	800528c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005228:	d108      	bne.n	800523c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800522a:	897b      	ldrh	r3, [r7, #10]
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005238:	611a      	str	r2, [r3, #16]
 800523a:	e01b      	b.n	8005274 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800523c:	897b      	ldrh	r3, [r7, #10]
 800523e:	11db      	asrs	r3, r3, #7
 8005240:	b2db      	uxtb	r3, r3
 8005242:	f003 0306 	and.w	r3, r3, #6
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f063 030f 	orn	r3, r3, #15
 800524c:	b2da      	uxtb	r2, r3
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	490e      	ldr	r1, [pc, #56]	; (8005294 <I2C_MasterRequestWrite+0xfc>)
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	f000 f95d 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005260:	4603      	mov	r3, r0
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e010      	b.n	800528c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800526a:	897b      	ldrh	r3, [r7, #10]
 800526c:	b2da      	uxtb	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	4907      	ldr	r1, [pc, #28]	; (8005298 <I2C_MasterRequestWrite+0x100>)
 800527a:	68f8      	ldr	r0, [r7, #12]
 800527c:	f000 f94d 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d001      	beq.n	800528a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	00010008 	.word	0x00010008
 8005298:	00010002 	.word	0x00010002

0800529c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b088      	sub	sp, #32
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	4608      	mov	r0, r1
 80052a6:	4611      	mov	r1, r2
 80052a8:	461a      	mov	r2, r3
 80052aa:	4603      	mov	r3, r0
 80052ac:	817b      	strh	r3, [r7, #10]
 80052ae:	460b      	mov	r3, r1
 80052b0:	813b      	strh	r3, [r7, #8]
 80052b2:	4613      	mov	r3, r2
 80052b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	6a3b      	ldr	r3, [r7, #32]
 80052dc:	2200      	movs	r2, #0
 80052de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f000 f8c2 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d00d      	beq.n	800530a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052fc:	d103      	bne.n	8005306 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005304:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e0aa      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800530a:	897b      	ldrh	r3, [r7, #10]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	461a      	mov	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005318:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	6a3a      	ldr	r2, [r7, #32]
 800531e:	4952      	ldr	r1, [pc, #328]	; (8005468 <I2C_RequestMemoryRead+0x1cc>)
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f8fa 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005326:	4603      	mov	r3, r0
 8005328:	2b00      	cmp	r3, #0
 800532a:	d001      	beq.n	8005330 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e097      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	617b      	str	r3, [r7, #20]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699b      	ldr	r3, [r3, #24]
 8005342:	617b      	str	r3, [r7, #20]
 8005344:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005348:	6a39      	ldr	r1, [r7, #32]
 800534a:	68f8      	ldr	r0, [r7, #12]
 800534c:	f000 f964 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00d      	beq.n	8005372 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535a:	2b04      	cmp	r3, #4
 800535c:	d107      	bne.n	800536e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800536c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e076      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005372:	88fb      	ldrh	r3, [r7, #6]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d105      	bne.n	8005384 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005378:	893b      	ldrh	r3, [r7, #8]
 800537a:	b2da      	uxtb	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]
 8005382:	e021      	b.n	80053c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005384:	893b      	ldrh	r3, [r7, #8]
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	b29b      	uxth	r3, r3
 800538a:	b2da      	uxtb	r2, r3
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005394:	6a39      	ldr	r1, [r7, #32]
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f000 f93e 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d107      	bne.n	80053ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e050      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053be:	893b      	ldrh	r3, [r7, #8]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ca:	6a39      	ldr	r1, [r7, #32]
 80053cc:	68f8      	ldr	r0, [r7, #12]
 80053ce:	f000 f923 	bl	8005618 <I2C_WaitOnTXEFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d00d      	beq.n	80053f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d107      	bne.n	80053f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	e035      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005402:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	6a3b      	ldr	r3, [r7, #32]
 800540a:	2200      	movs	r2, #0
 800540c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 f82b 	bl	800546c <I2C_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00d      	beq.n	8005438 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800542a:	d103      	bne.n	8005434 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005432:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e013      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005438:	897b      	ldrh	r3, [r7, #10]
 800543a:	b2db      	uxtb	r3, r3
 800543c:	f043 0301 	orr.w	r3, r3, #1
 8005440:	b2da      	uxtb	r2, r3
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544a:	6a3a      	ldr	r2, [r7, #32]
 800544c:	4906      	ldr	r1, [pc, #24]	; (8005468 <I2C_RequestMemoryRead+0x1cc>)
 800544e:	68f8      	ldr	r0, [r7, #12]
 8005450:	f000 f863 	bl	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d001      	beq.n	800545e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800545a:	2301      	movs	r3, #1
 800545c:	e000      	b.n	8005460 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	00010002 	.word	0x00010002

0800546c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	4613      	mov	r3, r2
 800547a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800547c:	e025      	b.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005484:	d021      	beq.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005486:	f7fd f991 	bl	80027ac <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	683a      	ldr	r2, [r7, #0]
 8005492:	429a      	cmp	r2, r3
 8005494:	d302      	bcc.n	800549c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d116      	bne.n	80054ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f043 0220 	orr.w	r2, r3, #32
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e023      	b.n	8005512 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d10d      	bne.n	80054f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	43da      	mvns	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	4013      	ands	r3, r2
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf0c      	ite	eq
 80054e6:	2301      	moveq	r3, #1
 80054e8:	2300      	movne	r3, #0
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	e00c      	b.n	800550a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	43da      	mvns	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4013      	ands	r3, r2
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	bf0c      	ite	eq
 8005502:	2301      	moveq	r3, #1
 8005504:	2300      	movne	r3, #0
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461a      	mov	r2, r3
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	429a      	cmp	r2, r3
 800550e:	d0b6      	beq.n	800547e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800551a:	b580      	push	{r7, lr}
 800551c:	b084      	sub	sp, #16
 800551e:	af00      	add	r7, sp, #0
 8005520:	60f8      	str	r0, [r7, #12]
 8005522:	60b9      	str	r1, [r7, #8]
 8005524:	607a      	str	r2, [r7, #4]
 8005526:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005528:	e051      	b.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005538:	d123      	bne.n	8005582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005548:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005552:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2220      	movs	r2, #32
 800555e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	f043 0204 	orr.w	r2, r3, #4
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e046      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005588:	d021      	beq.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558a:	f7fd f90f 	bl	80027ac <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d116      	bne.n	80055ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2220      	movs	r2, #32
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	f043 0220 	orr.w	r2, r3, #32
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e020      	b.n	8005610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	0c1b      	lsrs	r3, r3, #16
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d10c      	bne.n	80055f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	43da      	mvns	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	4013      	ands	r3, r2
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	bf14      	ite	ne
 80055ea:	2301      	movne	r3, #1
 80055ec:	2300      	moveq	r3, #0
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	e00b      	b.n	800560a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	43da      	mvns	r2, r3
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	4013      	ands	r3, r2
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	bf14      	ite	ne
 8005604:	2301      	movne	r3, #1
 8005606:	2300      	moveq	r3, #0
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d18d      	bne.n	800552a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005624:	e02d      	b.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005626:	68f8      	ldr	r0, [r7, #12]
 8005628:	f000 f8ce 	bl	80057c8 <I2C_IsAcknowledgeFailed>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e02d      	b.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800563c:	d021      	beq.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800563e:	f7fd f8b5 	bl	80027ac <HAL_GetTick>
 8005642:	4602      	mov	r2, r0
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	1ad3      	subs	r3, r2, r3
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	429a      	cmp	r2, r3
 800564c:	d302      	bcc.n	8005654 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d116      	bne.n	8005682 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	f043 0220 	orr.w	r2, r3, #32
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e007      	b.n	8005692 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568c:	2b80      	cmp	r3, #128	; 0x80
 800568e:	d1ca      	bne.n	8005626 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056a6:	e02d      	b.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f88d 	bl	80057c8 <I2C_IsAcknowledgeFailed>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e02d      	b.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056be:	d021      	beq.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c0:	f7fd f874 	bl	80027ac <HAL_GetTick>
 80056c4:	4602      	mov	r2, r0
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d302      	bcc.n	80056d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d116      	bne.n	8005704 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2220      	movs	r2, #32
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	f043 0220 	orr.w	r2, r3, #32
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e007      	b.n	8005714 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	f003 0304 	and.w	r3, r3, #4
 800570e:	2b04      	cmp	r3, #4
 8005710:	d1ca      	bne.n	80056a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005728:	e042      	b.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b10      	cmp	r3, #16
 8005736:	d119      	bne.n	800576c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0210 	mvn.w	r2, #16
 8005740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2220      	movs	r2, #32
 800574c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e029      	b.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7fd f81e 	bl	80027ac <HAL_GetTick>
 8005770:	4602      	mov	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d116      	bne.n	80057b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e007      	b.n	80057c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d1b5      	bne.n	800572a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	695b      	ldr	r3, [r3, #20]
 80057d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057de:	d11b      	bne.n	8005818 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005804:	f043 0204 	orr.w	r2, r3, #4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e000      	b.n	800581a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
	...

08005828 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	e128      	b.n	8005a8c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d109      	bne.n	800585a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a90      	ldr	r2, [pc, #576]	; (8005a94 <HAL_I2S_Init+0x26c>)
 8005852:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f7fc fa5b 	bl	8001d10 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2202      	movs	r2, #2
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6812      	ldr	r2, [r2, #0]
 800586c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005870:	f023 030f 	bic.w	r3, r3, #15
 8005874:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2202      	movs	r2, #2
 800587c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d060      	beq.n	8005948 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d102      	bne.n	8005894 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800588e:	2310      	movs	r3, #16
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	e001      	b.n	8005898 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005894:	2320      	movs	r3, #32
 8005896:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b20      	cmp	r3, #32
 800589e:	d802      	bhi.n	80058a6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80058a6:	2001      	movs	r0, #1
 80058a8:	f001 f9a0 	bl	8006bec <HAL_RCCEx_GetPeriphCLKFreq>
 80058ac:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b6:	d125      	bne.n	8005904 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d010      	beq.n	80058e2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	461a      	mov	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058dc:	3305      	adds	r3, #5
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	e01f      	b.n	8005922 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	68fa      	ldr	r2, [r7, #12]
 80058e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80058ec:	4613      	mov	r3, r2
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	461a      	mov	r2, r3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fe:	3305      	adds	r3, #5
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	e00e      	b.n	8005922 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	fbb2 f2f3 	udiv	r2, r2, r3
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	005b      	lsls	r3, r3, #1
 8005914:	461a      	mov	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	fbb2 f3f3 	udiv	r3, r2, r3
 800591e:	3305      	adds	r3, #5
 8005920:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	4a5c      	ldr	r2, [pc, #368]	; (8005a98 <HAL_I2S_Init+0x270>)
 8005926:	fba2 2303 	umull	r2, r3, r2, r3
 800592a:	08db      	lsrs	r3, r3, #3
 800592c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	f003 0301 	and.w	r3, r3, #1
 8005934:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	1ad3      	subs	r3, r2, r3
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	021b      	lsls	r3, r3, #8
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e003      	b.n	8005950 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005948:	2302      	movs	r3, #2
 800594a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800594c:	2300      	movs	r3, #0
 800594e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d902      	bls.n	800595c <HAL_I2S_Init+0x134>
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	2bff      	cmp	r3, #255	; 0xff
 800595a:	d907      	bls.n	800596c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005960:	f043 0210 	orr.w	r2, r3, #16
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e08f      	b.n	8005a8c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	691a      	ldr	r2, [r3, #16]
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	ea42 0103 	orr.w	r1, r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	430a      	orrs	r2, r1
 800597e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800598a:	f023 030f 	bic.w	r3, r3, #15
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6851      	ldr	r1, [r2, #4]
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6892      	ldr	r2, [r2, #8]
 8005996:	4311      	orrs	r1, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	68d2      	ldr	r2, [r2, #12]
 800599c:	4311      	orrs	r1, r2
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6992      	ldr	r2, [r2, #24]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	431a      	orrs	r2, r3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059ae:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d161      	bne.n	8005a7c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a38      	ldr	r2, [pc, #224]	; (8005a9c <HAL_I2S_Init+0x274>)
 80059bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a37      	ldr	r2, [pc, #220]	; (8005aa0 <HAL_I2S_Init+0x278>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d101      	bne.n	80059cc <HAL_I2S_Init+0x1a4>
 80059c8:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <HAL_I2S_Init+0x27c>)
 80059ca:	e001      	b.n	80059d0 <HAL_I2S_Init+0x1a8>
 80059cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059d0:	69db      	ldr	r3, [r3, #28]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	4932      	ldr	r1, [pc, #200]	; (8005aa0 <HAL_I2S_Init+0x278>)
 80059d8:	428a      	cmp	r2, r1
 80059da:	d101      	bne.n	80059e0 <HAL_I2S_Init+0x1b8>
 80059dc:	4a31      	ldr	r2, [pc, #196]	; (8005aa4 <HAL_I2S_Init+0x27c>)
 80059de:	e001      	b.n	80059e4 <HAL_I2S_Init+0x1bc>
 80059e0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80059e4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80059e8:	f023 030f 	bic.w	r3, r3, #15
 80059ec:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <HAL_I2S_Init+0x278>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d101      	bne.n	80059fc <HAL_I2S_Init+0x1d4>
 80059f8:	4b2a      	ldr	r3, [pc, #168]	; (8005aa4 <HAL_I2S_Init+0x27c>)
 80059fa:	e001      	b.n	8005a00 <HAL_I2S_Init+0x1d8>
 80059fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a00:	2202      	movs	r2, #2
 8005a02:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a25      	ldr	r2, [pc, #148]	; (8005aa0 <HAL_I2S_Init+0x278>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d101      	bne.n	8005a12 <HAL_I2S_Init+0x1ea>
 8005a0e:	4b25      	ldr	r3, [pc, #148]	; (8005aa4 <HAL_I2S_Init+0x27c>)
 8005a10:	e001      	b.n	8005a16 <HAL_I2S_Init+0x1ee>
 8005a12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a22:	d003      	beq.n	8005a2c <HAL_I2S_Init+0x204>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d103      	bne.n	8005a34 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	e001      	b.n	8005a38 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005a34:	2300      	movs	r3, #0
 8005a36:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a42:	4313      	orrs	r3, r2
 8005a44:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005a56:	4313      	orrs	r3, r2
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	897b      	ldrh	r3, [r7, #10]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a64:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a0d      	ldr	r2, [pc, #52]	; (8005aa0 <HAL_I2S_Init+0x278>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d101      	bne.n	8005a74 <HAL_I2S_Init+0x24c>
 8005a70:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <HAL_I2S_Init+0x27c>)
 8005a72:	e001      	b.n	8005a78 <HAL_I2S_Init+0x250>
 8005a74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a78:	897a      	ldrh	r2, [r7, #10]
 8005a7a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3720      	adds	r7, #32
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	08005b9f 	.word	0x08005b9f
 8005a98:	cccccccd 	.word	0xcccccccd
 8005a9c:	08005cb5 	.word	0x08005cb5
 8005aa0:	40003800 	.word	0x40003800
 8005aa4:	40003400 	.word	0x40003400

08005aa8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005ad8:	bf00      	nop
 8005ada:	370c      	adds	r7, #12
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b082      	sub	sp, #8
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005af0:	881a      	ldrh	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afc:	1c9a      	adds	r2, r3, #2
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10e      	bne.n	8005b38 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b28:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f7ff ffb8 	bl	8005aa8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b38:	bf00      	nop
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	b292      	uxth	r2, r2
 8005b54:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5a:	1c9a      	adds	r2, r3, #2
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10e      	bne.n	8005b96 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b86:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff ff93 	bl	8005abc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b086      	sub	sp, #24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d13a      	bne.n	8005c30 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d109      	bne.n	8005bd8 <I2S_IRQHandler+0x3a>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bce:	2b40      	cmp	r3, #64	; 0x40
 8005bd0:	d102      	bne.n	8005bd8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7ff ffb4 	bl	8005b40 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	d126      	bne.n	8005c30 <I2S_IRQHandler+0x92>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b20      	cmp	r3, #32
 8005bee:	d11f      	bne.n	8005c30 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005c00:	2300      	movs	r3, #0
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c22:	f043 0202 	orr.w	r2, r3, #2
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7ff ff50 	bl	8005ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b03      	cmp	r3, #3
 8005c3a:	d136      	bne.n	8005caa <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d109      	bne.n	8005c5a <I2S_IRQHandler+0xbc>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d102      	bne.n	8005c5a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff ff45 	bl	8005ae4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f003 0308 	and.w	r3, r3, #8
 8005c60:	2b08      	cmp	r3, #8
 8005c62:	d122      	bne.n	8005caa <I2S_IRQHandler+0x10c>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b20      	cmp	r3, #32
 8005c70:	d11b      	bne.n	8005caa <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c80:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	60fb      	str	r3, [r7, #12]
 8005c8e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c9c:	f043 0204 	orr.w	r2, r3, #4
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff ff13 	bl	8005ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005caa:	bf00      	nop
 8005cac:	3718      	adds	r7, #24
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b088      	sub	sp, #32
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4aa2      	ldr	r2, [pc, #648]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d101      	bne.n	8005cd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005cce:	4ba2      	ldr	r3, [pc, #648]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005cd0:	e001      	b.n	8005cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005cd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a9b      	ldr	r2, [pc, #620]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d101      	bne.n	8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005cec:	4b9a      	ldr	r3, [pc, #616]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005cee:	e001      	b.n	8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005cf0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d00:	d004      	beq.n	8005d0c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f040 8099 	bne.w	8005e3e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	f003 0302 	and.w	r3, r3, #2
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d107      	bne.n	8005d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d002      	beq.n	8005d26 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f925 	bl	8005f70 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d107      	bne.n	8005d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d002      	beq.n	8005d40 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f9c8 	bl	80060d0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	d13a      	bne.n	8005dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	f003 0320 	and.w	r3, r3, #32
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d035      	beq.n	8005dc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a7e      	ldr	r2, [pc, #504]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d101      	bne.n	8005d62 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005d5e:	4b7e      	ldr	r3, [pc, #504]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d60:	e001      	b.n	8005d66 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005d62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4979      	ldr	r1, [pc, #484]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d6e:	428b      	cmp	r3, r1
 8005d70:	d101      	bne.n	8005d76 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005d72:	4b79      	ldr	r3, [pc, #484]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d74:	e001      	b.n	8005d7a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d7e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d8e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	60fb      	str	r3, [r7, #12]
 8005da4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	f043 0202 	orr.w	r2, r3, #2
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7ff fe88 	bl	8005ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f003 0308 	and.w	r3, r3, #8
 8005dc6:	2b08      	cmp	r3, #8
 8005dc8:	f040 80be 	bne.w	8005f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	f003 0320 	and.w	r3, r3, #32
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	f000 80b8 	beq.w	8005f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005de6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a59      	ldr	r2, [pc, #356]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d101      	bne.n	8005df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005df2:	4b59      	ldr	r3, [pc, #356]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005df4:	e001      	b.n	8005dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005df6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4954      	ldr	r1, [pc, #336]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e02:	428b      	cmp	r3, r1
 8005e04:	d101      	bne.n	8005e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005e06:	4b54      	ldr	r3, [pc, #336]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e08:	e001      	b.n	8005e0e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005e0a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e12:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005e14:	2300      	movs	r3, #0
 8005e16:	60bb      	str	r3, [r7, #8]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689b      	ldr	r3, [r3, #8]
 8005e1e:	60bb      	str	r3, [r7, #8]
 8005e20:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e2e:	f043 0204 	orr.w	r2, r3, #4
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f7ff fe4a 	bl	8005ad0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e3c:	e084      	b.n	8005f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005e3e:	69bb      	ldr	r3, [r7, #24]
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d107      	bne.n	8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8be 	bl	8005fd4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d107      	bne.n	8005e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f8fd 	bl	800606c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e78:	2b40      	cmp	r3, #64	; 0x40
 8005e7a:	d12f      	bne.n	8005edc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	f003 0320 	and.w	r3, r3, #32
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d02a      	beq.n	8005edc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e94:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a2e      	ldr	r2, [pc, #184]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d101      	bne.n	8005ea4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005ea0:	4b2d      	ldr	r3, [pc, #180]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005ea2:	e001      	b.n	8005ea8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005ea4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ea8:	685a      	ldr	r2, [r3, #4]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4929      	ldr	r1, [pc, #164]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005eb0:	428b      	cmp	r3, r1
 8005eb2:	d101      	bne.n	8005eb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005eb4:	4b28      	ldr	r3, [pc, #160]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005eb6:	e001      	b.n	8005ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005eb8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ebc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ec0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ece:	f043 0202 	orr.w	r2, r3, #2
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f7ff fdfa 	bl	8005ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	f003 0308 	and.w	r3, r3, #8
 8005ee2:	2b08      	cmp	r3, #8
 8005ee4:	d131      	bne.n	8005f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d02c      	beq.n	8005f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a17      	ldr	r2, [pc, #92]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d101      	bne.n	8005efe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005efa:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005efc:	e001      	b.n	8005f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005efe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f02:	685a      	ldr	r2, [r3, #4]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4912      	ldr	r1, [pc, #72]	; (8005f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005f0a:	428b      	cmp	r3, r1
 8005f0c:	d101      	bne.n	8005f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005f0e:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005f10:	e001      	b.n	8005f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005f12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005f2a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f38:	f043 0204 	orr.w	r2, r3, #4
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fdc5 	bl	8005ad0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f46:	e000      	b.n	8005f4a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005f48:	bf00      	nop
}
 8005f4a:	bf00      	nop
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40003800 	.word	0x40003800
 8005f58:	40003400 	.word	0x40003400

08005f5c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f7c:	1c99      	adds	r1, r3, #2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	6251      	str	r1, [r2, #36]	; 0x24
 8005f82:	881a      	ldrh	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d113      	bne.n	8005fca <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fb0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f7ff ffc9 	bl	8005f5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fca:	bf00      	nop
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	1c99      	adds	r1, r3, #2
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	6251      	str	r1, [r2, #36]	; 0x24
 8005fe6:	8819      	ldrh	r1, [r3, #0]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1d      	ldr	r2, [pc, #116]	; (8006064 <I2SEx_TxISR_I2SExt+0x90>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d101      	bne.n	8005ff6 <I2SEx_TxISR_I2SExt+0x22>
 8005ff2:	4b1d      	ldr	r3, [pc, #116]	; (8006068 <I2SEx_TxISR_I2SExt+0x94>)
 8005ff4:	e001      	b.n	8005ffa <I2SEx_TxISR_I2SExt+0x26>
 8005ff6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ffa:	460a      	mov	r2, r1
 8005ffc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006010:	b29b      	uxth	r3, r3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d121      	bne.n	800605a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a12      	ldr	r2, [pc, #72]	; (8006064 <I2SEx_TxISR_I2SExt+0x90>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d101      	bne.n	8006024 <I2SEx_TxISR_I2SExt+0x50>
 8006020:	4b11      	ldr	r3, [pc, #68]	; (8006068 <I2SEx_TxISR_I2SExt+0x94>)
 8006022:	e001      	b.n	8006028 <I2SEx_TxISR_I2SExt+0x54>
 8006024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006028:	685a      	ldr	r2, [r3, #4]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	490d      	ldr	r1, [pc, #52]	; (8006064 <I2SEx_TxISR_I2SExt+0x90>)
 8006030:	428b      	cmp	r3, r1
 8006032:	d101      	bne.n	8006038 <I2SEx_TxISR_I2SExt+0x64>
 8006034:	4b0c      	ldr	r3, [pc, #48]	; (8006068 <I2SEx_TxISR_I2SExt+0x94>)
 8006036:	e001      	b.n	800603c <I2SEx_TxISR_I2SExt+0x68>
 8006038:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800603c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006040:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006046:	b29b      	uxth	r3, r3
 8006048:	2b00      	cmp	r3, #0
 800604a:	d106      	bne.n	800605a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff ff81 	bl	8005f5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800605a:	bf00      	nop
 800605c:	3708      	adds	r7, #8
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	40003800 	.word	0x40003800
 8006068:	40003400 	.word	0x40003400

0800606c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68d8      	ldr	r0, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607e:	1c99      	adds	r1, r3, #2
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006084:	b282      	uxth	r2, r0
 8006086:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800608c:	b29b      	uxth	r3, r3
 800608e:	3b01      	subs	r3, #1
 8006090:	b29a      	uxth	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d113      	bne.n	80060c8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685a      	ldr	r2, [r3, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80060ae:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7ff ff4a 	bl	8005f5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80060c8:	bf00      	nop
 80060ca:	3708      	adds	r7, #8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a20      	ldr	r2, [pc, #128]	; (8006160 <I2SEx_RxISR_I2SExt+0x90>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d101      	bne.n	80060e6 <I2SEx_RxISR_I2SExt+0x16>
 80060e2:	4b20      	ldr	r3, [pc, #128]	; (8006164 <I2SEx_RxISR_I2SExt+0x94>)
 80060e4:	e001      	b.n	80060ea <I2SEx_RxISR_I2SExt+0x1a>
 80060e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060ea:	68d8      	ldr	r0, [r3, #12]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	1c99      	adds	r1, r3, #2
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80060f6:	b282      	uxth	r2, r0
 80060f8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80060fe:	b29b      	uxth	r3, r3
 8006100:	3b01      	subs	r3, #1
 8006102:	b29a      	uxth	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800610c:	b29b      	uxth	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d121      	bne.n	8006156 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a12      	ldr	r2, [pc, #72]	; (8006160 <I2SEx_RxISR_I2SExt+0x90>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d101      	bne.n	8006120 <I2SEx_RxISR_I2SExt+0x50>
 800611c:	4b11      	ldr	r3, [pc, #68]	; (8006164 <I2SEx_RxISR_I2SExt+0x94>)
 800611e:	e001      	b.n	8006124 <I2SEx_RxISR_I2SExt+0x54>
 8006120:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006124:	685a      	ldr	r2, [r3, #4]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	490d      	ldr	r1, [pc, #52]	; (8006160 <I2SEx_RxISR_I2SExt+0x90>)
 800612c:	428b      	cmp	r3, r1
 800612e:	d101      	bne.n	8006134 <I2SEx_RxISR_I2SExt+0x64>
 8006130:	4b0c      	ldr	r3, [pc, #48]	; (8006164 <I2SEx_RxISR_I2SExt+0x94>)
 8006132:	e001      	b.n	8006138 <I2SEx_RxISR_I2SExt+0x68>
 8006134:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006138:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800613c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	d106      	bne.n	8006156 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7ff ff03 	bl	8005f5c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006156:	bf00      	nop
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	40003800 	.word	0x40003800
 8006164:	40003400 	.word	0x40003400

08006168 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e264      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d075      	beq.n	8006272 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006186:	4ba3      	ldr	r3, [pc, #652]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 030c 	and.w	r3, r3, #12
 800618e:	2b04      	cmp	r3, #4
 8006190:	d00c      	beq.n	80061ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006192:	4ba0      	ldr	r3, [pc, #640]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800619a:	2b08      	cmp	r3, #8
 800619c:	d112      	bne.n	80061c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800619e:	4b9d      	ldr	r3, [pc, #628]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061aa:	d10b      	bne.n	80061c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ac:	4b99      	ldr	r3, [pc, #612]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d05b      	beq.n	8006270 <HAL_RCC_OscConfig+0x108>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d157      	bne.n	8006270 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e23f      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061cc:	d106      	bne.n	80061dc <HAL_RCC_OscConfig+0x74>
 80061ce:	4b91      	ldr	r3, [pc, #580]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a90      	ldr	r2, [pc, #576]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80061d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	e01d      	b.n	8006218 <HAL_RCC_OscConfig+0xb0>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80061e4:	d10c      	bne.n	8006200 <HAL_RCC_OscConfig+0x98>
 80061e6:	4b8b      	ldr	r3, [pc, #556]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a8a      	ldr	r2, [pc, #552]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80061ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	4b88      	ldr	r3, [pc, #544]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a87      	ldr	r2, [pc, #540]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80061f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fc:	6013      	str	r3, [r2, #0]
 80061fe:	e00b      	b.n	8006218 <HAL_RCC_OscConfig+0xb0>
 8006200:	4b84      	ldr	r3, [pc, #528]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a83      	ldr	r2, [pc, #524]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006206:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800620a:	6013      	str	r3, [r2, #0]
 800620c:	4b81      	ldr	r3, [pc, #516]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a80      	ldr	r2, [pc, #512]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006216:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d013      	beq.n	8006248 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006220:	f7fc fac4 	bl	80027ac <HAL_GetTick>
 8006224:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006228:	f7fc fac0 	bl	80027ac <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b64      	cmp	r3, #100	; 0x64
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e204      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623a:	4b76      	ldr	r3, [pc, #472]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0xc0>
 8006246:	e014      	b.n	8006272 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006248:	f7fc fab0 	bl	80027ac <HAL_GetTick>
 800624c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800624e:	e008      	b.n	8006262 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006250:	f7fc faac 	bl	80027ac <HAL_GetTick>
 8006254:	4602      	mov	r2, r0
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	2b64      	cmp	r3, #100	; 0x64
 800625c:	d901      	bls.n	8006262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e1f0      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006262:	4b6c      	ldr	r3, [pc, #432]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1f0      	bne.n	8006250 <HAL_RCC_OscConfig+0xe8>
 800626e:	e000      	b.n	8006272 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006270:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0302 	and.w	r3, r3, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d063      	beq.n	8006346 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800627e:	4b65      	ldr	r3, [pc, #404]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00b      	beq.n	80062a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800628a:	4b62      	ldr	r3, [pc, #392]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006292:	2b08      	cmp	r3, #8
 8006294:	d11c      	bne.n	80062d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006296:	4b5f      	ldr	r3, [pc, #380]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d116      	bne.n	80062d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062a2:	4b5c      	ldr	r3, [pc, #368]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d005      	beq.n	80062ba <HAL_RCC_OscConfig+0x152>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d001      	beq.n	80062ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e1c4      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80062ba:	4b56      	ldr	r3, [pc, #344]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4952      	ldr	r1, [pc, #328]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80062ce:	e03a      	b.n	8006346 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d020      	beq.n	800631a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80062d8:	4b4f      	ldr	r3, [pc, #316]	; (8006418 <HAL_RCC_OscConfig+0x2b0>)
 80062da:	2201      	movs	r2, #1
 80062dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062de:	f7fc fa65 	bl	80027ac <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80062e6:	f7fc fa61 	bl	80027ac <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e1a5      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062f8:	4b46      	ldr	r3, [pc, #280]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0302 	and.w	r3, r3, #2
 8006300:	2b00      	cmp	r3, #0
 8006302:	d0f0      	beq.n	80062e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006304:	4b43      	ldr	r3, [pc, #268]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	691b      	ldr	r3, [r3, #16]
 8006310:	00db      	lsls	r3, r3, #3
 8006312:	4940      	ldr	r1, [pc, #256]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 8006314:	4313      	orrs	r3, r2
 8006316:	600b      	str	r3, [r1, #0]
 8006318:	e015      	b.n	8006346 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800631a:	4b3f      	ldr	r3, [pc, #252]	; (8006418 <HAL_RCC_OscConfig+0x2b0>)
 800631c:	2200      	movs	r2, #0
 800631e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006320:	f7fc fa44 	bl	80027ac <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006328:	f7fc fa40 	bl	80027ac <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e184      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800633a:	4b36      	ldr	r3, [pc, #216]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0308 	and.w	r3, r3, #8
 800634e:	2b00      	cmp	r3, #0
 8006350:	d030      	beq.n	80063b4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d016      	beq.n	8006388 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800635a:	4b30      	ldr	r3, [pc, #192]	; (800641c <HAL_RCC_OscConfig+0x2b4>)
 800635c:	2201      	movs	r2, #1
 800635e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006360:	f7fc fa24 	bl	80027ac <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006368:	f7fc fa20 	bl	80027ac <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e164      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800637a:	4b26      	ldr	r3, [pc, #152]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 800637c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637e:	f003 0302 	and.w	r3, r3, #2
 8006382:	2b00      	cmp	r3, #0
 8006384:	d0f0      	beq.n	8006368 <HAL_RCC_OscConfig+0x200>
 8006386:	e015      	b.n	80063b4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006388:	4b24      	ldr	r3, [pc, #144]	; (800641c <HAL_RCC_OscConfig+0x2b4>)
 800638a:	2200      	movs	r2, #0
 800638c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800638e:	f7fc fa0d 	bl	80027ac <HAL_GetTick>
 8006392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006394:	e008      	b.n	80063a8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006396:	f7fc fa09 	bl	80027ac <HAL_GetTick>
 800639a:	4602      	mov	r2, r0
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	1ad3      	subs	r3, r2, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d901      	bls.n	80063a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80063a4:	2303      	movs	r3, #3
 80063a6:	e14d      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063a8:	4b1a      	ldr	r3, [pc, #104]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80063aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1f0      	bne.n	8006396 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f000 80a0 	beq.w	8006502 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063c2:	2300      	movs	r3, #0
 80063c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063c6:	4b13      	ldr	r3, [pc, #76]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10f      	bne.n	80063f2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063d2:	2300      	movs	r3, #0
 80063d4:	60bb      	str	r3, [r7, #8]
 80063d6:	4b0f      	ldr	r3, [pc, #60]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80063d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063da:	4a0e      	ldr	r2, [pc, #56]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80063dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063e0:	6413      	str	r3, [r2, #64]	; 0x40
 80063e2:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <HAL_RCC_OscConfig+0x2ac>)
 80063e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063ee:	2301      	movs	r3, #1
 80063f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063f2:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <HAL_RCC_OscConfig+0x2b8>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d121      	bne.n	8006442 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80063fe:	4b08      	ldr	r3, [pc, #32]	; (8006420 <HAL_RCC_OscConfig+0x2b8>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a07      	ldr	r2, [pc, #28]	; (8006420 <HAL_RCC_OscConfig+0x2b8>)
 8006404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800640a:	f7fc f9cf 	bl	80027ac <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006410:	e011      	b.n	8006436 <HAL_RCC_OscConfig+0x2ce>
 8006412:	bf00      	nop
 8006414:	40023800 	.word	0x40023800
 8006418:	42470000 	.word	0x42470000
 800641c:	42470e80 	.word	0x42470e80
 8006420:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006424:	f7fc f9c2 	bl	80027ac <HAL_GetTick>
 8006428:	4602      	mov	r2, r0
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	2b02      	cmp	r3, #2
 8006430:	d901      	bls.n	8006436 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006432:	2303      	movs	r3, #3
 8006434:	e106      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006436:	4b85      	ldr	r3, [pc, #532]	; (800664c <HAL_RCC_OscConfig+0x4e4>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800643e:	2b00      	cmp	r3, #0
 8006440:	d0f0      	beq.n	8006424 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d106      	bne.n	8006458 <HAL_RCC_OscConfig+0x2f0>
 800644a:	4b81      	ldr	r3, [pc, #516]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 800644c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800644e:	4a80      	ldr	r2, [pc, #512]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 8006450:	f043 0301 	orr.w	r3, r3, #1
 8006454:	6713      	str	r3, [r2, #112]	; 0x70
 8006456:	e01c      	b.n	8006492 <HAL_RCC_OscConfig+0x32a>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	2b05      	cmp	r3, #5
 800645e:	d10c      	bne.n	800647a <HAL_RCC_OscConfig+0x312>
 8006460:	4b7b      	ldr	r3, [pc, #492]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006464:	4a7a      	ldr	r2, [pc, #488]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 8006466:	f043 0304 	orr.w	r3, r3, #4
 800646a:	6713      	str	r3, [r2, #112]	; 0x70
 800646c:	4b78      	ldr	r3, [pc, #480]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 800646e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006470:	4a77      	ldr	r2, [pc, #476]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 8006472:	f043 0301 	orr.w	r3, r3, #1
 8006476:	6713      	str	r3, [r2, #112]	; 0x70
 8006478:	e00b      	b.n	8006492 <HAL_RCC_OscConfig+0x32a>
 800647a:	4b75      	ldr	r3, [pc, #468]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 800647c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647e:	4a74      	ldr	r2, [pc, #464]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 8006480:	f023 0301 	bic.w	r3, r3, #1
 8006484:	6713      	str	r3, [r2, #112]	; 0x70
 8006486:	4b72      	ldr	r3, [pc, #456]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 8006488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800648a:	4a71      	ldr	r2, [pc, #452]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 800648c:	f023 0304 	bic.w	r3, r3, #4
 8006490:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d015      	beq.n	80064c6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800649a:	f7fc f987 	bl	80027ac <HAL_GetTick>
 800649e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a0:	e00a      	b.n	80064b8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064a2:	f7fc f983 	bl	80027ac <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d901      	bls.n	80064b8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e0c5      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064b8:	4b65      	ldr	r3, [pc, #404]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 80064ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064bc:	f003 0302 	and.w	r3, r3, #2
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d0ee      	beq.n	80064a2 <HAL_RCC_OscConfig+0x33a>
 80064c4:	e014      	b.n	80064f0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064c6:	f7fc f971 	bl	80027ac <HAL_GetTick>
 80064ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064cc:	e00a      	b.n	80064e4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064ce:	f7fc f96d 	bl	80027ac <HAL_GetTick>
 80064d2:	4602      	mov	r2, r0
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	1ad3      	subs	r3, r2, r3
 80064d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064dc:	4293      	cmp	r3, r2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e0af      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064e4:	4b5a      	ldr	r3, [pc, #360]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 80064e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1ee      	bne.n	80064ce <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064f0:	7dfb      	ldrb	r3, [r7, #23]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d105      	bne.n	8006502 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064f6:	4b56      	ldr	r3, [pc, #344]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 80064f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064fa:	4a55      	ldr	r2, [pc, #340]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 80064fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006500:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f000 809b 	beq.w	8006642 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800650c:	4b50      	ldr	r3, [pc, #320]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f003 030c 	and.w	r3, r3, #12
 8006514:	2b08      	cmp	r3, #8
 8006516:	d05c      	beq.n	80065d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	699b      	ldr	r3, [r3, #24]
 800651c:	2b02      	cmp	r3, #2
 800651e:	d141      	bne.n	80065a4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006520:	4b4c      	ldr	r3, [pc, #304]	; (8006654 <HAL_RCC_OscConfig+0x4ec>)
 8006522:	2200      	movs	r2, #0
 8006524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006526:	f7fc f941 	bl	80027ac <HAL_GetTick>
 800652a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652c:	e008      	b.n	8006540 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800652e:	f7fc f93d 	bl	80027ac <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e081      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006540:	4b43      	ldr	r3, [pc, #268]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1f0      	bne.n	800652e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	69da      	ldr	r2, [r3, #28]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a1b      	ldr	r3, [r3, #32]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800655a:	019b      	lsls	r3, r3, #6
 800655c:	431a      	orrs	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	3b01      	subs	r3, #1
 8006566:	041b      	lsls	r3, r3, #16
 8006568:	431a      	orrs	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	4937      	ldr	r1, [pc, #220]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 8006572:	4313      	orrs	r3, r2
 8006574:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006576:	4b37      	ldr	r3, [pc, #220]	; (8006654 <HAL_RCC_OscConfig+0x4ec>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657c:	f7fc f916 	bl	80027ac <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006584:	f7fc f912 	bl	80027ac <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b02      	cmp	r3, #2
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e056      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006596:	4b2e      	ldr	r3, [pc, #184]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0x41c>
 80065a2:	e04e      	b.n	8006642 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a4:	4b2b      	ldr	r3, [pc, #172]	; (8006654 <HAL_RCC_OscConfig+0x4ec>)
 80065a6:	2200      	movs	r2, #0
 80065a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065aa:	f7fc f8ff 	bl	80027ac <HAL_GetTick>
 80065ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065b0:	e008      	b.n	80065c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065b2:	f7fc f8fb 	bl	80027ac <HAL_GetTick>
 80065b6:	4602      	mov	r2, r0
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	2b02      	cmp	r3, #2
 80065be:	d901      	bls.n	80065c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80065c0:	2303      	movs	r3, #3
 80065c2:	e03f      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065c4:	4b22      	ldr	r3, [pc, #136]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1f0      	bne.n	80065b2 <HAL_RCC_OscConfig+0x44a>
 80065d0:	e037      	b.n	8006642 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e032      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80065de:	4b1c      	ldr	r3, [pc, #112]	; (8006650 <HAL_RCC_OscConfig+0x4e8>)
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	699b      	ldr	r3, [r3, #24]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d028      	beq.n	800663e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d121      	bne.n	800663e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006604:	429a      	cmp	r2, r3
 8006606:	d11a      	bne.n	800663e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800660e:	4013      	ands	r3, r2
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006614:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006616:	4293      	cmp	r3, r2
 8006618:	d111      	bne.n	800663e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006624:	085b      	lsrs	r3, r3, #1
 8006626:	3b01      	subs	r3, #1
 8006628:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800662a:	429a      	cmp	r2, r3
 800662c:	d107      	bne.n	800663e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800663a:	429a      	cmp	r2, r3
 800663c:	d001      	beq.n	8006642 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	40007000 	.word	0x40007000
 8006650:	40023800 	.word	0x40023800
 8006654:	42470060 	.word	0x42470060

08006658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e0cc      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800666c:	4b68      	ldr	r3, [pc, #416]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0307 	and.w	r3, r3, #7
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d90c      	bls.n	8006694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667a:	4b65      	ldr	r3, [pc, #404]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 800667c:	683a      	ldr	r2, [r7, #0]
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006682:	4b63      	ldr	r3, [pc, #396]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0307 	and.w	r3, r3, #7
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	429a      	cmp	r2, r3
 800668e:	d001      	beq.n	8006694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e0b8      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f003 0302 	and.w	r3, r3, #2
 800669c:	2b00      	cmp	r3, #0
 800669e:	d020      	beq.n	80066e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f003 0304 	and.w	r3, r3, #4
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d005      	beq.n	80066b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80066ac:	4b59      	ldr	r3, [pc, #356]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	4a58      	ldr	r2, [pc, #352]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80066b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0308 	and.w	r3, r3, #8
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80066c4:	4b53      	ldr	r3, [pc, #332]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	4a52      	ldr	r2, [pc, #328]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80066ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066d0:	4b50      	ldr	r3, [pc, #320]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	494d      	ldr	r1, [pc, #308]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d044      	beq.n	8006778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d107      	bne.n	8006706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066f6:	4b47      	ldr	r3, [pc, #284]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d119      	bne.n	8006736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006702:	2301      	movs	r3, #1
 8006704:	e07f      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	2b02      	cmp	r3, #2
 800670c:	d003      	beq.n	8006716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006712:	2b03      	cmp	r3, #3
 8006714:	d107      	bne.n	8006726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006716:	4b3f      	ldr	r3, [pc, #252]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800671e:	2b00      	cmp	r3, #0
 8006720:	d109      	bne.n	8006736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e06f      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006726:	4b3b      	ldr	r3, [pc, #236]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0302 	and.w	r3, r3, #2
 800672e:	2b00      	cmp	r3, #0
 8006730:	d101      	bne.n	8006736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e067      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006736:	4b37      	ldr	r3, [pc, #220]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	f023 0203 	bic.w	r2, r3, #3
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	4934      	ldr	r1, [pc, #208]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006744:	4313      	orrs	r3, r2
 8006746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006748:	f7fc f830 	bl	80027ac <HAL_GetTick>
 800674c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800674e:	e00a      	b.n	8006766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006750:	f7fc f82c 	bl	80027ac <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	f241 3288 	movw	r2, #5000	; 0x1388
 800675e:	4293      	cmp	r3, r2
 8006760:	d901      	bls.n	8006766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e04f      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006766:	4b2b      	ldr	r3, [pc, #172]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 020c 	and.w	r2, r3, #12
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	429a      	cmp	r2, r3
 8006776:	d1eb      	bne.n	8006750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006778:	4b25      	ldr	r3, [pc, #148]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	429a      	cmp	r2, r3
 8006784:	d20c      	bcs.n	80067a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006786:	4b22      	ldr	r3, [pc, #136]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 8006788:	683a      	ldr	r2, [r7, #0]
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800678e:	4b20      	ldr	r3, [pc, #128]	; (8006810 <HAL_RCC_ClockConfig+0x1b8>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	429a      	cmp	r2, r3
 800679a:	d001      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e032      	b.n	8006806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d008      	beq.n	80067be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067ac:	4b19      	ldr	r3, [pc, #100]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	4916      	ldr	r1, [pc, #88]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d009      	beq.n	80067de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	00db      	lsls	r3, r3, #3
 80067d8:	490e      	ldr	r1, [pc, #56]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80067de:	f000 f821 	bl	8006824 <HAL_RCC_GetSysClockFreq>
 80067e2:	4602      	mov	r2, r0
 80067e4:	4b0b      	ldr	r3, [pc, #44]	; (8006814 <HAL_RCC_ClockConfig+0x1bc>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	f003 030f 	and.w	r3, r3, #15
 80067ee:	490a      	ldr	r1, [pc, #40]	; (8006818 <HAL_RCC_ClockConfig+0x1c0>)
 80067f0:	5ccb      	ldrb	r3, [r1, r3]
 80067f2:	fa22 f303 	lsr.w	r3, r2, r3
 80067f6:	4a09      	ldr	r2, [pc, #36]	; (800681c <HAL_RCC_ClockConfig+0x1c4>)
 80067f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80067fa:	4b09      	ldr	r3, [pc, #36]	; (8006820 <HAL_RCC_ClockConfig+0x1c8>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fb ff90 	bl	8002724 <HAL_InitTick>

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40023c00 	.word	0x40023c00
 8006814:	40023800 	.word	0x40023800
 8006818:	0800ba40 	.word	0x0800ba40
 800681c:	20000010 	.word	0x20000010
 8006820:	20000014 	.word	0x20000014

08006824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006824:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	607b      	str	r3, [r7, #4]
 8006830:	2300      	movs	r3, #0
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	2300      	movs	r3, #0
 8006836:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800683c:	4b67      	ldr	r3, [pc, #412]	; (80069dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f003 030c 	and.w	r3, r3, #12
 8006844:	2b08      	cmp	r3, #8
 8006846:	d00d      	beq.n	8006864 <HAL_RCC_GetSysClockFreq+0x40>
 8006848:	2b08      	cmp	r3, #8
 800684a:	f200 80bd 	bhi.w	80069c8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <HAL_RCC_GetSysClockFreq+0x34>
 8006852:	2b04      	cmp	r3, #4
 8006854:	d003      	beq.n	800685e <HAL_RCC_GetSysClockFreq+0x3a>
 8006856:	e0b7      	b.n	80069c8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006858:	4b61      	ldr	r3, [pc, #388]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800685a:	60bb      	str	r3, [r7, #8]
       break;
 800685c:	e0b7      	b.n	80069ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800685e:	4b61      	ldr	r3, [pc, #388]	; (80069e4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006860:	60bb      	str	r3, [r7, #8]
      break;
 8006862:	e0b4      	b.n	80069ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006864:	4b5d      	ldr	r3, [pc, #372]	; (80069dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800686c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800686e:	4b5b      	ldr	r3, [pc, #364]	; (80069dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d04d      	beq.n	8006916 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800687a:	4b58      	ldr	r3, [pc, #352]	; (80069dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	099b      	lsrs	r3, r3, #6
 8006880:	461a      	mov	r2, r3
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	f240 10ff 	movw	r0, #511	; 0x1ff
 800688a:	f04f 0100 	mov.w	r1, #0
 800688e:	ea02 0800 	and.w	r8, r2, r0
 8006892:	ea03 0901 	and.w	r9, r3, r1
 8006896:	4640      	mov	r0, r8
 8006898:	4649      	mov	r1, r9
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	f04f 0300 	mov.w	r3, #0
 80068a2:	014b      	lsls	r3, r1, #5
 80068a4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80068a8:	0142      	lsls	r2, r0, #5
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	ebb0 0008 	subs.w	r0, r0, r8
 80068b2:	eb61 0109 	sbc.w	r1, r1, r9
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	018b      	lsls	r3, r1, #6
 80068c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80068c4:	0182      	lsls	r2, r0, #6
 80068c6:	1a12      	subs	r2, r2, r0
 80068c8:	eb63 0301 	sbc.w	r3, r3, r1
 80068cc:	f04f 0000 	mov.w	r0, #0
 80068d0:	f04f 0100 	mov.w	r1, #0
 80068d4:	00d9      	lsls	r1, r3, #3
 80068d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80068da:	00d0      	lsls	r0, r2, #3
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	eb12 0208 	adds.w	r2, r2, r8
 80068e4:	eb43 0309 	adc.w	r3, r3, r9
 80068e8:	f04f 0000 	mov.w	r0, #0
 80068ec:	f04f 0100 	mov.w	r1, #0
 80068f0:	0259      	lsls	r1, r3, #9
 80068f2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80068f6:	0250      	lsls	r0, r2, #9
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	4610      	mov	r0, r2
 80068fe:	4619      	mov	r1, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	461a      	mov	r2, r3
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	f7f9 fc5e 	bl	80001c8 <__aeabi_uldivmod>
 800690c:	4602      	mov	r2, r0
 800690e:	460b      	mov	r3, r1
 8006910:	4613      	mov	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	e04a      	b.n	80069ac <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006916:	4b31      	ldr	r3, [pc, #196]	; (80069dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	099b      	lsrs	r3, r3, #6
 800691c:	461a      	mov	r2, r3
 800691e:	f04f 0300 	mov.w	r3, #0
 8006922:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006926:	f04f 0100 	mov.w	r1, #0
 800692a:	ea02 0400 	and.w	r4, r2, r0
 800692e:	ea03 0501 	and.w	r5, r3, r1
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f04f 0200 	mov.w	r2, #0
 800693a:	f04f 0300 	mov.w	r3, #0
 800693e:	014b      	lsls	r3, r1, #5
 8006940:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006944:	0142      	lsls	r2, r0, #5
 8006946:	4610      	mov	r0, r2
 8006948:	4619      	mov	r1, r3
 800694a:	1b00      	subs	r0, r0, r4
 800694c:	eb61 0105 	sbc.w	r1, r1, r5
 8006950:	f04f 0200 	mov.w	r2, #0
 8006954:	f04f 0300 	mov.w	r3, #0
 8006958:	018b      	lsls	r3, r1, #6
 800695a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800695e:	0182      	lsls	r2, r0, #6
 8006960:	1a12      	subs	r2, r2, r0
 8006962:	eb63 0301 	sbc.w	r3, r3, r1
 8006966:	f04f 0000 	mov.w	r0, #0
 800696a:	f04f 0100 	mov.w	r1, #0
 800696e:	00d9      	lsls	r1, r3, #3
 8006970:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006974:	00d0      	lsls	r0, r2, #3
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	1912      	adds	r2, r2, r4
 800697c:	eb45 0303 	adc.w	r3, r5, r3
 8006980:	f04f 0000 	mov.w	r0, #0
 8006984:	f04f 0100 	mov.w	r1, #0
 8006988:	0299      	lsls	r1, r3, #10
 800698a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800698e:	0290      	lsls	r0, r2, #10
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4610      	mov	r0, r2
 8006996:	4619      	mov	r1, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	461a      	mov	r2, r3
 800699c:	f04f 0300 	mov.w	r3, #0
 80069a0:	f7f9 fc12 	bl	80001c8 <__aeabi_uldivmod>
 80069a4:	4602      	mov	r2, r0
 80069a6:	460b      	mov	r3, r1
 80069a8:	4613      	mov	r3, r2
 80069aa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80069ac:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	0c1b      	lsrs	r3, r3, #16
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	3301      	adds	r3, #1
 80069b8:	005b      	lsls	r3, r3, #1
 80069ba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c4:	60bb      	str	r3, [r7, #8]
      break;
 80069c6:	e002      	b.n	80069ce <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80069c8:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80069ca:	60bb      	str	r3, [r7, #8]
      break;
 80069cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80069ce:	68bb      	ldr	r3, [r7, #8]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80069da:	bf00      	nop
 80069dc:	40023800 	.word	0x40023800
 80069e0:	00f42400 	.word	0x00f42400
 80069e4:	007a1200 	.word	0x007a1200

080069e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069ec:	4b03      	ldr	r3, [pc, #12]	; (80069fc <HAL_RCC_GetHCLKFreq+0x14>)
 80069ee:	681b      	ldr	r3, [r3, #0]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20000010 	.word	0x20000010

08006a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a04:	f7ff fff0 	bl	80069e8 <HAL_RCC_GetHCLKFreq>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	0a9b      	lsrs	r3, r3, #10
 8006a10:	f003 0307 	and.w	r3, r3, #7
 8006a14:	4903      	ldr	r1, [pc, #12]	; (8006a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a16:	5ccb      	ldrb	r3, [r1, r3]
 8006a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	bd80      	pop	{r7, pc}
 8006a20:	40023800 	.word	0x40023800
 8006a24:	0800ba50 	.word	0x0800ba50

08006a28 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b086      	sub	sp, #24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006a34:	2300      	movs	r3, #0
 8006a36:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d105      	bne.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d035      	beq.n	8006abc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006a50:	4b62      	ldr	r3, [pc, #392]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a56:	f7fb fea9 	bl	80027ac <HAL_GetTick>
 8006a5a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a5c:	e008      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a5e:	f7fb fea5 	bl	80027ac <HAL_GetTick>
 8006a62:	4602      	mov	r2, r0
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d901      	bls.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e0b0      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006a70:	4b5b      	ldr	r3, [pc, #364]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1f0      	bne.n	8006a5e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	019a      	lsls	r2, r3, #6
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	071b      	lsls	r3, r3, #28
 8006a88:	4955      	ldr	r1, [pc, #340]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a90:	4b52      	ldr	r3, [pc, #328]	; (8006bdc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a92:	2201      	movs	r2, #1
 8006a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a96:	f7fb fe89 	bl	80027ac <HAL_GetTick>
 8006a9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a9e:	f7fb fe85 	bl	80027ac <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e090      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ab0:	4b4b      	ldr	r3, [pc, #300]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f0      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 8083 	beq.w	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006aca:	2300      	movs	r3, #0
 8006acc:	60fb      	str	r3, [r7, #12]
 8006ace:	4b44      	ldr	r3, [pc, #272]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	4a43      	ldr	r2, [pc, #268]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8006ada:	4b41      	ldr	r3, [pc, #260]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ae2:	60fb      	str	r3, [r7, #12]
 8006ae4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006ae6:	4b3f      	ldr	r3, [pc, #252]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a3e      	ldr	r2, [pc, #248]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006af0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006af2:	f7fb fe5b 	bl	80027ac <HAL_GetTick>
 8006af6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006af8:	e008      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006afa:	f7fb fe57 	bl	80027ac <HAL_GetTick>
 8006afe:	4602      	mov	r2, r0
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d901      	bls.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e062      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006b0c:	4b35      	ldr	r3, [pc, #212]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0f0      	beq.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b18:	4b31      	ldr	r3, [pc, #196]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b20:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d02f      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d028      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b36:	4b2a      	ldr	r3, [pc, #168]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b3e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b40:	4b29      	ldr	r3, [pc, #164]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006b42:	2201      	movs	r2, #1
 8006b44:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b46:	4b28      	ldr	r3, [pc, #160]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006b4c:	4a24      	ldr	r2, [pc, #144]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b52:	4b23      	ldr	r3, [pc, #140]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d114      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006b5e:	f7fb fe25 	bl	80027ac <HAL_GetTick>
 8006b62:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b64:	e00a      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b66:	f7fb fe21 	bl	80027ac <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d901      	bls.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006b78:	2303      	movs	r3, #3
 8006b7a:	e02a      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b7c:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b80:	f003 0302 	and.w	r3, r3, #2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d0ee      	beq.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	68db      	ldr	r3, [r3, #12]
 8006b8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b94:	d10d      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006b96:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006ba6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006baa:	490d      	ldr	r1, [pc, #52]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	608b      	str	r3, [r1, #8]
 8006bb0:	e005      	b.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006bb2:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	4a0a      	ldr	r2, [pc, #40]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bb8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bbc:	6093      	str	r3, [r2, #8]
 8006bbe:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006bca:	4905      	ldr	r1, [pc, #20]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006bd0:	2300      	movs	r3, #0
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3718      	adds	r7, #24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	42470068 	.word	0x42470068
 8006be0:	40023800 	.word	0x40023800
 8006be4:	40007000 	.word	0x40007000
 8006be8:	42470e40 	.word	0x42470e40

08006bec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006c00:	2300      	movs	r3, #0
 8006c02:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d13e      	bne.n	8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006c0a:	4b23      	ldr	r3, [pc, #140]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c12:	60fb      	str	r3, [r7, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d12f      	bne.n	8006c80 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006c20:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006c22:	617b      	str	r3, [r7, #20]
          break;
 8006c24:	e02f      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006c26:	4b1c      	ldr	r3, [pc, #112]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c32:	d108      	bne.n	8006c46 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c34:	4b18      	ldr	r3, [pc, #96]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c3c:	4a18      	ldr	r2, [pc, #96]	; (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c42:	613b      	str	r3, [r7, #16]
 8006c44:	e007      	b.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006c46:	4b14      	ldr	r3, [pc, #80]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c4e:	4a15      	ldr	r2, [pc, #84]	; (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c54:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006c56:	4b10      	ldr	r3, [pc, #64]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c5c:	099b      	lsrs	r3, r3, #6
 8006c5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	fb02 f303 	mul.w	r3, r2, r3
 8006c68:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006c6a:	4b0b      	ldr	r3, [pc, #44]	; (8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c70:	0f1b      	lsrs	r3, r3, #28
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	68ba      	ldr	r2, [r7, #8]
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	617b      	str	r3, [r7, #20]
          break;
 8006c7e:	e002      	b.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	617b      	str	r3, [r7, #20]
          break;
 8006c84:	bf00      	nop
        }
      }
      break;
 8006c86:	bf00      	nop
    }
  }
  return frequency;
 8006c88:	697b      	ldr	r3, [r7, #20]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	40023800 	.word	0x40023800
 8006c9c:	00bb8000 	.word	0x00bb8000
 8006ca0:	007a1200 	.word	0x007a1200
 8006ca4:	00f42400 	.word	0x00f42400

08006ca8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d101      	bne.n	8006cba <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e01c      	b.n	8006cf4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	795b      	ldrb	r3, [r3, #5]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d105      	bne.n	8006cd0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f7fb f888 	bl	8001de0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f042 0204 	orr.w	r2, r2, #4
 8006ce4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2201      	movs	r2, #1
 8006cea:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3708      	adds	r7, #8
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}

08006cfc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	791b      	ldrb	r3, [r3, #4]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e03d      	b.n	8006d92 <HAL_RNG_GenerateRandomNumber+0x96>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	795b      	ldrb	r3, [r3, #5]
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b01      	cmp	r3, #1
 8006d24:	d12c      	bne.n	8006d80 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2202      	movs	r2, #2
 8006d2a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006d2c:	f7fb fd3e 	bl	80027ac <HAL_GetTick>
 8006d30:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006d32:	e011      	b.n	8006d58 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006d34:	f7fb fd3a 	bl	80027ac <HAL_GetTick>
 8006d38:	4602      	mov	r2, r0
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	1ad3      	subs	r3, r2, r3
 8006d3e:	2b02      	cmp	r3, #2
 8006d40:	d90a      	bls.n	8006d58 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2202      	movs	r2, #2
 8006d4c:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e01c      	b.n	8006d92 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d1e6      	bne.n	8006d34 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	715a      	strb	r2, [r3, #5]
 8006d7e:	e004      	b.n	8006d8a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2204      	movs	r2, #4
 8006d84:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	711a      	strb	r2, [r3, #4]

  return status;
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3710      	adds	r7, #16
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b082      	sub	sp, #8
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	330c      	adds	r3, #12
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff ffa7 	bl	8006cfc <HAL_RNG_GenerateRandomNumber>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d102      	bne.n	8006dba <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	e000      	b.n	8006dbc <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8006dba:	2300      	movs	r3, #0
  }
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e07b      	b.n	8006ece <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d108      	bne.n	8006df0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006de6:	d009      	beq.n	8006dfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	61da      	str	r2, [r3, #28]
 8006dee:	e005      	b.n	8006dfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d106      	bne.n	8006e1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7fb f804 	bl	8001e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	f003 0302 	and.w	r3, r3, #2
 8006e58:	431a      	orrs	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	f003 0301 	and.w	r3, r3, #1
 8006e62:	431a      	orrs	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e6c:	431a      	orrs	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	69db      	ldr	r3, [r3, #28]
 8006e72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e76:	431a      	orrs	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a1b      	ldr	r3, [r3, #32]
 8006e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e80:	ea42 0103 	orr.w	r1, r2, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	430a      	orrs	r2, r1
 8006e92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	0c1b      	lsrs	r3, r3, #16
 8006e9a:	f003 0104 	and.w	r1, r3, #4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea2:	f003 0210 	and.w	r2, r3, #16
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	69da      	ldr	r2, [r3, #28]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ebc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b088      	sub	sp, #32
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	60f8      	str	r0, [r7, #12]
 8006ede:	60b9      	str	r1, [r7, #8]
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	4613      	mov	r3, r2
 8006ee4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_SPI_Transmit+0x22>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e126      	b.n	8007146 <HAL_SPI_Transmit+0x270>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f00:	f7fb fc54 	bl	80027ac <HAL_GetTick>
 8006f04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006f06:	88fb      	ldrh	r3, [r7, #6]
 8006f08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d002      	beq.n	8006f1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006f16:	2302      	movs	r3, #2
 8006f18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f1a:	e10b      	b.n	8007134 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d002      	beq.n	8006f28 <HAL_SPI_Transmit+0x52>
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006f2c:	e102      	b.n	8007134 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2203      	movs	r2, #3
 8006f32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	88fa      	ldrh	r2, [r7, #6]
 8006f46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	88fa      	ldrh	r2, [r7, #6]
 8006f4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2200      	movs	r2, #0
 8006f52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2200      	movs	r2, #0
 8006f58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f74:	d10f      	bne.n	8006f96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fa0:	2b40      	cmp	r3, #64	; 0x40
 8006fa2:	d007      	beq.n	8006fb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fbc:	d14b      	bne.n	8007056 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <HAL_SPI_Transmit+0xf6>
 8006fc6:	8afb      	ldrh	r3, [r7, #22]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d13e      	bne.n	800704a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	881a      	ldrh	r2, [r3, #0]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fdc:	1c9a      	adds	r2, r3, #2
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	b29a      	uxth	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ff0:	e02b      	b.n	800704a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f003 0302 	and.w	r3, r3, #2
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d112      	bne.n	8007026 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007004:	881a      	ldrh	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007010:	1c9a      	adds	r2, r3, #2
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	86da      	strh	r2, [r3, #54]	; 0x36
 8007024:	e011      	b.n	800704a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007026:	f7fb fbc1 	bl	80027ac <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	69bb      	ldr	r3, [r7, #24]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d803      	bhi.n	800703e <HAL_SPI_Transmit+0x168>
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800703c:	d102      	bne.n	8007044 <HAL_SPI_Transmit+0x16e>
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007048:	e074      	b.n	8007134 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800704e:	b29b      	uxth	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1ce      	bne.n	8006ff2 <HAL_SPI_Transmit+0x11c>
 8007054:	e04c      	b.n	80070f0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d002      	beq.n	8007064 <HAL_SPI_Transmit+0x18e>
 800705e:	8afb      	ldrh	r3, [r7, #22]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d140      	bne.n	80070e6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	330c      	adds	r3, #12
 800706e:	7812      	ldrb	r2, [r2, #0]
 8007070:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	1c5a      	adds	r2, r3, #1
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007080:	b29b      	uxth	r3, r3
 8007082:	3b01      	subs	r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800708a:	e02c      	b.n	80070e6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b02      	cmp	r3, #2
 8007098:	d113      	bne.n	80070c2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	330c      	adds	r3, #12
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ac:	1c5a      	adds	r2, r3, #1
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	b29a      	uxth	r2, r3
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	86da      	strh	r2, [r3, #54]	; 0x36
 80070c0:	e011      	b.n	80070e6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070c2:	f7fb fb73 	bl	80027ac <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d803      	bhi.n	80070da <HAL_SPI_Transmit+0x204>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070d8:	d102      	bne.n	80070e0 <HAL_SPI_Transmit+0x20a>
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d102      	bne.n	80070e6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070e4:	e026      	b.n	8007134 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d1cd      	bne.n	800708c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	6839      	ldr	r1, [r7, #0]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f8b3 	bl	8007260 <SPI_EndRxTxTransaction>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d002      	beq.n	8007106 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2220      	movs	r2, #32
 8007104:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d10a      	bne.n	8007124 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e000      	b.n	8007134 <HAL_SPI_Transmit+0x25e>
  }

error:
 8007132:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2200      	movs	r2, #0
 8007140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007144:	7ffb      	ldrb	r3, [r7, #31]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3720      	adds	r7, #32
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
	...

08007150 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b088      	sub	sp, #32
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007160:	f7fb fb24 	bl	80027ac <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	1a9b      	subs	r3, r3, r2
 800716a:	683a      	ldr	r2, [r7, #0]
 800716c:	4413      	add	r3, r2
 800716e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007170:	f7fb fb1c 	bl	80027ac <HAL_GetTick>
 8007174:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007176:	4b39      	ldr	r3, [pc, #228]	; (800725c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	015b      	lsls	r3, r3, #5
 800717c:	0d1b      	lsrs	r3, r3, #20
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	fb02 f303 	mul.w	r3, r2, r3
 8007184:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007186:	e054      	b.n	8007232 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800718e:	d050      	beq.n	8007232 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007190:	f7fb fb0c 	bl	80027ac <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	69fa      	ldr	r2, [r7, #28]
 800719c:	429a      	cmp	r2, r3
 800719e:	d902      	bls.n	80071a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d13d      	bne.n	8007222 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	685a      	ldr	r2, [r3, #4]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80071b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685b      	ldr	r3, [r3, #4]
 80071ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071be:	d111      	bne.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071c8:	d004      	beq.n	80071d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d2:	d107      	bne.n	80071e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071ec:	d10f      	bne.n	800720e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800720c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e017      	b.n	8007252 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	3b01      	subs	r3, #1
 8007230:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	4013      	ands	r3, r2
 800723c:	68ba      	ldr	r2, [r7, #8]
 800723e:	429a      	cmp	r2, r3
 8007240:	bf0c      	ite	eq
 8007242:	2301      	moveq	r3, #1
 8007244:	2300      	movne	r3, #0
 8007246:	b2db      	uxtb	r3, r3
 8007248:	461a      	mov	r2, r3
 800724a:	79fb      	ldrb	r3, [r7, #7]
 800724c:	429a      	cmp	r2, r3
 800724e:	d19b      	bne.n	8007188 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	20000010 	.word	0x20000010

08007260 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b088      	sub	sp, #32
 8007264:	af02      	add	r7, sp, #8
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800726c:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <SPI_EndRxTxTransaction+0x7c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1b      	ldr	r2, [pc, #108]	; (80072e0 <SPI_EndRxTxTransaction+0x80>)
 8007272:	fba2 2303 	umull	r2, r3, r2, r3
 8007276:	0d5b      	lsrs	r3, r3, #21
 8007278:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800727c:	fb02 f303 	mul.w	r3, r2, r3
 8007280:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800728a:	d112      	bne.n	80072b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	2200      	movs	r2, #0
 8007294:	2180      	movs	r1, #128	; 0x80
 8007296:	68f8      	ldr	r0, [r7, #12]
 8007298:	f7ff ff5a 	bl	8007150 <SPI_WaitFlagStateUntilTimeout>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d016      	beq.n	80072d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072a6:	f043 0220 	orr.w	r2, r3, #32
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e00f      	b.n	80072d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d00a      	beq.n	80072ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	3b01      	subs	r3, #1
 80072bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c8:	2b80      	cmp	r3, #128	; 0x80
 80072ca:	d0f2      	beq.n	80072b2 <SPI_EndRxTxTransaction+0x52>
 80072cc:	e000      	b.n	80072d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80072ce:	bf00      	nop
  }

  return HAL_OK;
 80072d0:	2300      	movs	r3, #0
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3718      	adds	r7, #24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000010 	.word	0x20000010
 80072e0:	165e9f81 	.word	0x165e9f81

080072e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e041      	b.n	800737a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d106      	bne.n	8007310 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f7fa fe70 	bl	8001ff0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2202      	movs	r2, #2
 8007314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	3304      	adds	r3, #4
 8007320:	4619      	mov	r1, r3
 8007322:	4610      	mov	r0, r2
 8007324:	f000 fd68 	bl	8007df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2201      	movs	r2, #1
 800733c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2201      	movs	r2, #1
 800734c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2201      	movs	r2, #1
 8007354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2201      	movs	r2, #1
 800735c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2201      	movs	r2, #1
 8007374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
	...

08007384 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007392:	b2db      	uxtb	r3, r3
 8007394:	2b01      	cmp	r3, #1
 8007396:	d001      	beq.n	800739c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007398:	2301      	movs	r3, #1
 800739a:	e04e      	b.n	800743a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2202      	movs	r2, #2
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f042 0201 	orr.w	r2, r2, #1
 80073b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a23      	ldr	r2, [pc, #140]	; (8007448 <HAL_TIM_Base_Start_IT+0xc4>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d022      	beq.n	8007404 <HAL_TIM_Base_Start_IT+0x80>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c6:	d01d      	beq.n	8007404 <HAL_TIM_Base_Start_IT+0x80>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a1f      	ldr	r2, [pc, #124]	; (800744c <HAL_TIM_Base_Start_IT+0xc8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d018      	beq.n	8007404 <HAL_TIM_Base_Start_IT+0x80>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a1e      	ldr	r2, [pc, #120]	; (8007450 <HAL_TIM_Base_Start_IT+0xcc>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d013      	beq.n	8007404 <HAL_TIM_Base_Start_IT+0x80>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a1c      	ldr	r2, [pc, #112]	; (8007454 <HAL_TIM_Base_Start_IT+0xd0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d00e      	beq.n	8007404 <HAL_TIM_Base_Start_IT+0x80>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a1b      	ldr	r2, [pc, #108]	; (8007458 <HAL_TIM_Base_Start_IT+0xd4>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d009      	beq.n	8007404 <HAL_TIM_Base_Start_IT+0x80>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a19      	ldr	r2, [pc, #100]	; (800745c <HAL_TIM_Base_Start_IT+0xd8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d004      	beq.n	8007404 <HAL_TIM_Base_Start_IT+0x80>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a18      	ldr	r2, [pc, #96]	; (8007460 <HAL_TIM_Base_Start_IT+0xdc>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d111      	bne.n	8007428 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	f003 0307 	and.w	r3, r3, #7
 800740e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2b06      	cmp	r3, #6
 8007414:	d010      	beq.n	8007438 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f042 0201 	orr.w	r2, r2, #1
 8007424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007426:	e007      	b.n	8007438 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f042 0201 	orr.w	r2, r2, #1
 8007436:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3714      	adds	r7, #20
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr
 8007446:	bf00      	nop
 8007448:	40010000 	.word	0x40010000
 800744c:	40000400 	.word	0x40000400
 8007450:	40000800 	.word	0x40000800
 8007454:	40000c00 	.word	0x40000c00
 8007458:	40010400 	.word	0x40010400
 800745c:	40014000 	.word	0x40014000
 8007460:	40001800 	.word	0x40001800

08007464 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d109      	bne.n	8007488 <HAL_TIM_OC_Start_IT+0x24>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800747a:	b2db      	uxtb	r3, r3
 800747c:	2b01      	cmp	r3, #1
 800747e:	bf14      	ite	ne
 8007480:	2301      	movne	r3, #1
 8007482:	2300      	moveq	r3, #0
 8007484:	b2db      	uxtb	r3, r3
 8007486:	e022      	b.n	80074ce <HAL_TIM_OC_Start_IT+0x6a>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b04      	cmp	r3, #4
 800748c:	d109      	bne.n	80074a2 <HAL_TIM_OC_Start_IT+0x3e>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b01      	cmp	r3, #1
 8007498:	bf14      	ite	ne
 800749a:	2301      	movne	r3, #1
 800749c:	2300      	moveq	r3, #0
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	e015      	b.n	80074ce <HAL_TIM_OC_Start_IT+0x6a>
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d109      	bne.n	80074bc <HAL_TIM_OC_Start_IT+0x58>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	bf14      	ite	ne
 80074b4:	2301      	movne	r3, #1
 80074b6:	2300      	moveq	r3, #0
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	e008      	b.n	80074ce <HAL_TIM_OC_Start_IT+0x6a>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	bf14      	ite	ne
 80074c8:	2301      	movne	r3, #1
 80074ca:	2300      	moveq	r3, #0
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e0c2      	b.n	800765c <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d104      	bne.n	80074e6 <HAL_TIM_OC_Start_IT+0x82>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2202      	movs	r2, #2
 80074e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074e4:	e013      	b.n	800750e <HAL_TIM_OC_Start_IT+0xaa>
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d104      	bne.n	80074f6 <HAL_TIM_OC_Start_IT+0x92>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074f4:	e00b      	b.n	800750e <HAL_TIM_OC_Start_IT+0xaa>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b08      	cmp	r3, #8
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_OC_Start_IT+0xa2>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007504:	e003      	b.n	800750e <HAL_TIM_OC_Start_IT+0xaa>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2202      	movs	r2, #2
 800750a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	2b0c      	cmp	r3, #12
 8007512:	d841      	bhi.n	8007598 <HAL_TIM_OC_Start_IT+0x134>
 8007514:	a201      	add	r2, pc, #4	; (adr r2, 800751c <HAL_TIM_OC_Start_IT+0xb8>)
 8007516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751a:	bf00      	nop
 800751c:	08007551 	.word	0x08007551
 8007520:	08007599 	.word	0x08007599
 8007524:	08007599 	.word	0x08007599
 8007528:	08007599 	.word	0x08007599
 800752c:	08007563 	.word	0x08007563
 8007530:	08007599 	.word	0x08007599
 8007534:	08007599 	.word	0x08007599
 8007538:	08007599 	.word	0x08007599
 800753c:	08007575 	.word	0x08007575
 8007540:	08007599 	.word	0x08007599
 8007544:	08007599 	.word	0x08007599
 8007548:	08007599 	.word	0x08007599
 800754c:	08007587 	.word	0x08007587
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f042 0202 	orr.w	r2, r2, #2
 800755e:	60da      	str	r2, [r3, #12]
      break;
 8007560:	e01b      	b.n	800759a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f042 0204 	orr.w	r2, r2, #4
 8007570:	60da      	str	r2, [r3, #12]
      break;
 8007572:	e012      	b.n	800759a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	68da      	ldr	r2, [r3, #12]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0208 	orr.w	r2, r2, #8
 8007582:	60da      	str	r2, [r3, #12]
      break;
 8007584:	e009      	b.n	800759a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68da      	ldr	r2, [r3, #12]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0210 	orr.w	r2, r2, #16
 8007594:	60da      	str	r2, [r3, #12]
      break;
 8007596:	e000      	b.n	800759a <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8007598:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2201      	movs	r2, #1
 80075a0:	6839      	ldr	r1, [r7, #0]
 80075a2:	4618      	mov	r0, r3
 80075a4:	f000 ff12 	bl	80083cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a2d      	ldr	r2, [pc, #180]	; (8007664 <HAL_TIM_OC_Start_IT+0x200>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d004      	beq.n	80075bc <HAL_TIM_OC_Start_IT+0x158>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a2c      	ldr	r2, [pc, #176]	; (8007668 <HAL_TIM_OC_Start_IT+0x204>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d101      	bne.n	80075c0 <HAL_TIM_OC_Start_IT+0x15c>
 80075bc:	2301      	movs	r3, #1
 80075be:	e000      	b.n	80075c2 <HAL_TIM_OC_Start_IT+0x15e>
 80075c0:	2300      	movs	r3, #0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d007      	beq.n	80075d6 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a22      	ldr	r2, [pc, #136]	; (8007664 <HAL_TIM_OC_Start_IT+0x200>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d022      	beq.n	8007626 <HAL_TIM_OC_Start_IT+0x1c2>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e8:	d01d      	beq.n	8007626 <HAL_TIM_OC_Start_IT+0x1c2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a1f      	ldr	r2, [pc, #124]	; (800766c <HAL_TIM_OC_Start_IT+0x208>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d018      	beq.n	8007626 <HAL_TIM_OC_Start_IT+0x1c2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a1d      	ldr	r2, [pc, #116]	; (8007670 <HAL_TIM_OC_Start_IT+0x20c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d013      	beq.n	8007626 <HAL_TIM_OC_Start_IT+0x1c2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1c      	ldr	r2, [pc, #112]	; (8007674 <HAL_TIM_OC_Start_IT+0x210>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d00e      	beq.n	8007626 <HAL_TIM_OC_Start_IT+0x1c2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a16      	ldr	r2, [pc, #88]	; (8007668 <HAL_TIM_OC_Start_IT+0x204>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d009      	beq.n	8007626 <HAL_TIM_OC_Start_IT+0x1c2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a18      	ldr	r2, [pc, #96]	; (8007678 <HAL_TIM_OC_Start_IT+0x214>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d004      	beq.n	8007626 <HAL_TIM_OC_Start_IT+0x1c2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a16      	ldr	r2, [pc, #88]	; (800767c <HAL_TIM_OC_Start_IT+0x218>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d111      	bne.n	800764a <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0307 	and.w	r3, r3, #7
 8007630:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	2b06      	cmp	r3, #6
 8007636:	d010      	beq.n	800765a <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0201 	orr.w	r2, r2, #1
 8007646:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007648:	e007      	b.n	800765a <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681a      	ldr	r2, [r3, #0]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f042 0201 	orr.w	r2, r2, #1
 8007658:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	40010000 	.word	0x40010000
 8007668:	40010400 	.word	0x40010400
 800766c:	40000400 	.word	0x40000400
 8007670:	40000800 	.word	0x40000800
 8007674:	40000c00 	.word	0x40000c00
 8007678:	40014000 	.word	0x40014000
 800767c:	40001800 	.word	0x40001800

08007680 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e041      	b.n	8007716 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f839 	bl	800771e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f000 fb9a 	bl	8007df8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007714:	2300      	movs	r3, #0
}
 8007716:	4618      	mov	r0, r3
 8007718:	3708      	adds	r7, #8
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800771e:	b480      	push	{r7}
 8007720:	b083      	sub	sp, #12
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr

08007732 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b086      	sub	sp, #24
 8007736:	af00      	add	r7, sp, #0
 8007738:	6078      	str	r0, [r7, #4]
 800773a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
 8007744:	e097      	b.n	8007876 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800774c:	b2db      	uxtb	r3, r3
 800774e:	2b00      	cmp	r3, #0
 8007750:	d106      	bne.n	8007760 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f7fa fc00 	bl	8001f60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	6812      	ldr	r2, [r2, #0]
 8007772:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007776:	f023 0307 	bic.w	r3, r3, #7
 800777a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	4619      	mov	r1, r3
 8007786:	4610      	mov	r0, r2
 8007788:	f000 fb36 	bl	8007df8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b4:	f023 0303 	bic.w	r3, r3, #3
 80077b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	689a      	ldr	r2, [r3, #8]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	699b      	ldr	r3, [r3, #24]
 80077c2:	021b      	lsls	r3, r3, #8
 80077c4:	4313      	orrs	r3, r2
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80077d2:	f023 030c 	bic.w	r3, r3, #12
 80077d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80077e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	68da      	ldr	r2, [r3, #12]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	69db      	ldr	r3, [r3, #28]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	4313      	orrs	r3, r2
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4313      	orrs	r3, r2
 80077f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	011a      	lsls	r2, r3, #4
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	031b      	lsls	r3, r3, #12
 8007802:	4313      	orrs	r3, r2
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	4313      	orrs	r3, r2
 8007808:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007810:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007818:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	011b      	lsls	r3, r3, #4
 8007824:	4313      	orrs	r3, r2
 8007826:	68fa      	ldr	r2, [r7, #12]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	693a      	ldr	r2, [r7, #16]
 800783a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2201      	movs	r2, #1
 8007870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007874:	2300      	movs	r3, #0
}
 8007876:	4618      	mov	r0, r3
 8007878:	3718      	adds	r7, #24
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b02      	cmp	r3, #2
 8007892:	d122      	bne.n	80078da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d11b      	bne.n	80078da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f06f 0202 	mvn.w	r2, #2
 80078aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	f003 0303 	and.w	r3, r3, #3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 fa7b 	bl	8007dbc <HAL_TIM_IC_CaptureCallback>
 80078c6:	e005      	b.n	80078d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa6d 	bl	8007da8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f000 fa7e 	bl	8007dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2200      	movs	r2, #0
 80078d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	f003 0304 	and.w	r3, r3, #4
 80078e4:	2b04      	cmp	r3, #4
 80078e6:	d122      	bne.n	800792e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	68db      	ldr	r3, [r3, #12]
 80078ee:	f003 0304 	and.w	r3, r3, #4
 80078f2:	2b04      	cmp	r3, #4
 80078f4:	d11b      	bne.n	800792e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f06f 0204 	mvn.w	r2, #4
 80078fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2202      	movs	r2, #2
 8007904:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007910:	2b00      	cmp	r3, #0
 8007912:	d003      	beq.n	800791c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fa51 	bl	8007dbc <HAL_TIM_IC_CaptureCallback>
 800791a:	e005      	b.n	8007928 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fa43 	bl	8007da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007922:	6878      	ldr	r0, [r7, #4]
 8007924:	f000 fa54 	bl	8007dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691b      	ldr	r3, [r3, #16]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b08      	cmp	r3, #8
 800793a:	d122      	bne.n	8007982 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f003 0308 	and.w	r3, r3, #8
 8007946:	2b08      	cmp	r3, #8
 8007948:	d11b      	bne.n	8007982 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f06f 0208 	mvn.w	r2, #8
 8007952:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2204      	movs	r2, #4
 8007958:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	f003 0303 	and.w	r3, r3, #3
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 fa27 	bl	8007dbc <HAL_TIM_IC_CaptureCallback>
 800796e:	e005      	b.n	800797c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fa19 	bl	8007da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	f000 fa2a 	bl	8007dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b10      	cmp	r3, #16
 800798e:	d122      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f003 0310 	and.w	r3, r3, #16
 800799a:	2b10      	cmp	r3, #16
 800799c:	d11b      	bne.n	80079d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f06f 0210 	mvn.w	r2, #16
 80079a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2208      	movs	r2, #8
 80079ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69db      	ldr	r3, [r3, #28]
 80079b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f9fd 	bl	8007dbc <HAL_TIM_IC_CaptureCallback>
 80079c2:	e005      	b.n	80079d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	f000 f9ef 	bl	8007da8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa00 	bl	8007dd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	f003 0301 	and.w	r3, r3, #1
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d10e      	bne.n	8007a02 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	f003 0301 	and.w	r3, r3, #1
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d107      	bne.n	8007a02 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f06f 0201 	mvn.w	r2, #1
 80079fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f9c9 	bl	8007d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0c:	2b80      	cmp	r3, #128	; 0x80
 8007a0e:	d10e      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a1a:	2b80      	cmp	r3, #128	; 0x80
 8007a1c:	d107      	bne.n	8007a2e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f000 fd7b 	bl	8008524 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	691b      	ldr	r3, [r3, #16]
 8007a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d10e      	bne.n	8007a5a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	68db      	ldr	r3, [r3, #12]
 8007a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a46:	2b40      	cmp	r3, #64	; 0x40
 8007a48:	d107      	bne.n	8007a5a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 f9c5 	bl	8007de4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b20      	cmp	r3, #32
 8007a66:	d10e      	bne.n	8007a86 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f003 0320 	and.w	r3, r3, #32
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d107      	bne.n	8007a86 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f06f 0220 	mvn.w	r2, #32
 8007a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fd45 	bl	8008510 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a86:	bf00      	nop
 8007a88:	3708      	adds	r7, #8
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e0ac      	b.n	8007c04 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2b0c      	cmp	r3, #12
 8007ab6:	f200 809f 	bhi.w	8007bf8 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007aba:	a201      	add	r2, pc, #4	; (adr r2, 8007ac0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac0:	08007af5 	.word	0x08007af5
 8007ac4:	08007bf9 	.word	0x08007bf9
 8007ac8:	08007bf9 	.word	0x08007bf9
 8007acc:	08007bf9 	.word	0x08007bf9
 8007ad0:	08007b35 	.word	0x08007b35
 8007ad4:	08007bf9 	.word	0x08007bf9
 8007ad8:	08007bf9 	.word	0x08007bf9
 8007adc:	08007bf9 	.word	0x08007bf9
 8007ae0:	08007b77 	.word	0x08007b77
 8007ae4:	08007bf9 	.word	0x08007bf9
 8007ae8:	08007bf9 	.word	0x08007bf9
 8007aec:	08007bf9 	.word	0x08007bf9
 8007af0:	08007bb7 	.word	0x08007bb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68b9      	ldr	r1, [r7, #8]
 8007afa:	4618      	mov	r0, r3
 8007afc:	f000 fa1c 	bl	8007f38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	699a      	ldr	r2, [r3, #24]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f042 0208 	orr.w	r2, r2, #8
 8007b0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699a      	ldr	r2, [r3, #24]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0204 	bic.w	r2, r2, #4
 8007b1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	6999      	ldr	r1, [r3, #24]
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	691a      	ldr	r2, [r3, #16]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	619a      	str	r2, [r3, #24]
      break;
 8007b32:	e062      	b.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68b9      	ldr	r1, [r7, #8]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f000 fa6c 	bl	8008018 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699a      	ldr	r2, [r3, #24]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	699a      	ldr	r2, [r3, #24]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6999      	ldr	r1, [r3, #24]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	021a      	lsls	r2, r3, #8
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	619a      	str	r2, [r3, #24]
      break;
 8007b74:	e041      	b.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68b9      	ldr	r1, [r7, #8]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f000 fac1 	bl	8008104 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	69da      	ldr	r2, [r3, #28]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 0208 	orr.w	r2, r2, #8
 8007b90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	69da      	ldr	r2, [r3, #28]
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f022 0204 	bic.w	r2, r2, #4
 8007ba0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	69d9      	ldr	r1, [r3, #28]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	691a      	ldr	r2, [r3, #16]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	61da      	str	r2, [r3, #28]
      break;
 8007bb4:	e021      	b.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68b9      	ldr	r1, [r7, #8]
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	f000 fb15 	bl	80081ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69da      	ldr	r2, [r3, #28]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	69da      	ldr	r2, [r3, #28]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69d9      	ldr	r1, [r3, #28]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	691b      	ldr	r3, [r3, #16]
 8007bec:	021a      	lsls	r2, r3, #8
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	61da      	str	r2, [r3, #28]
      break;
 8007bf6:	e000      	b.n	8007bfa <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007bf8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}

08007c0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d101      	bne.n	8007c24 <HAL_TIM_ConfigClockSource+0x18>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e0b3      	b.n	8007d8c <HAL_TIM_ConfigClockSource+0x180>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2202      	movs	r2, #2
 8007c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c4a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c5c:	d03e      	beq.n	8007cdc <HAL_TIM_ConfigClockSource+0xd0>
 8007c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c62:	f200 8087 	bhi.w	8007d74 <HAL_TIM_ConfigClockSource+0x168>
 8007c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6a:	f000 8085 	beq.w	8007d78 <HAL_TIM_ConfigClockSource+0x16c>
 8007c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c72:	d87f      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x168>
 8007c74:	2b70      	cmp	r3, #112	; 0x70
 8007c76:	d01a      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0xa2>
 8007c78:	2b70      	cmp	r3, #112	; 0x70
 8007c7a:	d87b      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x168>
 8007c7c:	2b60      	cmp	r3, #96	; 0x60
 8007c7e:	d050      	beq.n	8007d22 <HAL_TIM_ConfigClockSource+0x116>
 8007c80:	2b60      	cmp	r3, #96	; 0x60
 8007c82:	d877      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x168>
 8007c84:	2b50      	cmp	r3, #80	; 0x50
 8007c86:	d03c      	beq.n	8007d02 <HAL_TIM_ConfigClockSource+0xf6>
 8007c88:	2b50      	cmp	r3, #80	; 0x50
 8007c8a:	d873      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x168>
 8007c8c:	2b40      	cmp	r3, #64	; 0x40
 8007c8e:	d058      	beq.n	8007d42 <HAL_TIM_ConfigClockSource+0x136>
 8007c90:	2b40      	cmp	r3, #64	; 0x40
 8007c92:	d86f      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x168>
 8007c94:	2b30      	cmp	r3, #48	; 0x30
 8007c96:	d064      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x156>
 8007c98:	2b30      	cmp	r3, #48	; 0x30
 8007c9a:	d86b      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x168>
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	d060      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x156>
 8007ca0:	2b20      	cmp	r3, #32
 8007ca2:	d867      	bhi.n	8007d74 <HAL_TIM_ConfigClockSource+0x168>
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d05c      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x156>
 8007ca8:	2b10      	cmp	r3, #16
 8007caa:	d05a      	beq.n	8007d62 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007cac:	e062      	b.n	8007d74 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6899      	ldr	r1, [r3, #8]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	68db      	ldr	r3, [r3, #12]
 8007cbe:	f000 fb65 	bl	800838c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007cd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68fa      	ldr	r2, [r7, #12]
 8007cd8:	609a      	str	r2, [r3, #8]
      break;
 8007cda:	e04e      	b.n	8007d7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	6899      	ldr	r1, [r3, #8]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	685a      	ldr	r2, [r3, #4]
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f000 fb4e 	bl	800838c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cfe:	609a      	str	r2, [r3, #8]
      break;
 8007d00:	e03b      	b.n	8007d7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6818      	ldr	r0, [r3, #0]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	6859      	ldr	r1, [r3, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f000 fac2 	bl	8008298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2150      	movs	r1, #80	; 0x50
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f000 fb1b 	bl	8008356 <TIM_ITRx_SetConfig>
      break;
 8007d20:	e02b      	b.n	8007d7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	6859      	ldr	r1, [r3, #4]
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	461a      	mov	r2, r3
 8007d30:	f000 fae1 	bl	80082f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2160      	movs	r1, #96	; 0x60
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fb0b 	bl	8008356 <TIM_ITRx_SetConfig>
      break;
 8007d40:	e01b      	b.n	8007d7a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6818      	ldr	r0, [r3, #0]
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	6859      	ldr	r1, [r3, #4]
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f000 faa2 	bl	8008298 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2140      	movs	r1, #64	; 0x40
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 fafb 	bl	8008356 <TIM_ITRx_SetConfig>
      break;
 8007d60:	e00b      	b.n	8007d7a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f000 faf2 	bl	8008356 <TIM_ITRx_SetConfig>
        break;
 8007d72:	e002      	b.n	8007d7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007d74:	bf00      	nop
 8007d76:	e000      	b.n	8007d7a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007d78:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d8a:	2300      	movs	r3, #0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007dc4:	bf00      	nop
 8007dc6:	370c      	adds	r7, #12
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dd8:	bf00      	nop
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b085      	sub	sp, #20
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a40      	ldr	r2, [pc, #256]	; (8007f0c <TIM_Base_SetConfig+0x114>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d013      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e16:	d00f      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a3d      	ldr	r2, [pc, #244]	; (8007f10 <TIM_Base_SetConfig+0x118>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d00b      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a3c      	ldr	r2, [pc, #240]	; (8007f14 <TIM_Base_SetConfig+0x11c>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d007      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a3b      	ldr	r2, [pc, #236]	; (8007f18 <TIM_Base_SetConfig+0x120>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d003      	beq.n	8007e38 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a3a      	ldr	r2, [pc, #232]	; (8007f1c <TIM_Base_SetConfig+0x124>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d108      	bne.n	8007e4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	4a2f      	ldr	r2, [pc, #188]	; (8007f0c <TIM_Base_SetConfig+0x114>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d02b      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e58:	d027      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a2c      	ldr	r2, [pc, #176]	; (8007f10 <TIM_Base_SetConfig+0x118>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d023      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a2b      	ldr	r2, [pc, #172]	; (8007f14 <TIM_Base_SetConfig+0x11c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d01f      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2a      	ldr	r2, [pc, #168]	; (8007f18 <TIM_Base_SetConfig+0x120>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d01b      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a29      	ldr	r2, [pc, #164]	; (8007f1c <TIM_Base_SetConfig+0x124>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d017      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a28      	ldr	r2, [pc, #160]	; (8007f20 <TIM_Base_SetConfig+0x128>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d013      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a27      	ldr	r2, [pc, #156]	; (8007f24 <TIM_Base_SetConfig+0x12c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d00f      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a26      	ldr	r2, [pc, #152]	; (8007f28 <TIM_Base_SetConfig+0x130>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00b      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a25      	ldr	r2, [pc, #148]	; (8007f2c <TIM_Base_SetConfig+0x134>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d007      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a24      	ldr	r2, [pc, #144]	; (8007f30 <TIM_Base_SetConfig+0x138>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d003      	beq.n	8007eaa <TIM_Base_SetConfig+0xb2>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a23      	ldr	r2, [pc, #140]	; (8007f34 <TIM_Base_SetConfig+0x13c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d108      	bne.n	8007ebc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007eb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	695b      	ldr	r3, [r3, #20]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681a      	ldr	r2, [r3, #0]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <TIM_Base_SetConfig+0x114>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d003      	beq.n	8007ef0 <TIM_Base_SetConfig+0xf8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a0c      	ldr	r2, [pc, #48]	; (8007f1c <TIM_Base_SetConfig+0x124>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d103      	bne.n	8007ef8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2201      	movs	r2, #1
 8007efc:	615a      	str	r2, [r3, #20]
}
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40010000 	.word	0x40010000
 8007f10:	40000400 	.word	0x40000400
 8007f14:	40000800 	.word	0x40000800
 8007f18:	40000c00 	.word	0x40000c00
 8007f1c:	40010400 	.word	0x40010400
 8007f20:	40014000 	.word	0x40014000
 8007f24:	40014400 	.word	0x40014400
 8007f28:	40014800 	.word	0x40014800
 8007f2c:	40001800 	.word	0x40001800
 8007f30:	40001c00 	.word	0x40001c00
 8007f34:	40002000 	.word	0x40002000

08007f38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b087      	sub	sp, #28
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	f023 0201 	bic.w	r2, r3, #1
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6a1b      	ldr	r3, [r3, #32]
 8007f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f023 0303 	bic.w	r3, r3, #3
 8007f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	f023 0302 	bic.w	r3, r3, #2
 8007f80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	4a20      	ldr	r2, [pc, #128]	; (8008010 <TIM_OC1_SetConfig+0xd8>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d003      	beq.n	8007f9c <TIM_OC1_SetConfig+0x64>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	4a1f      	ldr	r2, [pc, #124]	; (8008014 <TIM_OC1_SetConfig+0xdc>)
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d10c      	bne.n	8007fb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	f023 0308 	bic.w	r3, r3, #8
 8007fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f023 0304 	bic.w	r3, r3, #4
 8007fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	4a15      	ldr	r2, [pc, #84]	; (8008010 <TIM_OC1_SetConfig+0xd8>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d003      	beq.n	8007fc6 <TIM_OC1_SetConfig+0x8e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	4a14      	ldr	r2, [pc, #80]	; (8008014 <TIM_OC1_SetConfig+0xdc>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d111      	bne.n	8007fea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007fc6:	693b      	ldr	r3, [r7, #16]
 8007fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	695b      	ldr	r3, [r3, #20]
 8007fda:	693a      	ldr	r2, [r7, #16]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68fa      	ldr	r2, [r7, #12]
 8007ff4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	685a      	ldr	r2, [r3, #4]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	697a      	ldr	r2, [r7, #20]
 8008002:	621a      	str	r2, [r3, #32]
}
 8008004:	bf00      	nop
 8008006:	371c      	adds	r7, #28
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	40010000 	.word	0x40010000
 8008014:	40010400 	.word	0x40010400

08008018 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
 8008020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6a1b      	ldr	r3, [r3, #32]
 8008026:	f023 0210 	bic.w	r2, r3, #16
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800804e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	021b      	lsls	r3, r3, #8
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	f023 0320 	bic.w	r3, r3, #32
 8008062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	011b      	lsls	r3, r3, #4
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4313      	orrs	r3, r2
 800806e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a22      	ldr	r2, [pc, #136]	; (80080fc <TIM_OC2_SetConfig+0xe4>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d003      	beq.n	8008080 <TIM_OC2_SetConfig+0x68>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a21      	ldr	r2, [pc, #132]	; (8008100 <TIM_OC2_SetConfig+0xe8>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d10d      	bne.n	800809c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008086:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	011b      	lsls	r3, r3, #4
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800809a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a17      	ldr	r2, [pc, #92]	; (80080fc <TIM_OC2_SetConfig+0xe4>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_OC2_SetConfig+0x94>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a16      	ldr	r2, [pc, #88]	; (8008100 <TIM_OC2_SetConfig+0xe8>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d113      	bne.n	80080d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	695b      	ldr	r3, [r3, #20]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	693a      	ldr	r2, [r7, #16]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	685a      	ldr	r2, [r3, #4]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	697a      	ldr	r2, [r7, #20]
 80080ec:	621a      	str	r2, [r3, #32]
}
 80080ee:	bf00      	nop
 80080f0:	371c      	adds	r7, #28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr
 80080fa:	bf00      	nop
 80080fc:	40010000 	.word	0x40010000
 8008100:	40010400 	.word	0x40010400

08008104 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008104:	b480      	push	{r7}
 8008106:	b087      	sub	sp, #28
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6a1b      	ldr	r3, [r3, #32]
 8008112:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a1b      	ldr	r3, [r3, #32]
 800811e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008132:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	4313      	orrs	r3, r2
 8008144:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800814c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	021b      	lsls	r3, r3, #8
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	4313      	orrs	r3, r2
 8008158:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a21      	ldr	r2, [pc, #132]	; (80081e4 <TIM_OC3_SetConfig+0xe0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d003      	beq.n	800816a <TIM_OC3_SetConfig+0x66>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a20      	ldr	r2, [pc, #128]	; (80081e8 <TIM_OC3_SetConfig+0xe4>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d10d      	bne.n	8008186 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008170:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	68db      	ldr	r3, [r3, #12]
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	697a      	ldr	r2, [r7, #20]
 800817a:	4313      	orrs	r3, r2
 800817c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008184:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	4a16      	ldr	r2, [pc, #88]	; (80081e4 <TIM_OC3_SetConfig+0xe0>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d003      	beq.n	8008196 <TIM_OC3_SetConfig+0x92>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <TIM_OC3_SetConfig+0xe4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d113      	bne.n	80081be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800819c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	011b      	lsls	r3, r3, #4
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4313      	orrs	r3, r2
 80081b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	011b      	lsls	r3, r3, #4
 80081b8:	693a      	ldr	r2, [r7, #16]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	693a      	ldr	r2, [r7, #16]
 80081c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685a      	ldr	r2, [r3, #4]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	621a      	str	r2, [r3, #32]
}
 80081d8:	bf00      	nop
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40010400 	.word	0x40010400

080081ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b087      	sub	sp, #28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
 80081f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6a1b      	ldr	r3, [r3, #32]
 8008206:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	69db      	ldr	r3, [r3, #28]
 8008212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800821a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	021b      	lsls	r3, r3, #8
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	031b      	lsls	r3, r3, #12
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	4313      	orrs	r3, r2
 8008242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a12      	ldr	r2, [pc, #72]	; (8008290 <TIM_OC4_SetConfig+0xa4>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d003      	beq.n	8008254 <TIM_OC4_SetConfig+0x68>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a11      	ldr	r2, [pc, #68]	; (8008294 <TIM_OC4_SetConfig+0xa8>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d109      	bne.n	8008268 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800825a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	019b      	lsls	r3, r3, #6
 8008262:	697a      	ldr	r2, [r7, #20]
 8008264:	4313      	orrs	r3, r2
 8008266:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68fa      	ldr	r2, [r7, #12]
 8008272:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	621a      	str	r2, [r3, #32]
}
 8008282:	bf00      	nop
 8008284:	371c      	adds	r7, #28
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	40010000 	.word	0x40010000
 8008294:	40010400 	.word	0x40010400

08008298 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008298:	b480      	push	{r7}
 800829a:	b087      	sub	sp, #28
 800829c:	af00      	add	r7, sp, #0
 800829e:	60f8      	str	r0, [r7, #12]
 80082a0:	60b9      	str	r1, [r7, #8]
 80082a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6a1b      	ldr	r3, [r3, #32]
 80082a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	6a1b      	ldr	r3, [r3, #32]
 80082ae:	f023 0201 	bic.w	r2, r3, #1
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	011b      	lsls	r3, r3, #4
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	4313      	orrs	r3, r2
 80082cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f023 030a 	bic.w	r3, r3, #10
 80082d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	697a      	ldr	r2, [r7, #20]
 80082e8:	621a      	str	r2, [r3, #32]
}
 80082ea:	bf00      	nop
 80082ec:	371c      	adds	r7, #28
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b087      	sub	sp, #28
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	60f8      	str	r0, [r7, #12]
 80082fe:	60b9      	str	r1, [r7, #8]
 8008300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	f023 0210 	bic.w	r2, r3, #16
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	699b      	ldr	r3, [r3, #24]
 8008312:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6a1b      	ldr	r3, [r3, #32]
 8008318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008320:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	031b      	lsls	r3, r3, #12
 8008326:	697a      	ldr	r2, [r7, #20]
 8008328:	4313      	orrs	r3, r2
 800832a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008332:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	011b      	lsls	r3, r3, #4
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4313      	orrs	r3, r2
 800833c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	693a      	ldr	r2, [r7, #16]
 8008348:	621a      	str	r2, [r3, #32]
}
 800834a:	bf00      	nop
 800834c:	371c      	adds	r7, #28
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
 800835e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800836c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800836e:	683a      	ldr	r2, [r7, #0]
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4313      	orrs	r3, r2
 8008374:	f043 0307 	orr.w	r3, r3, #7
 8008378:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	609a      	str	r2, [r3, #8]
}
 8008380:	bf00      	nop
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	021a      	lsls	r2, r3, #8
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	431a      	orrs	r2, r3
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	609a      	str	r2, [r3, #8]
}
 80083c0:	bf00      	nop
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 031f 	and.w	r3, r3, #31
 80083de:	2201      	movs	r2, #1
 80083e0:	fa02 f303 	lsl.w	r3, r2, r3
 80083e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	6a1a      	ldr	r2, [r3, #32]
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	43db      	mvns	r3, r3
 80083ee:	401a      	ands	r2, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6a1a      	ldr	r2, [r3, #32]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	f003 031f 	and.w	r3, r3, #31
 80083fe:	6879      	ldr	r1, [r7, #4]
 8008400:	fa01 f303 	lsl.w	r3, r1, r3
 8008404:	431a      	orrs	r2, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
	...

08008418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008428:	2b01      	cmp	r3, #1
 800842a:	d101      	bne.n	8008430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800842c:	2302      	movs	r3, #2
 800842e:	e05a      	b.n	80084e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2202      	movs	r2, #2
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008456:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68fa      	ldr	r2, [r7, #12]
 8008468:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a21      	ldr	r2, [pc, #132]	; (80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d022      	beq.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800847c:	d01d      	beq.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a1d      	ldr	r2, [pc, #116]	; (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d018      	beq.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a1b      	ldr	r2, [pc, #108]	; (80084fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d013      	beq.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a1a      	ldr	r2, [pc, #104]	; (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d00e      	beq.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a18      	ldr	r2, [pc, #96]	; (8008504 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d009      	beq.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a17      	ldr	r2, [pc, #92]	; (8008508 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d004      	beq.n	80084ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a15      	ldr	r2, [pc, #84]	; (800850c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d10c      	bne.n	80084d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	68ba      	ldr	r2, [r7, #8]
 80084c8:	4313      	orrs	r3, r2
 80084ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f0:	4770      	bx	lr
 80084f2:	bf00      	nop
 80084f4:	40010000 	.word	0x40010000
 80084f8:	40000400 	.word	0x40000400
 80084fc:	40000800 	.word	0x40000800
 8008500:	40000c00 	.word	0x40000c00
 8008504:	40010400 	.word	0x40010400
 8008508:	40014000 	.word	0x40014000
 800850c:	40001800 	.word	0x40001800

08008510 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008518:	bf00      	nop
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008524:	b480      	push	{r7}
 8008526:	b083      	sub	sp, #12
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008538:	b084      	sub	sp, #16
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	f107 001c 	add.w	r0, r7, #28
 8008546:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	2b01      	cmp	r3, #1
 800854e:	d122      	bne.n	8008596 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008554:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	68db      	ldr	r3, [r3, #12]
 8008560:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800857a:	2b01      	cmp	r3, #1
 800857c:	d105      	bne.n	800858a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 f94a 	bl	8008824 <USB_CoreReset>
 8008590:	4603      	mov	r3, r0
 8008592:	73fb      	strb	r3, [r7, #15]
 8008594:	e01a      	b.n	80085cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f000 f93e 	bl	8008824 <USB_CoreReset>
 80085a8:	4603      	mov	r3, r0
 80085aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80085ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	639a      	str	r2, [r3, #56]	; 0x38
 80085be:	e005      	b.n	80085cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	2b01      	cmp	r3, #1
 80085d0:	d10b      	bne.n	80085ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	689b      	ldr	r3, [r3, #8]
 80085d6:	f043 0206 	orr.w	r2, r3, #6
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f043 0220 	orr.w	r2, r3, #32
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80085ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3710      	adds	r7, #16
 80085f0:	46bd      	mov	sp, r7
 80085f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80085f6:	b004      	add	sp, #16
 80085f8:	4770      	bx	lr

080085fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	689b      	ldr	r3, [r3, #8]
 8008606:	f043 0201 	orr.w	r2, r3, #1
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	370c      	adds	r7, #12
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800861c:	b480      	push	{r7}
 800861e:	b083      	sub	sp, #12
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	f023 0201 	bic.w	r2, r3, #1
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr

0800863e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b082      	sub	sp, #8
 8008642:	af00      	add	r7, sp, #0
 8008644:	6078      	str	r0, [r7, #4]
 8008646:	460b      	mov	r3, r1
 8008648:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	68db      	ldr	r3, [r3, #12]
 800864e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008656:	78fb      	ldrb	r3, [r7, #3]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d106      	bne.n	800866a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	60da      	str	r2, [r3, #12]
 8008668:	e00b      	b.n	8008682 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800866a:	78fb      	ldrb	r3, [r7, #3]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d106      	bne.n	800867e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	60da      	str	r2, [r3, #12]
 800867c:	e001      	b.n	8008682 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800867e:	2301      	movs	r3, #1
 8008680:	e003      	b.n	800868a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008682:	2032      	movs	r0, #50	; 0x32
 8008684:	f7fa f89e 	bl	80027c4 <HAL_Delay>

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
 800869c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800869e:	2300      	movs	r3, #0
 80086a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	019b      	lsls	r3, r3, #6
 80086a6:	f043 0220 	orr.w	r2, r3, #32
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3301      	adds	r3, #1
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4a09      	ldr	r2, [pc, #36]	; (80086dc <USB_FlushTxFifo+0x48>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d901      	bls.n	80086c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e006      	b.n	80086ce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	691b      	ldr	r3, [r3, #16]
 80086c4:	f003 0320 	and.w	r3, r3, #32
 80086c8:	2b20      	cmp	r3, #32
 80086ca:	d0f0      	beq.n	80086ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3714      	adds	r7, #20
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr
 80086da:	bf00      	nop
 80086dc:	00030d40 	.word	0x00030d40

080086e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80086e8:	2300      	movs	r3, #0
 80086ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2210      	movs	r2, #16
 80086f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	3301      	adds	r3, #1
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	4a09      	ldr	r2, [pc, #36]	; (8008720 <USB_FlushRxFifo+0x40>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d901      	bls.n	8008704 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008700:	2303      	movs	r3, #3
 8008702:	e006      	b.n	8008712 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	f003 0310 	and.w	r3, r3, #16
 800870c:	2b10      	cmp	r3, #16
 800870e:	d0f0      	beq.n	80086f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	00030d40 	.word	0x00030d40

08008724 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008724:	b480      	push	{r7}
 8008726:	b089      	sub	sp, #36	; 0x24
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	4611      	mov	r1, r2
 8008730:	461a      	mov	r2, r3
 8008732:	460b      	mov	r3, r1
 8008734:	71fb      	strb	r3, [r7, #7]
 8008736:	4613      	mov	r3, r2
 8008738:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008746:	2b00      	cmp	r3, #0
 8008748:	d11a      	bne.n	8008780 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800874a:	88bb      	ldrh	r3, [r7, #4]
 800874c:	3303      	adds	r3, #3
 800874e:	089b      	lsrs	r3, r3, #2
 8008750:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008752:	2300      	movs	r3, #0
 8008754:	61bb      	str	r3, [r7, #24]
 8008756:	e00f      	b.n	8008778 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008758:	79fb      	ldrb	r3, [r7, #7]
 800875a:	031a      	lsls	r2, r3, #12
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	4413      	add	r3, r2
 8008760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008764:	461a      	mov	r2, r3
 8008766:	69fb      	ldr	r3, [r7, #28]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	3304      	adds	r3, #4
 8008770:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	3301      	adds	r3, #1
 8008776:	61bb      	str	r3, [r7, #24]
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	429a      	cmp	r2, r3
 800877e:	d3eb      	bcc.n	8008758 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3724      	adds	r7, #36	; 0x24
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800878e:	b480      	push	{r7}
 8008790:	b089      	sub	sp, #36	; 0x24
 8008792:	af00      	add	r7, sp, #0
 8008794:	60f8      	str	r0, [r7, #12]
 8008796:	60b9      	str	r1, [r7, #8]
 8008798:	4613      	mov	r3, r2
 800879a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80087a4:	88fb      	ldrh	r3, [r7, #6]
 80087a6:	3303      	adds	r3, #3
 80087a8:	089b      	lsrs	r3, r3, #2
 80087aa:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80087ac:	2300      	movs	r3, #0
 80087ae:	61bb      	str	r3, [r7, #24]
 80087b0:	e00b      	b.n	80087ca <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087b8:	681a      	ldr	r2, [r3, #0]
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	3304      	adds	r3, #4
 80087c2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	3301      	adds	r3, #1
 80087c8:	61bb      	str	r3, [r7, #24]
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d3ef      	bcc.n	80087b2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80087d2:	69fb      	ldr	r3, [r7, #28]
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3724      	adds	r7, #36	; 0x24
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	695b      	ldr	r3, [r3, #20]
 80087ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	699b      	ldr	r3, [r3, #24]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4013      	ands	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80087f8:	68fb      	ldr	r3, [r7, #12]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008806:	b480      	push	{r7}
 8008808:	b083      	sub	sp, #12
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	f003 0301 	and.w	r3, r3, #1
}
 8008816:	4618      	mov	r0, r3
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
	...

08008824 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3301      	adds	r3, #1
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	4a13      	ldr	r2, [pc, #76]	; (8008888 <USB_CoreReset+0x64>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d901      	bls.n	8008842 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800883e:	2303      	movs	r3, #3
 8008840:	e01b      	b.n	800887a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	daf2      	bge.n	8008830 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f043 0201 	orr.w	r2, r3, #1
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	3301      	adds	r3, #1
 800885e:	60fb      	str	r3, [r7, #12]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	4a09      	ldr	r2, [pc, #36]	; (8008888 <USB_CoreReset+0x64>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d901      	bls.n	800886c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	e006      	b.n	800887a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	691b      	ldr	r3, [r3, #16]
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	2b01      	cmp	r3, #1
 8008876:	d0f0      	beq.n	800885a <USB_CoreReset+0x36>

  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	3714      	adds	r7, #20
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
 8008886:	bf00      	nop
 8008888:	00030d40 	.word	0x00030d40

0800888c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800888c:	b084      	sub	sp, #16
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	f107 001c 	add.w	r0, r7, #28
 800889a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80088a8:	461a      	mov	r2, r3
 80088aa:	2300      	movs	r3, #0
 80088ac:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088be:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ca:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d018      	beq.n	8008910 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80088de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d10a      	bne.n	80088fa <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80088e4:	68bb      	ldr	r3, [r7, #8]
 80088e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80088f2:	f043 0304 	orr.w	r3, r3, #4
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	e014      	b.n	8008924 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008908:	f023 0304 	bic.w	r3, r3, #4
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	e009      	b.n	8008924 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800891e:	f023 0304 	bic.w	r3, r3, #4
 8008922:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8008924:	2110      	movs	r1, #16
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f7ff feb4 	bl	8008694 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7ff fed7 	bl	80086e0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
 8008936:	e015      	b.n	8008964 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	4413      	add	r3, r2
 8008940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008944:	461a      	mov	r2, r3
 8008946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800894a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	015a      	lsls	r2, r3, #5
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	4413      	add	r3, r2
 8008954:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008958:	461a      	mov	r2, r3
 800895a:	2300      	movs	r3, #0
 800895c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3301      	adds	r3, #1
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	6a3b      	ldr	r3, [r7, #32]
 8008966:	68fa      	ldr	r2, [r7, #12]
 8008968:	429a      	cmp	r2, r3
 800896a:	d3e5      	bcc.n	8008938 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800896c:	2101      	movs	r1, #1
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f8ac 	bl	8008acc <USB_DriveVbus>

  HAL_Delay(200U);
 8008974:	20c8      	movs	r0, #200	; 0xc8
 8008976:	f7f9 ff25 	bl	80027c4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008986:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008990:	2b00      	cmp	r3, #0
 8008992:	d00b      	beq.n	80089ac <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f44f 7200 	mov.w	r2, #512	; 0x200
 800899a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a14      	ldr	r2, [pc, #80]	; (80089f0 <USB_HostInit+0x164>)
 80089a0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a13      	ldr	r2, [pc, #76]	; (80089f4 <USB_HostInit+0x168>)
 80089a6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80089aa:	e009      	b.n	80089c0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2280      	movs	r2, #128	; 0x80
 80089b0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a10      	ldr	r2, [pc, #64]	; (80089f8 <USB_HostInit+0x16c>)
 80089b6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a10      	ldr	r2, [pc, #64]	; (80089fc <USB_HostInit+0x170>)
 80089bc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80089c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d105      	bne.n	80089d2 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	f043 0210 	orr.w	r2, r3, #16
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	699a      	ldr	r2, [r3, #24]
 80089d6:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <USB_HostInit+0x174>)
 80089d8:	4313      	orrs	r3, r2
 80089da:	687a      	ldr	r2, [r7, #4]
 80089dc:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80089de:	2300      	movs	r3, #0
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3710      	adds	r7, #16
 80089e4:	46bd      	mov	sp, r7
 80089e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089ea:	b004      	add	sp, #16
 80089ec:	4770      	bx	lr
 80089ee:	bf00      	nop
 80089f0:	01000200 	.word	0x01000200
 80089f4:	00e00300 	.word	0x00e00300
 80089f8:	00600080 	.word	0x00600080
 80089fc:	004000e0 	.word	0x004000e0
 8008a00:	a3200008 	.word	0xa3200008

08008a04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
 8008a0c:	460b      	mov	r3, r1
 8008a0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008a22:	f023 0303 	bic.w	r3, r3, #3
 8008a26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	78fb      	ldrb	r3, [r7, #3]
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	68f9      	ldr	r1, [r7, #12]
 8008a38:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008a40:	78fb      	ldrb	r3, [r7, #3]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d107      	bne.n	8008a56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008a52:	6053      	str	r3, [r2, #4]
 8008a54:	e009      	b.n	8008a6a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8008a56:	78fb      	ldrb	r3, [r7, #3]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	d106      	bne.n	8008a6a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a62:	461a      	mov	r2, r3
 8008a64:	f241 7370 	movw	r3, #6000	; 0x1770
 8008a68:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3714      	adds	r7, #20
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b084      	sub	sp, #16
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008a84:	2300      	movs	r3, #0
 8008a86:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008a98:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008aa6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008aa8:	2064      	movs	r0, #100	; 0x64
 8008aaa:	f7f9 fe8b 	bl	80027c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008ab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008aba:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008abc:	200a      	movs	r0, #10
 8008abe:	f7f9 fe81 	bl	80027c4 <HAL_Delay>

  return HAL_OK;
 8008ac2:	2300      	movs	r3, #0
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3710      	adds	r7, #16
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b085      	sub	sp, #20
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008af0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d109      	bne.n	8008b10 <USB_DriveVbus+0x44>
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d106      	bne.n	8008b10 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b0a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008b0e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1a:	d109      	bne.n	8008b30 <USB_DriveVbus+0x64>
 8008b1c:	78fb      	ldrb	r3, [r7, #3]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d106      	bne.n	8008b30 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	68fa      	ldr	r2, [r7, #12]
 8008b26:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b2e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr

08008b3e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008b3e:	b480      	push	{r7}
 8008b40:	b085      	sub	sp, #20
 8008b42:	af00      	add	r7, sp, #0
 8008b44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	0c5b      	lsrs	r3, r3, #17
 8008b5c:	f003 0303 	and.w	r3, r3, #3
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	b29b      	uxth	r3, r3
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3714      	adds	r7, #20
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr
	...

08008b90 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b088      	sub	sp, #32
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	4608      	mov	r0, r1
 8008b9a:	4611      	mov	r1, r2
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	70fb      	strb	r3, [r7, #3]
 8008ba2:	460b      	mov	r3, r1
 8008ba4:	70bb      	strb	r3, [r7, #2]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008baa:	2300      	movs	r3, #0
 8008bac:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bc4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008bc6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	d87e      	bhi.n	8008ccc <USB_HC_Init+0x13c>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <USB_HC_Init+0x44>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008be5 	.word	0x08008be5
 8008bd8:	08008c8f 	.word	0x08008c8f
 8008bdc:	08008be5 	.word	0x08008be5
 8008be0:	08008c51 	.word	0x08008c51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008be4:	78fb      	ldrb	r3, [r7, #3]
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	f240 439d 	movw	r3, #1181	; 0x49d
 8008bf6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008bf8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	da10      	bge.n	8008c22 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	015a      	lsls	r2, r3, #5
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	4413      	add	r3, r2
 8008c08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	0151      	lsls	r1, r2, #5
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	440a      	add	r2, r1
 8008c16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c1e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008c20:	e057      	b.n	8008cd2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d051      	beq.n	8008cd2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	015a      	lsls	r2, r3, #5
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	4413      	add	r3, r2
 8008c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	78fa      	ldrb	r2, [r7, #3]
 8008c3e:	0151      	lsls	r1, r2, #5
 8008c40:	693a      	ldr	r2, [r7, #16]
 8008c42:	440a      	add	r2, r1
 8008c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008c4c:	60d3      	str	r3, [r2, #12]
      break;
 8008c4e:	e040      	b.n	8008cd2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	015a      	lsls	r2, r3, #5
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	f240 639d 	movw	r3, #1693	; 0x69d
 8008c62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008c64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	da34      	bge.n	8008cd6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	78fa      	ldrb	r2, [r7, #3]
 8008c7c:	0151      	lsls	r1, r2, #5
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	440a      	add	r2, r1
 8008c82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008c8c:	e023      	b.n	8008cd6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008c8e:	78fb      	ldrb	r3, [r7, #3]
 8008c90:	015a      	lsls	r2, r3, #5
 8008c92:	693b      	ldr	r3, [r7, #16]
 8008c94:	4413      	add	r3, r2
 8008c96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	f240 2325 	movw	r3, #549	; 0x225
 8008ca0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008ca2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	da17      	bge.n	8008cda <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008caa:	78fb      	ldrb	r3, [r7, #3]
 8008cac:	015a      	lsls	r2, r3, #5
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	4413      	add	r3, r2
 8008cb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	0151      	lsls	r1, r2, #5
 8008cbc:	693a      	ldr	r2, [r7, #16]
 8008cbe:	440a      	add	r2, r1
 8008cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008cc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008cca:	e006      	b.n	8008cda <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	77fb      	strb	r3, [r7, #31]
      break;
 8008cd0:	e004      	b.n	8008cdc <USB_HC_Init+0x14c>
      break;
 8008cd2:	bf00      	nop
 8008cd4:	e002      	b.n	8008cdc <USB_HC_Init+0x14c>
      break;
 8008cd6:	bf00      	nop
 8008cd8:	e000      	b.n	8008cdc <USB_HC_Init+0x14c>
      break;
 8008cda:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ce2:	699a      	ldr	r2, [r3, #24]
 8008ce4:	78fb      	ldrb	r3, [r7, #3]
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	2101      	movs	r1, #1
 8008cec:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf0:	6939      	ldr	r1, [r7, #16]
 8008cf2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	699b      	ldr	r3, [r3, #24]
 8008cfe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008d06:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	da03      	bge.n	8008d16 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d12:	61bb      	str	r3, [r7, #24]
 8008d14:	e001      	b.n	8008d1a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8008d16:	2300      	movs	r3, #0
 8008d18:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f7ff ff0f 	bl	8008b3e <USB_GetHostSpeed>
 8008d20:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008d22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d106      	bne.n	8008d38 <USB_HC_Init+0x1a8>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d003      	beq.n	8008d38 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008d34:	617b      	str	r3, [r7, #20]
 8008d36:	e001      	b.n	8008d3c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d3c:	787b      	ldrb	r3, [r7, #1]
 8008d3e:	059b      	lsls	r3, r3, #22
 8008d40:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d44:	78bb      	ldrb	r3, [r7, #2]
 8008d46:	02db      	lsls	r3, r3, #11
 8008d48:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d4c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d4e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d52:	049b      	lsls	r3, r3, #18
 8008d54:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008d58:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d5a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008d5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008d60:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d62:	69bb      	ldr	r3, [r7, #24]
 8008d64:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d66:	78fb      	ldrb	r3, [r7, #3]
 8008d68:	0159      	lsls	r1, r3, #5
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	440b      	add	r3, r1
 8008d6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d72:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008d78:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8008d7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d10f      	bne.n	8008da2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	015a      	lsls	r2, r3, #5
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	4413      	add	r3, r2
 8008d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	78fa      	ldrb	r2, [r7, #3]
 8008d92:	0151      	lsls	r1, r2, #5
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	440a      	add	r2, r1
 8008d98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008d9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008da0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008da2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3720      	adds	r7, #32
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08c      	sub	sp, #48	; 0x30
 8008db0:	af02      	add	r7, sp, #8
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dc8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d02d      	beq.n	8008e32 <USB_HC_StartXfer+0x86>
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	791b      	ldrb	r3, [r3, #4]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d129      	bne.n	8008e32 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d117      	bne.n	8008e14 <USB_HC_StartXfer+0x68>
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	79db      	ldrb	r3, [r3, #7]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <USB_HC_StartXfer+0x48>
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	79db      	ldrb	r3, [r3, #7]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d10f      	bne.n	8008e14 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	015a      	lsls	r2, r3, #5
 8008df8:	6a3b      	ldr	r3, [r7, #32]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	69fa      	ldr	r2, [r7, #28]
 8008e04:	0151      	lsls	r1, r2, #5
 8008e06:	6a3a      	ldr	r2, [r7, #32]
 8008e08:	440a      	add	r2, r1
 8008e0a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e12:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008e14:	79fb      	ldrb	r3, [r7, #7]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10b      	bne.n	8008e32 <USB_HC_StartXfer+0x86>
 8008e1a:	68bb      	ldr	r3, [r7, #8]
 8008e1c:	795b      	ldrb	r3, [r3, #5]
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d107      	bne.n	8008e32 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	4619      	mov	r1, r3
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	f000 fa2f 	bl	800928c <USB_DoPing>
      return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	e0f8      	b.n	8009024 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d018      	beq.n	8008e6c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	8912      	ldrh	r2, [r2, #8]
 8008e42:	4413      	add	r3, r2
 8008e44:	3b01      	subs	r3, #1
 8008e46:	68ba      	ldr	r2, [r7, #8]
 8008e48:	8912      	ldrh	r2, [r2, #8]
 8008e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008e4e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8008e50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008e52:	8b7b      	ldrh	r3, [r7, #26]
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d90b      	bls.n	8008e70 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8008e58:	8b7b      	ldrh	r3, [r7, #26]
 8008e5a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	8912      	ldrh	r2, [r2, #8]
 8008e62:	fb02 f203 	mul.w	r2, r2, r3
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	611a      	str	r2, [r3, #16]
 8008e6a:	e001      	b.n	8008e70 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	78db      	ldrb	r3, [r3, #3]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d007      	beq.n	8008e88 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008e78:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e7a:	68ba      	ldr	r2, [r7, #8]
 8008e7c:	8912      	ldrh	r2, [r2, #8]
 8008e7e:	fb02 f203 	mul.w	r2, r2, r3
 8008e82:	68bb      	ldr	r3, [r7, #8]
 8008e84:	611a      	str	r2, [r3, #16]
 8008e86:	e003      	b.n	8008e90 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	695a      	ldr	r2, [r3, #20]
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008e98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008e9a:	04d9      	lsls	r1, r3, #19
 8008e9c:	4b63      	ldr	r3, [pc, #396]	; (800902c <USB_HC_StartXfer+0x280>)
 8008e9e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ea0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	7a9b      	ldrb	r3, [r3, #10]
 8008ea6:	075b      	lsls	r3, r3, #29
 8008ea8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008eac:	69f9      	ldr	r1, [r7, #28]
 8008eae:	0148      	lsls	r0, r1, #5
 8008eb0:	6a39      	ldr	r1, [r7, #32]
 8008eb2:	4401      	add	r1, r0
 8008eb4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008eb8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008eba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d009      	beq.n	8008ed6 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	68d9      	ldr	r1, [r3, #12]
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	015a      	lsls	r2, r3, #5
 8008eca:	6a3b      	ldr	r3, [r7, #32]
 8008ecc:	4413      	add	r3, r2
 8008ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ed2:	460a      	mov	r2, r1
 8008ed4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008ed6:	6a3b      	ldr	r3, [r7, #32]
 8008ed8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 0301 	and.w	r3, r3, #1
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	bf0c      	ite	eq
 8008ee6:	2301      	moveq	r3, #1
 8008ee8:	2300      	movne	r3, #0
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	6a3b      	ldr	r3, [r7, #32]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	0151      	lsls	r1, r2, #5
 8008f00:	6a3a      	ldr	r2, [r7, #32]
 8008f02:	440a      	add	r2, r1
 8008f04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008f08:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008f0c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	7e7b      	ldrb	r3, [r7, #25]
 8008f1e:	075b      	lsls	r3, r3, #29
 8008f20:	69f9      	ldr	r1, [r7, #28]
 8008f22:	0148      	lsls	r0, r1, #5
 8008f24:	6a39      	ldr	r1, [r7, #32]
 8008f26:	4401      	add	r1, r0
 8008f28:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f46:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	78db      	ldrb	r3, [r3, #3]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d004      	beq.n	8008f5a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f56:	613b      	str	r3, [r7, #16]
 8008f58:	e003      	b.n	8008f62 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008f5a:	693b      	ldr	r3, [r7, #16]
 8008f5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008f60:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f68:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	6a3b      	ldr	r3, [r7, #32]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f76:	461a      	mov	r2, r3
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d001      	beq.n	8008f86 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	e04e      	b.n	8009024 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	78db      	ldrb	r3, [r3, #3]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d149      	bne.n	8009022 <USB_HC_StartXfer+0x276>
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	695b      	ldr	r3, [r3, #20]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d045      	beq.n	8009022 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	79db      	ldrb	r3, [r3, #7]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d830      	bhi.n	8009000 <USB_HC_StartXfer+0x254>
 8008f9e:	a201      	add	r2, pc, #4	; (adr r2, 8008fa4 <USB_HC_StartXfer+0x1f8>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008fb5 	.word	0x08008fb5
 8008fa8:	08008fd9 	.word	0x08008fd9
 8008fac:	08008fb5 	.word	0x08008fb5
 8008fb0:	08008fd9 	.word	0x08008fd9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	3303      	adds	r3, #3
 8008fba:	089b      	lsrs	r3, r3, #2
 8008fbc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008fbe:	8afa      	ldrh	r2, [r7, #22]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	b29b      	uxth	r3, r3
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d91c      	bls.n	8009004 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	f043 0220 	orr.w	r2, r3, #32
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008fd6:	e015      	b.n	8009004 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	695b      	ldr	r3, [r3, #20]
 8008fdc:	3303      	adds	r3, #3
 8008fde:	089b      	lsrs	r3, r3, #2
 8008fe0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008fe2:	8afa      	ldrh	r2, [r7, #22]
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008fea:	691b      	ldr	r3, [r3, #16]
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d90a      	bls.n	8009008 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	619a      	str	r2, [r3, #24]
        }
        break;
 8008ffe:	e003      	b.n	8009008 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8009000:	bf00      	nop
 8009002:	e002      	b.n	800900a <USB_HC_StartXfer+0x25e>
        break;
 8009004:	bf00      	nop
 8009006:	e000      	b.n	800900a <USB_HC_StartXfer+0x25e>
        break;
 8009008:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	68d9      	ldr	r1, [r3, #12]
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	785a      	ldrb	r2, [r3, #1]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	b29b      	uxth	r3, r3
 8009018:	2000      	movs	r0, #0
 800901a:	9000      	str	r0, [sp, #0]
 800901c:	68f8      	ldr	r0, [r7, #12]
 800901e:	f7ff fb81 	bl	8008724 <USB_WritePacket>
  }

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3728      	adds	r7, #40	; 0x28
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	1ff80000 	.word	0x1ff80000

08009030 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	b29b      	uxth	r3, r3
}
 8009046:	4618      	mov	r0, r3
 8009048:	3714      	adds	r7, #20
 800904a:	46bd      	mov	sp, r7
 800904c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009050:	4770      	bx	lr

08009052 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009052:	b480      	push	{r7}
 8009054:	b089      	sub	sp, #36	; 0x24
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8009062:	78fb      	ldrb	r3, [r7, #3]
 8009064:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8009066:	2300      	movs	r3, #0
 8009068:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	4413      	add	r3, r2
 8009072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	0c9b      	lsrs	r3, r3, #18
 800907a:	f003 0303 	and.w	r3, r3, #3
 800907e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	015a      	lsls	r2, r3, #5
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	4413      	add	r3, r2
 8009088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	0fdb      	lsrs	r3, r3, #31
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f003 0320 	and.w	r3, r3, #32
 800909e:	2b20      	cmp	r3, #32
 80090a0:	d104      	bne.n	80090ac <USB_HC_Halt+0x5a>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d101      	bne.n	80090ac <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80090a8:	2300      	movs	r3, #0
 80090aa:	e0e8      	b.n	800927e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d002      	beq.n	80090b8 <USB_HC_Halt+0x66>
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d173      	bne.n	80091a0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	015a      	lsls	r2, r3, #5
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	4413      	add	r3, r2
 80090c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	697a      	ldr	r2, [r7, #20]
 80090c8:	0151      	lsls	r1, r2, #5
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	440a      	add	r2, r1
 80090ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80090d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80090d6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f003 0320 	and.w	r3, r3, #32
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	f040 80cb 	bne.w	800927c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d143      	bne.n	800917a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	015a      	lsls	r2, r3, #5
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	4413      	add	r3, r2
 80090fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	697a      	ldr	r2, [r7, #20]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	440a      	add	r2, r1
 8009108:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800910c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009110:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	015a      	lsls	r2, r3, #5
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	4413      	add	r3, r2
 800911a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	0151      	lsls	r1, r2, #5
 8009124:	69ba      	ldr	r2, [r7, #24]
 8009126:	440a      	add	r2, r1
 8009128:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800912c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009130:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	015a      	lsls	r2, r3, #5
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	4413      	add	r3, r2
 800913a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	697a      	ldr	r2, [r7, #20]
 8009142:	0151      	lsls	r1, r2, #5
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	440a      	add	r2, r1
 8009148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800914c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009150:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	3301      	adds	r3, #1
 8009156:	61fb      	str	r3, [r7, #28]
 8009158:	69fb      	ldr	r3, [r7, #28]
 800915a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800915e:	d81d      	bhi.n	800919c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	015a      	lsls	r2, r3, #5
 8009164:	69bb      	ldr	r3, [r7, #24]
 8009166:	4413      	add	r3, r2
 8009168:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009176:	d0ec      	beq.n	8009152 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009178:	e080      	b.n	800927c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	015a      	lsls	r2, r3, #5
 800917e:	69bb      	ldr	r3, [r7, #24]
 8009180:	4413      	add	r3, r2
 8009182:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	697a      	ldr	r2, [r7, #20]
 800918a:	0151      	lsls	r1, r2, #5
 800918c:	69ba      	ldr	r2, [r7, #24]
 800918e:	440a      	add	r2, r1
 8009190:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009194:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009198:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800919a:	e06f      	b.n	800927c <USB_HC_Halt+0x22a>
            break;
 800919c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800919e:	e06d      	b.n	800927c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	015a      	lsls	r2, r3, #5
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	4413      	add	r3, r2
 80091a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	0151      	lsls	r1, r2, #5
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	440a      	add	r2, r1
 80091b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091be:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091c6:	691b      	ldr	r3, [r3, #16]
 80091c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d143      	bne.n	8009258 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	015a      	lsls	r2, r3, #5
 80091d4:	69bb      	ldr	r3, [r7, #24]
 80091d6:	4413      	add	r3, r2
 80091d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	0151      	lsls	r1, r2, #5
 80091e2:	69ba      	ldr	r2, [r7, #24]
 80091e4:	440a      	add	r2, r1
 80091e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80091ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091ee:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	697a      	ldr	r2, [r7, #20]
 8009200:	0151      	lsls	r1, r2, #5
 8009202:	69ba      	ldr	r2, [r7, #24]
 8009204:	440a      	add	r2, r1
 8009206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800920a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800920e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	015a      	lsls	r2, r3, #5
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	4413      	add	r3, r2
 8009218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	697a      	ldr	r2, [r7, #20]
 8009220:	0151      	lsls	r1, r2, #5
 8009222:	69ba      	ldr	r2, [r7, #24]
 8009224:	440a      	add	r2, r1
 8009226:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800922a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800922e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8009230:	69fb      	ldr	r3, [r7, #28]
 8009232:	3301      	adds	r3, #1
 8009234:	61fb      	str	r3, [r7, #28]
 8009236:	69fb      	ldr	r3, [r7, #28]
 8009238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800923c:	d81d      	bhi.n	800927a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	015a      	lsls	r2, r3, #5
 8009242:	69bb      	ldr	r3, [r7, #24]
 8009244:	4413      	add	r3, r2
 8009246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009254:	d0ec      	beq.n	8009230 <USB_HC_Halt+0x1de>
 8009256:	e011      	b.n	800927c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	4413      	add	r3, r2
 8009260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	0151      	lsls	r1, r2, #5
 800926a:	69ba      	ldr	r2, [r7, #24]
 800926c:	440a      	add	r2, r1
 800926e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	e000      	b.n	800927c <USB_HC_Halt+0x22a>
          break;
 800927a:	bf00      	nop
    }
  }

  return HAL_OK;
 800927c:	2300      	movs	r3, #0
}
 800927e:	4618      	mov	r0, r3
 8009280:	3724      	adds	r7, #36	; 0x24
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
	...

0800928c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80092a0:	2301      	movs	r3, #1
 80092a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	04da      	lsls	r2, r3, #19
 80092a8:	4b15      	ldr	r3, [pc, #84]	; (8009300 <USB_DoPing+0x74>)
 80092aa:	4013      	ands	r3, r2
 80092ac:	693a      	ldr	r2, [r7, #16]
 80092ae:	0151      	lsls	r1, r2, #5
 80092b0:	697a      	ldr	r2, [r7, #20]
 80092b2:	440a      	add	r2, r1
 80092b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092bc:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80092be:	693b      	ldr	r3, [r7, #16]
 80092c0:	015a      	lsls	r2, r3, #5
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	4413      	add	r3, r2
 80092c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80092d4:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80092dc:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ea:	461a      	mov	r2, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop
 8009300:	1ff80000 	.word	0x1ff80000

08009304 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8009310:	2300      	movs	r3, #0
 8009312:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff f981 	bl	800861c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800931a:	2110      	movs	r1, #16
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f7ff f9b9 	bl	8008694 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff f9dc 	bl	80086e0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8009328:	2300      	movs	r3, #0
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	e01f      	b.n	800936e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	4413      	add	r3, r2
 8009336:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009344:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800934c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009354:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	015a      	lsls	r2, r3, #5
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	4413      	add	r3, r2
 800935e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009362:	461a      	mov	r2, r3
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	3301      	adds	r3, #1
 800936c:	613b      	str	r3, [r7, #16]
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	2b0f      	cmp	r3, #15
 8009372:	d9dc      	bls.n	800932e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009374:	2300      	movs	r3, #0
 8009376:	613b      	str	r3, [r7, #16]
 8009378:	e034      	b.n	80093e4 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	015a      	lsls	r2, r3, #5
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	4413      	add	r3, r2
 8009382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009390:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009398:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80093a0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	015a      	lsls	r2, r3, #5
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	4413      	add	r3, r2
 80093aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ae:	461a      	mov	r2, r3
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	3301      	adds	r3, #1
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093c0:	d80c      	bhi.n	80093dc <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093d8:	d0ec      	beq.n	80093b4 <USB_StopHost+0xb0>
 80093da:	e000      	b.n	80093de <USB_StopHost+0xda>
        break;
 80093dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	3301      	adds	r3, #1
 80093e2:	613b      	str	r3, [r7, #16]
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	2b0f      	cmp	r3, #15
 80093e8:	d9c7      	bls.n	800937a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80093f0:	461a      	mov	r2, r3
 80093f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff f8fa 	bl	80085fa <USB_EnableGlobalInt>

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009410:	b590      	push	{r4, r7, lr}
 8009412:	b089      	sub	sp, #36	; 0x24
 8009414:	af04      	add	r7, sp, #16
 8009416:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009418:	2301      	movs	r3, #1
 800941a:	2202      	movs	r2, #2
 800941c:	2102      	movs	r1, #2
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 fc66 	bl	8009cf0 <USBH_FindInterface>
 8009424:	4603      	mov	r3, r0
 8009426:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	2bff      	cmp	r3, #255	; 0xff
 800942c:	d002      	beq.n	8009434 <USBH_CDC_InterfaceInit+0x24>
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d901      	bls.n	8009438 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009434:	2302      	movs	r3, #2
 8009436:	e13d      	b.n	80096b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009438:	7bfb      	ldrb	r3, [r7, #15]
 800943a:	4619      	mov	r1, r3
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fc3b 	bl	8009cb8 <USBH_SelectInterface>
 8009442:	4603      	mov	r3, r0
 8009444:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009446:	7bbb      	ldrb	r3, [r7, #14]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800944c:	2302      	movs	r3, #2
 800944e:	e131      	b.n	80096b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009456:	2050      	movs	r0, #80	; 0x50
 8009458:	f002 fa00 	bl	800b85c <malloc>
 800945c:	4603      	mov	r3, r0
 800945e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d101      	bne.n	8009474 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009470:	2302      	movs	r3, #2
 8009472:	e11f      	b.n	80096b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009474:	2250      	movs	r2, #80	; 0x50
 8009476:	2100      	movs	r1, #0
 8009478:	68b8      	ldr	r0, [r7, #8]
 800947a:	f002 f9ff 	bl	800b87c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800947e:	7bfb      	ldrb	r3, [r7, #15]
 8009480:	687a      	ldr	r2, [r7, #4]
 8009482:	211a      	movs	r1, #26
 8009484:	fb01 f303 	mul.w	r3, r1, r3
 8009488:	4413      	add	r3, r2
 800948a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	b25b      	sxtb	r3, r3
 8009492:	2b00      	cmp	r3, #0
 8009494:	da15      	bge.n	80094c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	211a      	movs	r1, #26
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	4413      	add	r3, r2
 80094a2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80094a6:	781a      	ldrb	r2, [r3, #0]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80094ac:	7bfb      	ldrb	r3, [r7, #15]
 80094ae:	687a      	ldr	r2, [r7, #4]
 80094b0:	211a      	movs	r1, #26
 80094b2:	fb01 f303 	mul.w	r3, r1, r3
 80094b6:	4413      	add	r3, r2
 80094b8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80094bc:	881a      	ldrh	r2, [r3, #0]
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	4619      	mov	r1, r3
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f001 fe32 	bl	800b132 <USBH_AllocPipe>
 80094ce:	4603      	mov	r3, r0
 80094d0:	461a      	mov	r2, r3
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	7819      	ldrb	r1, [r3, #0]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	7858      	ldrb	r0, [r3, #1]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	8952      	ldrh	r2, [r2, #10]
 80094ee:	9202      	str	r2, [sp, #8]
 80094f0:	2203      	movs	r2, #3
 80094f2:	9201      	str	r2, [sp, #4]
 80094f4:	9300      	str	r3, [sp, #0]
 80094f6:	4623      	mov	r3, r4
 80094f8:	4602      	mov	r2, r0
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 fdea 	bl	800b0d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	2200      	movs	r2, #0
 8009506:	4619      	mov	r1, r3
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f002 f8f9 	bl	800b700 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800950e:	2300      	movs	r3, #0
 8009510:	2200      	movs	r2, #0
 8009512:	210a      	movs	r1, #10
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fbeb 	bl	8009cf0 <USBH_FindInterface>
 800951a:	4603      	mov	r3, r0
 800951c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800951e:	7bfb      	ldrb	r3, [r7, #15]
 8009520:	2bff      	cmp	r3, #255	; 0xff
 8009522:	d002      	beq.n	800952a <USBH_CDC_InterfaceInit+0x11a>
 8009524:	7bfb      	ldrb	r3, [r7, #15]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d901      	bls.n	800952e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800952a:	2302      	movs	r3, #2
 800952c:	e0c2      	b.n	80096b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800952e:	7bfb      	ldrb	r3, [r7, #15]
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	211a      	movs	r1, #26
 8009534:	fb01 f303 	mul.w	r3, r1, r3
 8009538:	4413      	add	r3, r2
 800953a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800953e:	781b      	ldrb	r3, [r3, #0]
 8009540:	b25b      	sxtb	r3, r3
 8009542:	2b00      	cmp	r3, #0
 8009544:	da16      	bge.n	8009574 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009546:	7bfb      	ldrb	r3, [r7, #15]
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	211a      	movs	r1, #26
 800954c:	fb01 f303 	mul.w	r3, r1, r3
 8009550:	4413      	add	r3, r2
 8009552:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009556:	781a      	ldrb	r2, [r3, #0]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800955c:	7bfb      	ldrb	r3, [r7, #15]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	211a      	movs	r1, #26
 8009562:	fb01 f303 	mul.w	r3, r1, r3
 8009566:	4413      	add	r3, r2
 8009568:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800956c:	881a      	ldrh	r2, [r3, #0]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	835a      	strh	r2, [r3, #26]
 8009572:	e015      	b.n	80095a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009574:	7bfb      	ldrb	r3, [r7, #15]
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	211a      	movs	r1, #26
 800957a:	fb01 f303 	mul.w	r3, r1, r3
 800957e:	4413      	add	r3, r2
 8009580:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009584:	781a      	ldrb	r2, [r3, #0]
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	211a      	movs	r1, #26
 8009590:	fb01 f303 	mul.w	r3, r1, r3
 8009594:	4413      	add	r3, r2
 8009596:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800959a:	881a      	ldrh	r2, [r3, #0]
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	687a      	ldr	r2, [r7, #4]
 80095a4:	211a      	movs	r1, #26
 80095a6:	fb01 f303 	mul.w	r3, r1, r3
 80095aa:	4413      	add	r3, r2
 80095ac:	f203 3356 	addw	r3, r3, #854	; 0x356
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	b25b      	sxtb	r3, r3
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	da16      	bge.n	80095e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	211a      	movs	r1, #26
 80095be:	fb01 f303 	mul.w	r3, r1, r3
 80095c2:	4413      	add	r3, r2
 80095c4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80095c8:	781a      	ldrb	r2, [r3, #0]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	211a      	movs	r1, #26
 80095d4:	fb01 f303 	mul.w	r3, r1, r3
 80095d8:	4413      	add	r3, r2
 80095da:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80095de:	881a      	ldrh	r2, [r3, #0]
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	835a      	strh	r2, [r3, #26]
 80095e4:	e015      	b.n	8009612 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	211a      	movs	r1, #26
 80095ec:	fb01 f303 	mul.w	r3, r1, r3
 80095f0:	4413      	add	r3, r2
 80095f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 80095f6:	781a      	ldrb	r2, [r3, #0]
 80095f8:	68bb      	ldr	r3, [r7, #8]
 80095fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	211a      	movs	r1, #26
 8009602:	fb01 f303 	mul.w	r3, r1, r3
 8009606:	4413      	add	r3, r2
 8009608:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800960c:	881a      	ldrh	r2, [r3, #0]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	7b9b      	ldrb	r3, [r3, #14]
 8009616:	4619      	mov	r1, r3
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f001 fd8a 	bl	800b132 <USBH_AllocPipe>
 800961e:	4603      	mov	r3, r0
 8009620:	461a      	mov	r2, r3
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	7bdb      	ldrb	r3, [r3, #15]
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f001 fd80 	bl	800b132 <USBH_AllocPipe>
 8009632:	4603      	mov	r3, r0
 8009634:	461a      	mov	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	7b59      	ldrb	r1, [r3, #13]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	7b98      	ldrb	r0, [r3, #14]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	8b12      	ldrh	r2, [r2, #24]
 8009652:	9202      	str	r2, [sp, #8]
 8009654:	2202      	movs	r2, #2
 8009656:	9201      	str	r2, [sp, #4]
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	4623      	mov	r3, r4
 800965c:	4602      	mov	r2, r0
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f001 fd38 	bl	800b0d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	7b19      	ldrb	r1, [r3, #12]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	7bd8      	ldrb	r0, [r3, #15]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	8b52      	ldrh	r2, [r2, #26]
 800967c:	9202      	str	r2, [sp, #8]
 800967e:	2202      	movs	r2, #2
 8009680:	9201      	str	r2, [sp, #4]
 8009682:	9300      	str	r3, [sp, #0]
 8009684:	4623      	mov	r3, r4
 8009686:	4602      	mov	r2, r0
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f001 fd23 	bl	800b0d4 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2200      	movs	r2, #0
 8009692:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	7b5b      	ldrb	r3, [r3, #13]
 800969a:	2200      	movs	r2, #0
 800969c:	4619      	mov	r1, r3
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f002 f82e 	bl	800b700 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	7b1b      	ldrb	r3, [r3, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f002 f827 	bl	800b700 <USBH_LL_SetToggle>

  return USBH_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd90      	pop	{r4, r7, pc}

080096bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80096ca:	69db      	ldr	r3, [r3, #28]
 80096cc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	781b      	ldrb	r3, [r3, #0]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00e      	beq.n	80096f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	4619      	mov	r1, r3
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 fd18 	bl	800b112 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 fd43 	bl	800b174 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	2200      	movs	r2, #0
 80096f2:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	7b1b      	ldrb	r3, [r3, #12]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d00e      	beq.n	800971a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	7b1b      	ldrb	r3, [r3, #12]
 8009700:	4619      	mov	r1, r3
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f001 fd05 	bl	800b112 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	7b1b      	ldrb	r3, [r3, #12]
 800970c:	4619      	mov	r1, r3
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f001 fd30 	bl	800b174 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	7b5b      	ldrb	r3, [r3, #13]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00e      	beq.n	8009740 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	7b5b      	ldrb	r3, [r3, #13]
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f001 fcf2 	bl	800b112 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	7b5b      	ldrb	r3, [r3, #13]
 8009732:	4619      	mov	r1, r3
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f001 fd1d 	bl	800b174 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009746:	69db      	ldr	r3, [r3, #28]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00b      	beq.n	8009764 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	4618      	mov	r0, r3
 8009756:	f002 f889 	bl	800b86c <free>
    phost->pActiveClass->pData = 0U;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009760:	2200      	movs	r2, #0
 8009762:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009764:	2300      	movs	r3, #0
}
 8009766:	4618      	mov	r0, r3
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}

0800976e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	3340      	adds	r3, #64	; 0x40
 8009784:	4619      	mov	r1, r3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f8b1 	bl	80098ee <GetLineCoding>
 800978c:	4603      	mov	r3, r0
 800978e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009790:	7afb      	ldrb	r3, [r7, #11]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d105      	bne.n	80097a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800979c:	2102      	movs	r1, #2
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80097a2:	7afb      	ldrb	r3, [r7, #11]
}
 80097a4:	4618      	mov	r0, r3
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80097b4:	2301      	movs	r3, #1
 80097b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097c2:	69db      	ldr	r3, [r3, #28]
 80097c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80097cc:	2b04      	cmp	r3, #4
 80097ce:	d877      	bhi.n	80098c0 <USBH_CDC_Process+0x114>
 80097d0:	a201      	add	r2, pc, #4	; (adr r2, 80097d8 <USBH_CDC_Process+0x2c>)
 80097d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097d6:	bf00      	nop
 80097d8:	080097ed 	.word	0x080097ed
 80097dc:	080097f3 	.word	0x080097f3
 80097e0:	08009823 	.word	0x08009823
 80097e4:	08009897 	.word	0x08009897
 80097e8:	080098a5 	.word	0x080098a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73fb      	strb	r3, [r7, #15]
      break;
 80097f0:	e06d      	b.n	80098ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097f6:	4619      	mov	r1, r3
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f897 	bl	800992c <SetLineCoding>
 80097fe:	4603      	mov	r3, r0
 8009800:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2202      	movs	r2, #2
 800980c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009810:	e058      	b.n	80098c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009812:	7bbb      	ldrb	r3, [r7, #14]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d055      	beq.n	80098c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	2204      	movs	r2, #4
 800981c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009820:	e050      	b.n	80098c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	3340      	adds	r3, #64	; 0x40
 8009826:	4619      	mov	r1, r3
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 f860 	bl	80098ee <GetLineCoding>
 800982e:	4603      	mov	r3, r0
 8009830:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009832:	7bbb      	ldrb	r3, [r7, #14]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d126      	bne.n	8009886 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800984a:	791b      	ldrb	r3, [r3, #4]
 800984c:	429a      	cmp	r2, r3
 800984e:	d13b      	bne.n	80098c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800985a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800985c:	429a      	cmp	r2, r3
 800985e:	d133      	bne.n	80098c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009860:	68bb      	ldr	r3, [r7, #8]
 8009862:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009866:	68bb      	ldr	r3, [r7, #8]
 8009868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800986a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800986c:	429a      	cmp	r2, r3
 800986e:	d12b      	bne.n	80098c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009878:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800987a:	429a      	cmp	r2, r3
 800987c:	d124      	bne.n	80098c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f958 	bl	8009b34 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009884:	e020      	b.n	80098c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009886:	7bbb      	ldrb	r3, [r7, #14]
 8009888:	2b01      	cmp	r3, #1
 800988a:	d01d      	beq.n	80098c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	2204      	movs	r2, #4
 8009890:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009894:	e018      	b.n	80098c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f867 	bl	800996a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f000 f8da 	bl	8009a56 <CDC_ProcessReception>
      break;
 80098a2:	e014      	b.n	80098ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80098a4:	2100      	movs	r1, #0
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 ffe3 	bl	800a872 <USBH_ClrFeature>
 80098ac:	4603      	mov	r3, r0
 80098ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80098b0:	7bbb      	ldrb	r3, [r7, #14]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d10a      	bne.n	80098cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80098be:	e005      	b.n	80098cc <USBH_CDC_Process+0x120>

    default:
      break;
 80098c0:	bf00      	nop
 80098c2:	e004      	b.n	80098ce <USBH_CDC_Process+0x122>
      break;
 80098c4:	bf00      	nop
 80098c6:	e002      	b.n	80098ce <USBH_CDC_Process+0x122>
      break;
 80098c8:	bf00      	nop
 80098ca:	e000      	b.n	80098ce <USBH_CDC_Process+0x122>
      break;
 80098cc:	bf00      	nop

  }

  return status;
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	370c      	adds	r7, #12
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80098ee:	b580      	push	{r7, lr}
 80098f0:	b082      	sub	sp, #8
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
 80098f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	22a1      	movs	r2, #161	; 0xa1
 80098fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2221      	movs	r2, #33	; 0x21
 8009902:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2207      	movs	r2, #7
 8009914:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2207      	movs	r2, #7
 800991a:	4619      	mov	r1, r3
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 f988 	bl	800ac32 <USBH_CtlReq>
 8009922:	4603      	mov	r3, r0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	2221      	movs	r2, #33	; 0x21
 800993a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2220      	movs	r2, #32
 8009940:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2200      	movs	r2, #0
 8009946:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2207      	movs	r2, #7
 8009952:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2207      	movs	r2, #7
 8009958:	4619      	mov	r1, r3
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f001 f969 	bl	800ac32 <USBH_CtlReq>
 8009960:	4603      	mov	r3, r0
}
 8009962:	4618      	mov	r0, r3
 8009964:	3708      	adds	r7, #8
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800996a:	b580      	push	{r7, lr}
 800996c:	b086      	sub	sp, #24
 800996e:	af02      	add	r7, sp, #8
 8009970:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009978:	69db      	ldr	r3, [r3, #28]
 800997a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800997c:	2300      	movs	r3, #0
 800997e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009986:	2b01      	cmp	r3, #1
 8009988:	d002      	beq.n	8009990 <CDC_ProcessTransmission+0x26>
 800998a:	2b02      	cmp	r3, #2
 800998c:	d023      	beq.n	80099d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800998e:	e05e      	b.n	8009a4e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009994:	68fa      	ldr	r2, [r7, #12]
 8009996:	8b12      	ldrh	r2, [r2, #24]
 8009998:	4293      	cmp	r3, r2
 800999a:	d90b      	bls.n	80099b4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	69d9      	ldr	r1, [r3, #28]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	8b1a      	ldrh	r2, [r3, #24]
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	7b5b      	ldrb	r3, [r3, #13]
 80099a8:	2001      	movs	r0, #1
 80099aa:	9000      	str	r0, [sp, #0]
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f001 fb4e 	bl	800b04e <USBH_BulkSendData>
 80099b2:	e00b      	b.n	80099cc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 80099bc:	b29a      	uxth	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	7b5b      	ldrb	r3, [r3, #13]
 80099c2:	2001      	movs	r0, #1
 80099c4:	9000      	str	r0, [sp, #0]
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f001 fb41 	bl	800b04e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2202      	movs	r2, #2
 80099d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80099d4:	e03b      	b.n	8009a4e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	7b5b      	ldrb	r3, [r3, #13]
 80099da:	4619      	mov	r1, r3
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f001 fe65 	bl	800b6ac <USBH_LL_GetURBState>
 80099e2:	4603      	mov	r3, r0
 80099e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d128      	bne.n	8009a3e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	68fa      	ldr	r2, [r7, #12]
 80099f2:	8b12      	ldrh	r2, [r2, #24]
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d90e      	bls.n	8009a16 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fc:	68fa      	ldr	r2, [r7, #12]
 80099fe:	8b12      	ldrh	r2, [r2, #24]
 8009a00:	1a9a      	subs	r2, r3, r2
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	68fa      	ldr	r2, [r7, #12]
 8009a0c:	8b12      	ldrh	r2, [r2, #24]
 8009a0e:	441a      	add	r2, r3
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	61da      	str	r2, [r3, #28]
 8009a14:	e002      	b.n	8009a1c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d004      	beq.n	8009a2e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009a2c:	e00e      	b.n	8009a4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f868 	bl	8009b0c <USBH_CDC_TransmitCallback>
      break;
 8009a3c:	e006      	b.n	8009a4c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	2b02      	cmp	r3, #2
 8009a42:	d103      	bne.n	8009a4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009a4c:	bf00      	nop
  }
}
 8009a4e:	bf00      	nop
 8009a50:	3710      	adds	r7, #16
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b086      	sub	sp, #24
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009a72:	2b03      	cmp	r3, #3
 8009a74:	d002      	beq.n	8009a7c <CDC_ProcessReception+0x26>
 8009a76:	2b04      	cmp	r3, #4
 8009a78:	d00e      	beq.n	8009a98 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009a7a:	e043      	b.n	8009b04 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	6a19      	ldr	r1, [r3, #32]
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	8b5a      	ldrh	r2, [r3, #26]
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	7b1b      	ldrb	r3, [r3, #12]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f001 fb05 	bl	800b098 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	2204      	movs	r2, #4
 8009a92:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009a96:	e035      	b.n	8009b04 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	7b1b      	ldrb	r3, [r3, #12]
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f001 fe04 	bl	800b6ac <USBH_LL_GetURBState>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009aa8:	7cfb      	ldrb	r3, [r7, #19]
 8009aaa:	2b01      	cmp	r3, #1
 8009aac:	d129      	bne.n	8009b02 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	7b1b      	ldrb	r3, [r3, #12]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 fd67 	bl	800b588 <USBH_LL_GetLastXferSize>
 8009aba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d016      	beq.n	8009af4 <CDC_ProcessReception+0x9e>
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	8b5b      	ldrh	r3, [r3, #26]
 8009aca:	461a      	mov	r2, r3
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d910      	bls.n	8009af4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	1ad2      	subs	r2, r2, r3
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	6a1a      	ldr	r2, [r3, #32]
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	441a      	add	r2, r3
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	2203      	movs	r2, #3
 8009aee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009af2:	e006      	b.n	8009b02 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	2200      	movs	r2, #0
 8009af8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f80f 	bl	8009b20 <USBH_CDC_ReceiveCallback>
      break;
 8009b02:	bf00      	nop
  }
}
 8009b04:	bf00      	nop
 8009b06:	3718      	adds	r7, #24
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}

08009b0c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b14:	bf00      	nop
 8009b16:	370c      	adds	r7, #12
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b3c:	bf00      	nop
 8009b3e:	370c      	adds	r7, #12
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	4613      	mov	r3, r2
 8009b54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d101      	bne.n	8009b60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	e029      	b.n	8009bb4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	79fa      	ldrb	r2, [r7, #7]
 8009b64:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	f000 f81f 	bl	8009bbc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2200      	movs	r2, #0
 8009b82:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	2200      	movs	r2, #0
 8009b92:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d003      	beq.n	8009bac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	68ba      	ldr	r2, [r7, #8]
 8009ba8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8009bac:	68f8      	ldr	r0, [r7, #12]
 8009bae:	f001 fc37 	bl	800b420 <USBH_LL_Init>

  return USBH_OK;
 8009bb2:	2300      	movs	r3, #0
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b085      	sub	sp, #20
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]
 8009bcc:	e009      	b.n	8009be2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	33e0      	adds	r3, #224	; 0xe0
 8009bd4:	009b      	lsls	r3, r3, #2
 8009bd6:	4413      	add	r3, r2
 8009bd8:	2200      	movs	r2, #0
 8009bda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3301      	adds	r3, #1
 8009be0:	60fb      	str	r3, [r7, #12]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2b0e      	cmp	r3, #14
 8009be6:	d9f2      	bls.n	8009bce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	e009      	b.n	8009c02 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60fb      	str	r3, [r7, #12]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c08:	d3f1      	bcc.n	8009bee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2200      	movs	r2, #0
 8009c14:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2201      	movs	r2, #1
 8009c1a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2200      	movs	r2, #0
 8009c20:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2201      	movs	r2, #1
 8009c28:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2240      	movs	r2, #64	; 0x40
 8009c2e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	2201      	movs	r2, #1
 8009c42:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	2200      	movs	r2, #0
 8009c52:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d016      	beq.n	8009ca6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d10e      	bne.n	8009ca0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009c88:	1c59      	adds	r1, r3, #1
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	33de      	adds	r3, #222	; 0xde
 8009c94:	6839      	ldr	r1, [r7, #0]
 8009c96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	73fb      	strb	r3, [r7, #15]
 8009c9e:	e004      	b.n	8009caa <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009ca0:	2302      	movs	r3, #2
 8009ca2:	73fb      	strb	r3, [r7, #15]
 8009ca4:	e001      	b.n	8009caa <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009ca6:	2302      	movs	r3, #2
 8009ca8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cac:	4618      	mov	r0, r3
 8009cae:	3714      	adds	r7, #20
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b085      	sub	sp, #20
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009cce:	78fa      	ldrb	r2, [r7, #3]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d204      	bcs.n	8009cde <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	78fa      	ldrb	r2, [r7, #3]
 8009cd8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009cdc:	e001      	b.n	8009ce2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009cde:	2302      	movs	r3, #2
 8009ce0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3714      	adds	r7, #20
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b087      	sub	sp, #28
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
 8009cf8:	4608      	mov	r0, r1
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	4603      	mov	r3, r0
 8009d00:	70fb      	strb	r3, [r7, #3]
 8009d02:	460b      	mov	r3, r1
 8009d04:	70bb      	strb	r3, [r7, #2]
 8009d06:	4613      	mov	r3, r2
 8009d08:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009d18:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d1a:	e025      	b.n	8009d68 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009d1c:	7dfb      	ldrb	r3, [r7, #23]
 8009d1e:	221a      	movs	r2, #26
 8009d20:	fb02 f303 	mul.w	r3, r2, r3
 8009d24:	3308      	adds	r3, #8
 8009d26:	68fa      	ldr	r2, [r7, #12]
 8009d28:	4413      	add	r3, r2
 8009d2a:	3302      	adds	r3, #2
 8009d2c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d2e:	693b      	ldr	r3, [r7, #16]
 8009d30:	795b      	ldrb	r3, [r3, #5]
 8009d32:	78fa      	ldrb	r2, [r7, #3]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d002      	beq.n	8009d3e <USBH_FindInterface+0x4e>
 8009d38:	78fb      	ldrb	r3, [r7, #3]
 8009d3a:	2bff      	cmp	r3, #255	; 0xff
 8009d3c:	d111      	bne.n	8009d62 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d3e:	693b      	ldr	r3, [r7, #16]
 8009d40:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d42:	78ba      	ldrb	r2, [r7, #2]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d002      	beq.n	8009d4e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d48:	78bb      	ldrb	r3, [r7, #2]
 8009d4a:	2bff      	cmp	r3, #255	; 0xff
 8009d4c:	d109      	bne.n	8009d62 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d52:	787a      	ldrb	r2, [r7, #1]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d002      	beq.n	8009d5e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d58:	787b      	ldrb	r3, [r7, #1]
 8009d5a:	2bff      	cmp	r3, #255	; 0xff
 8009d5c:	d101      	bne.n	8009d62 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009d5e:	7dfb      	ldrb	r3, [r7, #23]
 8009d60:	e006      	b.n	8009d70 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009d62:	7dfb      	ldrb	r3, [r7, #23]
 8009d64:	3301      	adds	r3, #1
 8009d66:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d68:	7dfb      	ldrb	r3, [r7, #23]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d9d6      	bls.n	8009d1c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009d6e:	23ff      	movs	r3, #255	; 0xff
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	371c      	adds	r7, #28
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b082      	sub	sp, #8
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 fb87 	bl	800b498 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f001 fca0 	bl	800b6d2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009d92:	2300      	movs	r3, #0
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3708      	adds	r7, #8
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b088      	sub	sp, #32
 8009da0:	af04      	add	r7, sp, #16
 8009da2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009da4:	2302      	movs	r3, #2
 8009da6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d102      	bne.n	8009dbe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	2b0b      	cmp	r3, #11
 8009dc6:	f200 81b3 	bhi.w	800a130 <USBH_Process+0x394>
 8009dca:	a201      	add	r2, pc, #4	; (adr r2, 8009dd0 <USBH_Process+0x34>)
 8009dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd0:	08009e01 	.word	0x08009e01
 8009dd4:	08009e33 	.word	0x08009e33
 8009dd8:	08009e9b 	.word	0x08009e9b
 8009ddc:	0800a0cb 	.word	0x0800a0cb
 8009de0:	0800a131 	.word	0x0800a131
 8009de4:	08009f3f 	.word	0x08009f3f
 8009de8:	0800a071 	.word	0x0800a071
 8009dec:	08009f75 	.word	0x08009f75
 8009df0:	08009f95 	.word	0x08009f95
 8009df4:	08009fb5 	.word	0x08009fb5
 8009df8:	08009fe3 	.word	0x08009fe3
 8009dfc:	0800a0b3 	.word	0x0800a0b3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009e06:	b2db      	uxtb	r3, r3
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	f000 8193 	beq.w	800a134 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2201      	movs	r2, #1
 8009e12:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009e14:	20c8      	movs	r0, #200	; 0xc8
 8009e16:	f001 fca3 	bl	800b760 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8009e1a:	6878      	ldr	r0, [r7, #4]
 8009e1c:	f001 fb99 	bl	800b552 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009e30:	e180      	b.n	800a134 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d107      	bne.n	8009e4c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009e4a:	e182      	b.n	800a152 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e56:	d914      	bls.n	8009e82 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e5e:	3301      	adds	r3, #1
 8009e60:	b2da      	uxtb	r2, r3
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009e6e:	2b03      	cmp	r3, #3
 8009e70:	d903      	bls.n	8009e7a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	220d      	movs	r2, #13
 8009e76:	701a      	strb	r2, [r3, #0]
      break;
 8009e78:	e16b      	b.n	800a152 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	701a      	strb	r2, [r3, #0]
      break;
 8009e80:	e167      	b.n	800a152 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009e88:	f103 020a 	add.w	r2, r3, #10
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009e92:	200a      	movs	r0, #10
 8009e94:	f001 fc64 	bl	800b760 <USBH_Delay>
      break;
 8009e98:	e15b      	b.n	800a152 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d005      	beq.n	8009eb0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009eaa:	2104      	movs	r1, #4
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009eb0:	2064      	movs	r0, #100	; 0x64
 8009eb2:	f001 fc55 	bl	800b760 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 fb24 	bl	800b504 <USBH_LL_GetSpeed>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2205      	movs	r2, #5
 8009eca:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ecc:	2100      	movs	r1, #0
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f001 f92f 	bl	800b132 <USBH_AllocPipe>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009edc:	2180      	movs	r1, #128	; 0x80
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f001 f927 	bl	800b132 <USBH_AllocPipe>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	7919      	ldrb	r1, [r3, #4]
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f00:	b292      	uxth	r2, r2
 8009f02:	9202      	str	r2, [sp, #8]
 8009f04:	2200      	movs	r2, #0
 8009f06:	9201      	str	r2, [sp, #4]
 8009f08:	9300      	str	r3, [sp, #0]
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	2280      	movs	r2, #128	; 0x80
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f001 f8e0 	bl	800b0d4 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	7959      	ldrb	r1, [r3, #5]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f28:	b292      	uxth	r2, r2
 8009f2a:	9202      	str	r2, [sp, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	9201      	str	r2, [sp, #4]
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	4603      	mov	r3, r0
 8009f34:	2200      	movs	r2, #0
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 f8cc 	bl	800b0d4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009f3c:	e109      	b.n	800a152 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f90c 	bl	800a15c <USBH_HandleEnum>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f040 80f3 	bne.w	800a138 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d103      	bne.n	8009f6c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2208      	movs	r2, #8
 8009f68:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009f6a:	e0e5      	b.n	800a138 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2207      	movs	r2, #7
 8009f70:	701a      	strb	r2, [r3, #0]
      break;
 8009f72:	e0e1      	b.n	800a138 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 80de 	beq.w	800a13c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009f86:	2101      	movs	r1, #1
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2208      	movs	r2, #8
 8009f90:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009f92:	e0d3      	b.n	800a13c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 fc20 	bl	800a7e4 <USBH_SetCfg>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	f040 80ca 	bne.w	800a140 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2209      	movs	r2, #9
 8009fb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009fb2:	e0c5      	b.n	800a140 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00b      	beq.n	8009fda <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009fc2:	2101      	movs	r1, #1
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f000 fc30 	bl	800a82a <USBH_SetFeature>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f040 80b9 	bne.w	800a144 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	220a      	movs	r2, #10
 8009fd6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009fd8:	e0b4      	b.n	800a144 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	220a      	movs	r2, #10
 8009fde:	701a      	strb	r2, [r3, #0]
      break;
 8009fe0:	e0b0      	b.n	800a144 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 80ad 	beq.w	800a148 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	73fb      	strb	r3, [r7, #15]
 8009ffa:	e016      	b.n	800a02a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009ffc:	7bfa      	ldrb	r2, [r7, #15]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	32de      	adds	r2, #222	; 0xde
 800a002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a006:	791a      	ldrb	r2, [r3, #4]
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a00e:	429a      	cmp	r2, r3
 800a010:	d108      	bne.n	800a024 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a012:	7bfa      	ldrb	r2, [r7, #15]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	32de      	adds	r2, #222	; 0xde
 800a018:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a022:	e005      	b.n	800a030 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a024:	7bfb      	ldrb	r3, [r7, #15]
 800a026:	3301      	adds	r3, #1
 800a028:	73fb      	strb	r3, [r7, #15]
 800a02a:	7bfb      	ldrb	r3, [r7, #15]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d0e5      	beq.n	8009ffc <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a036:	2b00      	cmp	r3, #0
 800a038:	d016      	beq.n	800a068 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	4798      	blx	r3
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d109      	bne.n	800a060 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2206      	movs	r2, #6
 800a050:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a058:	2103      	movs	r1, #3
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a05e:	e073      	b.n	800a148 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	220d      	movs	r2, #13
 800a064:	701a      	strb	r2, [r3, #0]
      break;
 800a066:	e06f      	b.n	800a148 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	220d      	movs	r2, #13
 800a06c:	701a      	strb	r2, [r3, #0]
      break;
 800a06e:	e06b      	b.n	800a148 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a076:	2b00      	cmp	r3, #0
 800a078:	d017      	beq.n	800a0aa <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	4798      	blx	r3
 800a086:	4603      	mov	r3, r0
 800a088:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a08a:	7bbb      	ldrb	r3, [r7, #14]
 800a08c:	b2db      	uxtb	r3, r3
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d103      	bne.n	800a09a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	220b      	movs	r2, #11
 800a096:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a098:	e058      	b.n	800a14c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800a09a:	7bbb      	ldrb	r3, [r7, #14]
 800a09c:	b2db      	uxtb	r3, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d154      	bne.n	800a14c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	220d      	movs	r2, #13
 800a0a6:	701a      	strb	r2, [r3, #0]
      break;
 800a0a8:	e050      	b.n	800a14c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	220d      	movs	r2, #13
 800a0ae:	701a      	strb	r2, [r3, #0]
      break;
 800a0b0:	e04c      	b.n	800a14c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d049      	beq.n	800a150 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0c2:	695b      	ldr	r3, [r3, #20]
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	4798      	blx	r3
      }
      break;
 800a0c8:	e042      	b.n	800a150 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800a0d2:	6878      	ldr	r0, [r7, #4]
 800a0d4:	f7ff fd72 	bl	8009bbc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d009      	beq.n	800a0f6 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d005      	beq.n	800a10c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a106:	2105      	movs	r1, #5
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a112:	b2db      	uxtb	r3, r3
 800a114:	2b01      	cmp	r3, #1
 800a116:	d107      	bne.n	800a128 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2200      	movs	r2, #0
 800a11c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff fe2b 	bl	8009d7c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800a126:	e014      	b.n	800a152 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f001 f9b5 	bl	800b498 <USBH_LL_Start>
      break;
 800a12e:	e010      	b.n	800a152 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a130:	bf00      	nop
 800a132:	e00e      	b.n	800a152 <USBH_Process+0x3b6>
      break;
 800a134:	bf00      	nop
 800a136:	e00c      	b.n	800a152 <USBH_Process+0x3b6>
      break;
 800a138:	bf00      	nop
 800a13a:	e00a      	b.n	800a152 <USBH_Process+0x3b6>
    break;
 800a13c:	bf00      	nop
 800a13e:	e008      	b.n	800a152 <USBH_Process+0x3b6>
      break;
 800a140:	bf00      	nop
 800a142:	e006      	b.n	800a152 <USBH_Process+0x3b6>
      break;
 800a144:	bf00      	nop
 800a146:	e004      	b.n	800a152 <USBH_Process+0x3b6>
      break;
 800a148:	bf00      	nop
 800a14a:	e002      	b.n	800a152 <USBH_Process+0x3b6>
      break;
 800a14c:	bf00      	nop
 800a14e:	e000      	b.n	800a152 <USBH_Process+0x3b6>
      break;
 800a150:	bf00      	nop
  }
  return USBH_OK;
 800a152:	2300      	movs	r3, #0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}

0800a15c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af04      	add	r7, sp, #16
 800a162:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a164:	2301      	movs	r3, #1
 800a166:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a168:	2301      	movs	r3, #1
 800a16a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	785b      	ldrb	r3, [r3, #1]
 800a170:	2b07      	cmp	r3, #7
 800a172:	f200 81c1 	bhi.w	800a4f8 <USBH_HandleEnum+0x39c>
 800a176:	a201      	add	r2, pc, #4	; (adr r2, 800a17c <USBH_HandleEnum+0x20>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a19d 	.word	0x0800a19d
 800a180:	0800a25b 	.word	0x0800a25b
 800a184:	0800a2c5 	.word	0x0800a2c5
 800a188:	0800a353 	.word	0x0800a353
 800a18c:	0800a3bd 	.word	0x0800a3bd
 800a190:	0800a42d 	.word	0x0800a42d
 800a194:	0800a473 	.word	0x0800a473
 800a198:	0800a4b9 	.word	0x0800a4b9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a19c:	2108      	movs	r1, #8
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fa50 	bl	800a644 <USBH_Get_DevDesc>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1a8:	7bbb      	ldrb	r3, [r7, #14]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d130      	bne.n	800a210 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	7919      	ldrb	r1, [r3, #4]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1d2:	b292      	uxth	r2, r2
 800a1d4:	9202      	str	r2, [sp, #8]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	9201      	str	r2, [sp, #4]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2280      	movs	r2, #128	; 0x80
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f000 ff77 	bl	800b0d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	7959      	ldrb	r1, [r3, #5]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1fa:	b292      	uxth	r2, r2
 800a1fc:	9202      	str	r2, [sp, #8]
 800a1fe:	2200      	movs	r2, #0
 800a200:	9201      	str	r2, [sp, #4]
 800a202:	9300      	str	r3, [sp, #0]
 800a204:	4603      	mov	r3, r0
 800a206:	2200      	movs	r2, #0
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 ff63 	bl	800b0d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a20e:	e175      	b.n	800a4fc <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a210:	7bbb      	ldrb	r3, [r7, #14]
 800a212:	2b03      	cmp	r3, #3
 800a214:	f040 8172 	bne.w	800a4fc <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a21e:	3301      	adds	r3, #1
 800a220:	b2da      	uxtb	r2, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a22e:	2b03      	cmp	r3, #3
 800a230:	d903      	bls.n	800a23a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	220d      	movs	r2, #13
 800a236:	701a      	strb	r2, [r3, #0]
      break;
 800a238:	e160      	b.n	800a4fc <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	795b      	ldrb	r3, [r3, #5]
 800a23e:	4619      	mov	r1, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 ff97 	bl	800b174 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	791b      	ldrb	r3, [r3, #4]
 800a24a:	4619      	mov	r1, r3
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 ff91 	bl	800b174 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2200      	movs	r2, #0
 800a256:	701a      	strb	r2, [r3, #0]
      break;
 800a258:	e150      	b.n	800a4fc <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a25a:	2112      	movs	r1, #18
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f9f1 	bl	800a644 <USBH_Get_DevDesc>
 800a262:	4603      	mov	r3, r0
 800a264:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a266:	7bbb      	ldrb	r3, [r7, #14]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d103      	bne.n	800a274 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2202      	movs	r2, #2
 800a270:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a272:	e145      	b.n	800a500 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a274:	7bbb      	ldrb	r3, [r7, #14]
 800a276:	2b03      	cmp	r3, #3
 800a278:	f040 8142 	bne.w	800a500 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a282:	3301      	adds	r3, #1
 800a284:	b2da      	uxtb	r2, r3
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a292:	2b03      	cmp	r3, #3
 800a294:	d903      	bls.n	800a29e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	220d      	movs	r2, #13
 800a29a:	701a      	strb	r2, [r3, #0]
      break;
 800a29c:	e130      	b.n	800a500 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	795b      	ldrb	r3, [r3, #5]
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f000 ff65 	bl	800b174 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	791b      	ldrb	r3, [r3, #4]
 800a2ae:	4619      	mov	r1, r3
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 ff5f 	bl	800b174 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	701a      	strb	r2, [r3, #0]
      break;
 800a2c2:	e11d      	b.n	800a500 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	6878      	ldr	r0, [r7, #4]
 800a2c8:	f000 fa68 	bl	800a79c <USBH_SetAddress>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2d0:	7bbb      	ldrb	r3, [r7, #14]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d132      	bne.n	800a33c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800a2d6:	2002      	movs	r0, #2
 800a2d8:	f001 fa42 	bl	800b760 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2203      	movs	r2, #3
 800a2e8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	7919      	ldrb	r1, [r3, #4]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2fe:	b292      	uxth	r2, r2
 800a300:	9202      	str	r2, [sp, #8]
 800a302:	2200      	movs	r2, #0
 800a304:	9201      	str	r2, [sp, #4]
 800a306:	9300      	str	r3, [sp, #0]
 800a308:	4603      	mov	r3, r0
 800a30a:	2280      	movs	r2, #128	; 0x80
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 fee1 	bl	800b0d4 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	7959      	ldrb	r1, [r3, #5]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a326:	b292      	uxth	r2, r2
 800a328:	9202      	str	r2, [sp, #8]
 800a32a:	2200      	movs	r2, #0
 800a32c:	9201      	str	r2, [sp, #4]
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	4603      	mov	r3, r0
 800a332:	2200      	movs	r2, #0
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fecd 	bl	800b0d4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a33a:	e0e3      	b.n	800a504 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a33c:	7bbb      	ldrb	r3, [r7, #14]
 800a33e:	2b03      	cmp	r3, #3
 800a340:	f040 80e0 	bne.w	800a504 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	220d      	movs	r2, #13
 800a348:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	705a      	strb	r2, [r3, #1]
      break;
 800a350:	e0d8      	b.n	800a504 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a352:	2109      	movs	r1, #9
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 f99d 	bl	800a694 <USBH_Get_CfgDesc>
 800a35a:	4603      	mov	r3, r0
 800a35c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a35e:	7bbb      	ldrb	r3, [r7, #14]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d103      	bne.n	800a36c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2204      	movs	r2, #4
 800a368:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a36a:	e0cd      	b.n	800a508 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a36c:	7bbb      	ldrb	r3, [r7, #14]
 800a36e:	2b03      	cmp	r3, #3
 800a370:	f040 80ca 	bne.w	800a508 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a37a:	3301      	adds	r3, #1
 800a37c:	b2da      	uxtb	r2, r3
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a38a:	2b03      	cmp	r3, #3
 800a38c:	d903      	bls.n	800a396 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	220d      	movs	r2, #13
 800a392:	701a      	strb	r2, [r3, #0]
      break;
 800a394:	e0b8      	b.n	800a508 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	795b      	ldrb	r3, [r3, #5]
 800a39a:	4619      	mov	r1, r3
 800a39c:	6878      	ldr	r0, [r7, #4]
 800a39e:	f000 fee9 	bl	800b174 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	791b      	ldrb	r3, [r3, #4]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f000 fee3 	bl	800b174 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	701a      	strb	r2, [r3, #0]
      break;
 800a3ba:	e0a5      	b.n	800a508 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f000 f965 	bl	800a694 <USBH_Get_CfgDesc>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3ce:	7bbb      	ldrb	r3, [r7, #14]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d103      	bne.n	800a3dc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2205      	movs	r2, #5
 800a3d8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3da:	e097      	b.n	800a50c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3dc:	7bbb      	ldrb	r3, [r7, #14]
 800a3de:	2b03      	cmp	r3, #3
 800a3e0:	f040 8094 	bne.w	800a50c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	b2da      	uxtb	r2, r3
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800a3fa:	2b03      	cmp	r3, #3
 800a3fc:	d903      	bls.n	800a406 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	220d      	movs	r2, #13
 800a402:	701a      	strb	r2, [r3, #0]
      break;
 800a404:	e082      	b.n	800a50c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	795b      	ldrb	r3, [r3, #5]
 800a40a:	4619      	mov	r1, r3
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f000 feb1 	bl	800b174 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	791b      	ldrb	r3, [r3, #4]
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f000 feab 	bl	800b174 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2200      	movs	r2, #0
 800a422:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2200      	movs	r2, #0
 800a428:	701a      	strb	r2, [r3, #0]
      break;
 800a42a:	e06f      	b.n	800a50c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800a432:	2b00      	cmp	r3, #0
 800a434:	d019      	beq.n	800a46a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a442:	23ff      	movs	r3, #255	; 0xff
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f000 f949 	bl	800a6dc <USBH_Get_StringDesc>
 800a44a:	4603      	mov	r3, r0
 800a44c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a44e:	7bbb      	ldrb	r3, [r7, #14]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d103      	bne.n	800a45c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2206      	movs	r2, #6
 800a458:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a45a:	e059      	b.n	800a510 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a45c:	7bbb      	ldrb	r3, [r7, #14]
 800a45e:	2b03      	cmp	r3, #3
 800a460:	d156      	bne.n	800a510 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2206      	movs	r2, #6
 800a466:	705a      	strb	r2, [r3, #1]
      break;
 800a468:	e052      	b.n	800a510 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	2206      	movs	r2, #6
 800a46e:	705a      	strb	r2, [r3, #1]
      break;
 800a470:	e04e      	b.n	800a510 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d019      	beq.n	800a4b0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a488:	23ff      	movs	r3, #255	; 0xff
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 f926 	bl	800a6dc <USBH_Get_StringDesc>
 800a490:	4603      	mov	r3, r0
 800a492:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a494:	7bbb      	ldrb	r3, [r7, #14]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d103      	bne.n	800a4a2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2207      	movs	r2, #7
 800a49e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800a4a0:	e038      	b.n	800a514 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4a2:	7bbb      	ldrb	r3, [r7, #14]
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	d135      	bne.n	800a514 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2207      	movs	r2, #7
 800a4ac:	705a      	strb	r2, [r3, #1]
      break;
 800a4ae:	e031      	b.n	800a514 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2207      	movs	r2, #7
 800a4b4:	705a      	strb	r2, [r3, #1]
      break;
 800a4b6:	e02d      	b.n	800a514 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d017      	beq.n	800a4f2 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4ce:	23ff      	movs	r3, #255	; 0xff
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 f903 	bl	800a6dc <USBH_Get_StringDesc>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4da:	7bbb      	ldrb	r3, [r7, #14]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d102      	bne.n	800a4e6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a4e4:	e018      	b.n	800a518 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	2b03      	cmp	r3, #3
 800a4ea:	d115      	bne.n	800a518 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f0:	e012      	b.n	800a518 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a4f6:	e00f      	b.n	800a518 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800a4f8:	bf00      	nop
 800a4fa:	e00e      	b.n	800a51a <USBH_HandleEnum+0x3be>
      break;
 800a4fc:	bf00      	nop
 800a4fe:	e00c      	b.n	800a51a <USBH_HandleEnum+0x3be>
      break;
 800a500:	bf00      	nop
 800a502:	e00a      	b.n	800a51a <USBH_HandleEnum+0x3be>
      break;
 800a504:	bf00      	nop
 800a506:	e008      	b.n	800a51a <USBH_HandleEnum+0x3be>
      break;
 800a508:	bf00      	nop
 800a50a:	e006      	b.n	800a51a <USBH_HandleEnum+0x3be>
      break;
 800a50c:	bf00      	nop
 800a50e:	e004      	b.n	800a51a <USBH_HandleEnum+0x3be>
      break;
 800a510:	bf00      	nop
 800a512:	e002      	b.n	800a51a <USBH_HandleEnum+0x3be>
      break;
 800a514:	bf00      	nop
 800a516:	e000      	b.n	800a51a <USBH_HandleEnum+0x3be>
      break;
 800a518:	bf00      	nop
  }
  return Status;
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	683a      	ldr	r2, [r7, #0]
 800a532:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800a536:	bf00      	nop
 800a538:	370c      	adds	r7, #12
 800a53a:	46bd      	mov	sp, r7
 800a53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a540:	4770      	bx	lr

0800a542 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a542:	b580      	push	{r7, lr}
 800a544:	b082      	sub	sp, #8
 800a546:	af00      	add	r7, sp, #0
 800a548:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 f804 	bl	800a566 <USBH_HandleSof>
}
 800a55e:	bf00      	nop
 800a560:	3708      	adds	r7, #8
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b082      	sub	sp, #8
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b0b      	cmp	r3, #11
 800a576:	d10a      	bne.n	800a58e <USBH_HandleSof+0x28>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d005      	beq.n	800a58e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a588:	699b      	ldr	r3, [r3, #24]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	4798      	blx	r3
  }
}
 800a58e:	bf00      	nop
 800a590:	3708      	adds	r7, #8
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a596:	b480      	push	{r7}
 800a598:	b083      	sub	sp, #12
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800a5a6:	bf00      	nop
}
 800a5a8:	370c      	adds	r7, #12
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b083      	sub	sp, #12
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800a5c2:	bf00      	nop
}
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b083      	sub	sp, #12
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	370c      	adds	r7, #12
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr

0800a5fc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	2200      	movs	r2, #0
 800a610:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2200      	movs	r2, #0
 800a618:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800a61c:	6878      	ldr	r0, [r7, #4]
 800a61e:	f000 ff56 	bl	800b4ce <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	791b      	ldrb	r3, [r3, #4]
 800a626:	4619      	mov	r1, r3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 fda3 	bl	800b174 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	795b      	ldrb	r3, [r3, #5]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fd9d 	bl	800b174 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}

0800a644 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af02      	add	r7, sp, #8
 800a64a:	6078      	str	r0, [r7, #4]
 800a64c:	460b      	mov	r3, r1
 800a64e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a656:	78fb      	ldrb	r3, [r7, #3]
 800a658:	b29b      	uxth	r3, r3
 800a65a:	9300      	str	r3, [sp, #0]
 800a65c:	4613      	mov	r3, r2
 800a65e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a662:	2100      	movs	r1, #0
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f864 	bl	800a732 <USBH_GetDescriptor>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73fb      	strb	r3, [r7, #15]
 800a66e:	7bfb      	ldrb	r3, [r7, #15]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d10a      	bne.n	800a68a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a680:	78fa      	ldrb	r2, [r7, #3]
 800a682:	b292      	uxth	r2, r2
 800a684:	4619      	mov	r1, r3
 800a686:	f000 f918 	bl	800a8ba <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	3710      	adds	r7, #16
 800a690:	46bd      	mov	sp, r7
 800a692:	bd80      	pop	{r7, pc}

0800a694 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a694:	b580      	push	{r7, lr}
 800a696:	b086      	sub	sp, #24
 800a698:	af02      	add	r7, sp, #8
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	331c      	adds	r3, #28
 800a6a4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a6a6:	887b      	ldrh	r3, [r7, #2]
 800a6a8:	9300      	str	r3, [sp, #0]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6b0:	2100      	movs	r1, #0
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f000 f83d 	bl	800a732 <USBH_GetDescriptor>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	72fb      	strb	r3, [r7, #11]
 800a6bc:	7afb      	ldrb	r3, [r7, #11]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d107      	bne.n	800a6d2 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a6c8:	887a      	ldrh	r2, [r7, #2]
 800a6ca:	68f9      	ldr	r1, [r7, #12]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f964 	bl	800a99a <USBH_ParseCfgDesc>
  }

  return status;
 800a6d2:	7afb      	ldrb	r3, [r7, #11]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3710      	adds	r7, #16
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b088      	sub	sp, #32
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	60f8      	str	r0, [r7, #12]
 800a6e4:	607a      	str	r2, [r7, #4]
 800a6e6:	461a      	mov	r2, r3
 800a6e8:	460b      	mov	r3, r1
 800a6ea:	72fb      	strb	r3, [r7, #11]
 800a6ec:	4613      	mov	r3, r2
 800a6ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800a6f0:	7afb      	ldrb	r3, [r7, #11]
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a6f8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800a700:	893b      	ldrh	r3, [r7, #8]
 800a702:	9300      	str	r3, [sp, #0]
 800a704:	460b      	mov	r3, r1
 800a706:	2100      	movs	r1, #0
 800a708:	68f8      	ldr	r0, [r7, #12]
 800a70a:	f000 f812 	bl	800a732 <USBH_GetDescriptor>
 800a70e:	4603      	mov	r3, r0
 800a710:	75fb      	strb	r3, [r7, #23]
 800a712:	7dfb      	ldrb	r3, [r7, #23]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d107      	bne.n	800a728 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a71e:	893a      	ldrh	r2, [r7, #8]
 800a720:	6879      	ldr	r1, [r7, #4]
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fa37 	bl	800ab96 <USBH_ParseStringDesc>
  }

  return status;
 800a728:	7dfb      	ldrb	r3, [r7, #23]
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3718      	adds	r7, #24
 800a72e:	46bd      	mov	sp, r7
 800a730:	bd80      	pop	{r7, pc}

0800a732 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a732:	b580      	push	{r7, lr}
 800a734:	b084      	sub	sp, #16
 800a736:	af00      	add	r7, sp, #0
 800a738:	60f8      	str	r0, [r7, #12]
 800a73a:	607b      	str	r3, [r7, #4]
 800a73c:	460b      	mov	r3, r1
 800a73e:	72fb      	strb	r3, [r7, #11]
 800a740:	4613      	mov	r3, r2
 800a742:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	789b      	ldrb	r3, [r3, #2]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d11c      	bne.n	800a786 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a74c:	7afb      	ldrb	r3, [r7, #11]
 800a74e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a752:	b2da      	uxtb	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2206      	movs	r2, #6
 800a75c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	893a      	ldrh	r2, [r7, #8]
 800a762:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a764:	893b      	ldrh	r3, [r7, #8]
 800a766:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a76a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a76e:	d104      	bne.n	800a77a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f240 4209 	movw	r2, #1033	; 0x409
 800a776:	829a      	strh	r2, [r3, #20]
 800a778:	e002      	b.n	800a780 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	8b3a      	ldrh	r2, [r7, #24]
 800a784:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a786:	8b3b      	ldrh	r3, [r7, #24]
 800a788:	461a      	mov	r2, r3
 800a78a:	6879      	ldr	r1, [r7, #4]
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 fa50 	bl	800ac32 <USBH_CtlReq>
 800a792:	4603      	mov	r3, r0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3710      	adds	r7, #16
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	789b      	ldrb	r3, [r3, #2]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d10f      	bne.n	800a7d0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2205      	movs	r2, #5
 800a7ba:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a7bc:	78fb      	ldrb	r3, [r7, #3]
 800a7be:	b29a      	uxth	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fa2c 	bl	800ac32 <USBH_CtlReq>
 800a7da:	4603      	mov	r3, r0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	789b      	ldrb	r3, [r3, #2]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d10e      	bne.n	800a816 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2209      	movs	r2, #9
 800a802:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	887a      	ldrh	r2, [r7, #2]
 800a808:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a816:	2200      	movs	r2, #0
 800a818:	2100      	movs	r1, #0
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fa09 	bl	800ac32 <USBH_CtlReq>
 800a820:	4603      	mov	r3, r0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b082      	sub	sp, #8
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	460b      	mov	r3, r1
 800a834:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	789b      	ldrb	r3, [r3, #2]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d10f      	bne.n	800a85e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2203      	movs	r2, #3
 800a848:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2200      	movs	r2, #0
 800a85c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800a85e:	2200      	movs	r2, #0
 800a860:	2100      	movs	r1, #0
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f000 f9e5 	bl	800ac32 <USBH_CtlReq>
 800a868:	4603      	mov	r3, r0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}

0800a872 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a872:	b580      	push	{r7, lr}
 800a874:	b082      	sub	sp, #8
 800a876:	af00      	add	r7, sp, #0
 800a878:	6078      	str	r0, [r7, #4]
 800a87a:	460b      	mov	r3, r1
 800a87c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	789b      	ldrb	r3, [r3, #2]
 800a882:	2b01      	cmp	r3, #1
 800a884:	d10f      	bne.n	800a8a6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2202      	movs	r2, #2
 800a88a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	2200      	movs	r2, #0
 800a896:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a898:	78fb      	ldrb	r3, [r7, #3]
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2200      	movs	r2, #0
 800a8a4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 f9c1 	bl	800ac32 <USBH_CtlReq>
 800a8b0:	4603      	mov	r3, r0
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3708      	adds	r7, #8
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b085      	sub	sp, #20
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	60b9      	str	r1, [r7, #8]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	781a      	ldrb	r2, [r3, #0]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	785a      	ldrb	r2, [r3, #1]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	3302      	adds	r3, #2
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	68bb      	ldr	r3, [r7, #8]
 800a8e2:	3303      	adds	r3, #3
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	021b      	lsls	r3, r3, #8
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	b29a      	uxth	r2, r3
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	791a      	ldrb	r2, [r3, #4]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	795a      	ldrb	r2, [r3, #5]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	799a      	ldrb	r2, [r3, #6]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	79da      	ldrb	r2, [r3, #7]
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a914:	88fb      	ldrh	r3, [r7, #6]
 800a916:	2b08      	cmp	r3, #8
 800a918:	d939      	bls.n	800a98e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	3308      	adds	r3, #8
 800a91e:	781b      	ldrb	r3, [r3, #0]
 800a920:	b29a      	uxth	r2, r3
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	3309      	adds	r3, #9
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	021b      	lsls	r3, r3, #8
 800a92c:	b29b      	uxth	r3, r3
 800a92e:	4313      	orrs	r3, r2
 800a930:	b29a      	uxth	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	330a      	adds	r3, #10
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	b29a      	uxth	r2, r3
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	330b      	adds	r3, #11
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	b29b      	uxth	r3, r3
 800a946:	021b      	lsls	r3, r3, #8
 800a948:	b29b      	uxth	r3, r3
 800a94a:	4313      	orrs	r3, r2
 800a94c:	b29a      	uxth	r2, r3
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	330c      	adds	r3, #12
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	b29a      	uxth	r2, r3
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	330d      	adds	r3, #13
 800a95e:	781b      	ldrb	r3, [r3, #0]
 800a960:	b29b      	uxth	r3, r3
 800a962:	021b      	lsls	r3, r3, #8
 800a964:	b29b      	uxth	r3, r3
 800a966:	4313      	orrs	r3, r2
 800a968:	b29a      	uxth	r2, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	7b9a      	ldrb	r2, [r3, #14]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	7bda      	ldrb	r2, [r3, #15]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	7c1a      	ldrb	r2, [r3, #16]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	7c5a      	ldrb	r2, [r3, #17]
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	745a      	strb	r2, [r3, #17]
  }
}
 800a98e:	bf00      	nop
 800a990:	3714      	adds	r7, #20
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr

0800a99a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b08a      	sub	sp, #40	; 0x28
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	60b9      	str	r1, [r7, #8]
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	781a      	ldrb	r2, [r3, #0]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	785a      	ldrb	r2, [r3, #1]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	3302      	adds	r3, #2
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	b29a      	uxth	r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	3303      	adds	r3, #3
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	021b      	lsls	r3, r3, #8
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	791a      	ldrb	r2, [r3, #4]
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	795a      	ldrb	r2, [r3, #5]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	799a      	ldrb	r2, [r3, #6]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	79da      	ldrb	r2, [r3, #7]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	7a1a      	ldrb	r2, [r3, #8]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aa10:	88fb      	ldrh	r3, [r7, #6]
 800aa12:	2b09      	cmp	r3, #9
 800aa14:	d95f      	bls.n	800aad6 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800aa16:	2309      	movs	r3, #9
 800aa18:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aa1e:	e051      	b.n	800aac4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa20:	f107 0316 	add.w	r3, r7, #22
 800aa24:	4619      	mov	r1, r3
 800aa26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa28:	f000 f8e8 	bl	800abfc <USBH_GetNextDesc>
 800aa2c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800aa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa30:	785b      	ldrb	r3, [r3, #1]
 800aa32:	2b04      	cmp	r3, #4
 800aa34:	d146      	bne.n	800aac4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800aa36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa3a:	221a      	movs	r2, #26
 800aa3c:	fb02 f303 	mul.w	r3, r2, r3
 800aa40:	3308      	adds	r3, #8
 800aa42:	68fa      	ldr	r2, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	3302      	adds	r3, #2
 800aa48:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800aa4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa4c:	69f8      	ldr	r0, [r7, #28]
 800aa4e:	f000 f846 	bl	800aade <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800aa52:	2300      	movs	r3, #0
 800aa54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aa5c:	e022      	b.n	800aaa4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800aa5e:	f107 0316 	add.w	r3, r7, #22
 800aa62:	4619      	mov	r1, r3
 800aa64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa66:	f000 f8c9 	bl	800abfc <USBH_GetNextDesc>
 800aa6a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800aa6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6e:	785b      	ldrb	r3, [r3, #1]
 800aa70:	2b05      	cmp	r3, #5
 800aa72:	d117      	bne.n	800aaa4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800aa74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa78:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800aa7c:	3201      	adds	r2, #1
 800aa7e:	00d2      	lsls	r2, r2, #3
 800aa80:	211a      	movs	r1, #26
 800aa82:	fb01 f303 	mul.w	r3, r1, r3
 800aa86:	4413      	add	r3, r2
 800aa88:	3308      	adds	r3, #8
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	3304      	adds	r3, #4
 800aa90:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800aa92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800aa94:	69b8      	ldr	r0, [r7, #24]
 800aa96:	f000 f851 	bl	800ab3c <USBH_ParseEPDesc>
            ep_ix++;
 800aa9a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800aaa4:	69fb      	ldr	r3, [r7, #28]
 800aaa6:	791b      	ldrb	r3, [r3, #4]
 800aaa8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d204      	bcs.n	800aaba <USBH_ParseCfgDesc+0x120>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	885a      	ldrh	r2, [r3, #2]
 800aab4:	8afb      	ldrh	r3, [r7, #22]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	d8d1      	bhi.n	800aa5e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800aaba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aabe:	3301      	adds	r3, #1
 800aac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aac4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aac8:	2b01      	cmp	r3, #1
 800aaca:	d804      	bhi.n	800aad6 <USBH_ParseCfgDesc+0x13c>
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	885a      	ldrh	r2, [r3, #2]
 800aad0:	8afb      	ldrh	r3, [r7, #22]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d8a4      	bhi.n	800aa20 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800aad6:	bf00      	nop
 800aad8:	3728      	adds	r7, #40	; 0x28
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}

0800aade <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800aade:	b480      	push	{r7}
 800aae0:	b083      	sub	sp, #12
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]
 800aae6:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	781a      	ldrb	r2, [r3, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	785a      	ldrb	r2, [r3, #1]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	789a      	ldrb	r2, [r3, #2]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	78da      	ldrb	r2, [r3, #3]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	791a      	ldrb	r2, [r3, #4]
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	795a      	ldrb	r2, [r3, #5]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	799a      	ldrb	r2, [r3, #6]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	79da      	ldrb	r2, [r3, #7]
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	7a1a      	ldrb	r2, [r3, #8]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	721a      	strb	r2, [r3, #8]
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	781a      	ldrb	r2, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	785a      	ldrb	r2, [r3, #1]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	789a      	ldrb	r2, [r3, #2]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	78da      	ldrb	r2, [r3, #3]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	3304      	adds	r3, #4
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	3305      	adds	r3, #5
 800ab72:	781b      	ldrb	r3, [r3, #0]
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	021b      	lsls	r3, r3, #8
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	799a      	ldrb	r2, [r3, #6]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	719a      	strb	r2, [r3, #6]
}
 800ab8a:	bf00      	nop
 800ab8c:	370c      	adds	r7, #12
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b087      	sub	sp, #28
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	60f8      	str	r0, [r7, #12]
 800ab9e:	60b9      	str	r1, [r7, #8]
 800aba0:	4613      	mov	r3, r2
 800aba2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	3301      	adds	r3, #1
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	2b03      	cmp	r3, #3
 800abac:	d120      	bne.n	800abf0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	781b      	ldrb	r3, [r3, #0]
 800abb2:	1e9a      	subs	r2, r3, #2
 800abb4:	88fb      	ldrh	r3, [r7, #6]
 800abb6:	4293      	cmp	r3, r2
 800abb8:	bf28      	it	cs
 800abba:	4613      	movcs	r3, r2
 800abbc:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	3302      	adds	r3, #2
 800abc2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800abc4:	2300      	movs	r3, #0
 800abc6:	82fb      	strh	r3, [r7, #22]
 800abc8:	e00b      	b.n	800abe2 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800abca:	8afb      	ldrh	r3, [r7, #22]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	4413      	add	r3, r2
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	701a      	strb	r2, [r3, #0]
      pdest++;
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	3301      	adds	r3, #1
 800abda:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800abdc:	8afb      	ldrh	r3, [r7, #22]
 800abde:	3302      	adds	r3, #2
 800abe0:	82fb      	strh	r3, [r7, #22]
 800abe2:	8afa      	ldrh	r2, [r7, #22]
 800abe4:	8abb      	ldrh	r3, [r7, #20]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d3ef      	bcc.n	800abca <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	2200      	movs	r2, #0
 800abee:	701a      	strb	r2, [r3, #0]
  }
}
 800abf0:	bf00      	nop
 800abf2:	371c      	adds	r7, #28
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	881a      	ldrh	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	b29b      	uxth	r3, r3
 800ac10:	4413      	add	r3, r2
 800ac12:	b29a      	uxth	r2, r3
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4413      	add	r3, r2
 800ac22:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ac24:	68fb      	ldr	r3, [r7, #12]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3714      	adds	r7, #20
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ac32:	b580      	push	{r7, lr}
 800ac34:	b086      	sub	sp, #24
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	4613      	mov	r3, r2
 800ac3e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800ac40:	2301      	movs	r3, #1
 800ac42:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	789b      	ldrb	r3, [r3, #2]
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d002      	beq.n	800ac52 <USBH_CtlReq+0x20>
 800ac4c:	2b02      	cmp	r3, #2
 800ac4e:	d00f      	beq.n	800ac70 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ac50:	e027      	b.n	800aca2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	68ba      	ldr	r2, [r7, #8]
 800ac56:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	88fa      	ldrh	r2, [r7, #6]
 800ac5c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2201      	movs	r2, #1
 800ac62:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2202      	movs	r2, #2
 800ac68:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	75fb      	strb	r3, [r7, #23]
      break;
 800ac6e:	e018      	b.n	800aca2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 f81b 	bl	800acac <USBH_HandleControl>
 800ac76:	4603      	mov	r3, r0
 800ac78:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <USBH_CtlReq+0x54>
 800ac80:	7dfb      	ldrb	r3, [r7, #23]
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d106      	bne.n	800ac94 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	761a      	strb	r2, [r3, #24]
      break;
 800ac92:	e005      	b.n	800aca0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d102      	bne.n	800aca0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	709a      	strb	r2, [r3, #2]
      break;
 800aca0:	bf00      	nop
  }
  return status;
 800aca2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b086      	sub	sp, #24
 800acb0:	af02      	add	r7, sp, #8
 800acb2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800acb4:	2301      	movs	r3, #1
 800acb6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800acb8:	2300      	movs	r3, #0
 800acba:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	7e1b      	ldrb	r3, [r3, #24]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	2b0a      	cmp	r3, #10
 800acc4:	f200 8156 	bhi.w	800af74 <USBH_HandleControl+0x2c8>
 800acc8:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <USBH_HandleControl+0x24>)
 800acca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acce:	bf00      	nop
 800acd0:	0800acfd 	.word	0x0800acfd
 800acd4:	0800ad17 	.word	0x0800ad17
 800acd8:	0800ad81 	.word	0x0800ad81
 800acdc:	0800ada7 	.word	0x0800ada7
 800ace0:	0800addf 	.word	0x0800addf
 800ace4:	0800ae09 	.word	0x0800ae09
 800ace8:	0800ae5b 	.word	0x0800ae5b
 800acec:	0800ae7d 	.word	0x0800ae7d
 800acf0:	0800aeb9 	.word	0x0800aeb9
 800acf4:	0800aedf 	.word	0x0800aedf
 800acf8:	0800af1d 	.word	0x0800af1d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f103 0110 	add.w	r1, r3, #16
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	795b      	ldrb	r3, [r3, #5]
 800ad06:	461a      	mov	r2, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f000 f943 	bl	800af94 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2202      	movs	r2, #2
 800ad12:	761a      	strb	r2, [r3, #24]
      break;
 800ad14:	e139      	b.n	800af8a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	795b      	ldrb	r3, [r3, #5]
 800ad1a:	4619      	mov	r1, r3
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f000 fcc5 	bl	800b6ac <USBH_LL_GetURBState>
 800ad22:	4603      	mov	r3, r0
 800ad24:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad26:	7bbb      	ldrb	r3, [r7, #14]
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d11e      	bne.n	800ad6a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	7c1b      	ldrb	r3, [r3, #16]
 800ad30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ad34:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	8adb      	ldrh	r3, [r3, #22]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00a      	beq.n	800ad54 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ad3e:	7b7b      	ldrb	r3, [r7, #13]
 800ad40:	2b80      	cmp	r3, #128	; 0x80
 800ad42:	d103      	bne.n	800ad4c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2203      	movs	r2, #3
 800ad48:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ad4a:	e115      	b.n	800af78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2205      	movs	r2, #5
 800ad50:	761a      	strb	r2, [r3, #24]
      break;
 800ad52:	e111      	b.n	800af78 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ad54:	7b7b      	ldrb	r3, [r7, #13]
 800ad56:	2b80      	cmp	r3, #128	; 0x80
 800ad58:	d103      	bne.n	800ad62 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2209      	movs	r2, #9
 800ad5e:	761a      	strb	r2, [r3, #24]
      break;
 800ad60:	e10a      	b.n	800af78 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2207      	movs	r2, #7
 800ad66:	761a      	strb	r2, [r3, #24]
      break;
 800ad68:	e106      	b.n	800af78 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	2b04      	cmp	r3, #4
 800ad6e:	d003      	beq.n	800ad78 <USBH_HandleControl+0xcc>
 800ad70:	7bbb      	ldrb	r3, [r7, #14]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	f040 8100 	bne.w	800af78 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	220b      	movs	r2, #11
 800ad7c:	761a      	strb	r2, [r3, #24]
      break;
 800ad7e:	e0fb      	b.n	800af78 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6899      	ldr	r1, [r3, #8]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	899a      	ldrh	r2, [r3, #12]
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	791b      	ldrb	r3, [r3, #4]
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f000 f93a 	bl	800b012 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2204      	movs	r2, #4
 800ada2:	761a      	strb	r2, [r3, #24]
      break;
 800ada4:	e0f1      	b.n	800af8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	791b      	ldrb	r3, [r3, #4]
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fc7d 	bl	800b6ac <USBH_LL_GetURBState>
 800adb2:	4603      	mov	r3, r0
 800adb4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800adb6:	7bbb      	ldrb	r3, [r7, #14]
 800adb8:	2b01      	cmp	r3, #1
 800adba:	d102      	bne.n	800adc2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2209      	movs	r2, #9
 800adc0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800adc2:	7bbb      	ldrb	r3, [r7, #14]
 800adc4:	2b05      	cmp	r3, #5
 800adc6:	d102      	bne.n	800adce <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800adc8:	2303      	movs	r3, #3
 800adca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800adcc:	e0d6      	b.n	800af7c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800adce:	7bbb      	ldrb	r3, [r7, #14]
 800add0:	2b04      	cmp	r3, #4
 800add2:	f040 80d3 	bne.w	800af7c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	220b      	movs	r2, #11
 800adda:	761a      	strb	r2, [r3, #24]
      break;
 800addc:	e0ce      	b.n	800af7c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6899      	ldr	r1, [r3, #8]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	899a      	ldrh	r2, [r3, #12]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	795b      	ldrb	r3, [r3, #5]
 800adea:	2001      	movs	r0, #1
 800adec:	9000      	str	r0, [sp, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 f8ea 	bl	800afc8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800adfa:	b29a      	uxth	r2, r3
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2206      	movs	r2, #6
 800ae04:	761a      	strb	r2, [r3, #24]
      break;
 800ae06:	e0c0      	b.n	800af8a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	795b      	ldrb	r3, [r3, #5]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 fc4c 	bl	800b6ac <USBH_LL_GetURBState>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae18:	7bbb      	ldrb	r3, [r7, #14]
 800ae1a:	2b01      	cmp	r3, #1
 800ae1c:	d103      	bne.n	800ae26 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2207      	movs	r2, #7
 800ae22:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae24:	e0ac      	b.n	800af80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800ae26:	7bbb      	ldrb	r3, [r7, #14]
 800ae28:	2b05      	cmp	r3, #5
 800ae2a:	d105      	bne.n	800ae38 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	220c      	movs	r2, #12
 800ae30:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ae32:	2303      	movs	r3, #3
 800ae34:	73fb      	strb	r3, [r7, #15]
      break;
 800ae36:	e0a3      	b.n	800af80 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ae38:	7bbb      	ldrb	r3, [r7, #14]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d103      	bne.n	800ae46 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2205      	movs	r2, #5
 800ae42:	761a      	strb	r2, [r3, #24]
      break;
 800ae44:	e09c      	b.n	800af80 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	f040 8099 	bne.w	800af80 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	220b      	movs	r2, #11
 800ae52:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae54:	2302      	movs	r3, #2
 800ae56:	73fb      	strb	r3, [r7, #15]
      break;
 800ae58:	e092      	b.n	800af80 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	791b      	ldrb	r3, [r3, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	2100      	movs	r1, #0
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f000 f8d5 	bl	800b012 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae6e:	b29a      	uxth	r2, r3
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2208      	movs	r2, #8
 800ae78:	761a      	strb	r2, [r3, #24]

      break;
 800ae7a:	e086      	b.n	800af8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	791b      	ldrb	r3, [r3, #4]
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 fc12 	bl	800b6ac <USBH_LL_GetURBState>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae8c:	7bbb      	ldrb	r3, [r7, #14]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d105      	bne.n	800ae9e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	220d      	movs	r2, #13
 800ae96:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800ae9c:	e072      	b.n	800af84 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ae9e:	7bbb      	ldrb	r3, [r7, #14]
 800aea0:	2b04      	cmp	r3, #4
 800aea2:	d103      	bne.n	800aeac <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	220b      	movs	r2, #11
 800aea8:	761a      	strb	r2, [r3, #24]
      break;
 800aeaa:	e06b      	b.n	800af84 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800aeac:	7bbb      	ldrb	r3, [r7, #14]
 800aeae:	2b05      	cmp	r3, #5
 800aeb0:	d168      	bne.n	800af84 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800aeb2:	2303      	movs	r3, #3
 800aeb4:	73fb      	strb	r3, [r7, #15]
      break;
 800aeb6:	e065      	b.n	800af84 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	795b      	ldrb	r3, [r3, #5]
 800aebc:	2201      	movs	r2, #1
 800aebe:	9200      	str	r2, [sp, #0]
 800aec0:	2200      	movs	r2, #0
 800aec2:	2100      	movs	r1, #0
 800aec4:	6878      	ldr	r0, [r7, #4]
 800aec6:	f000 f87f 	bl	800afc8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aed0:	b29a      	uxth	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	220a      	movs	r2, #10
 800aeda:	761a      	strb	r2, [r3, #24]
      break;
 800aedc:	e055      	b.n	800af8a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	795b      	ldrb	r3, [r3, #5]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 fbe1 	bl	800b6ac <USBH_LL_GetURBState>
 800aeea:	4603      	mov	r3, r0
 800aeec:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aeee:	7bbb      	ldrb	r3, [r7, #14]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d105      	bne.n	800af00 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	220d      	movs	r2, #13
 800aefc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800aefe:	e043      	b.n	800af88 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800af00:	7bbb      	ldrb	r3, [r7, #14]
 800af02:	2b02      	cmp	r3, #2
 800af04:	d103      	bne.n	800af0e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2209      	movs	r2, #9
 800af0a:	761a      	strb	r2, [r3, #24]
      break;
 800af0c:	e03c      	b.n	800af88 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800af0e:	7bbb      	ldrb	r3, [r7, #14]
 800af10:	2b04      	cmp	r3, #4
 800af12:	d139      	bne.n	800af88 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	220b      	movs	r2, #11
 800af18:	761a      	strb	r2, [r3, #24]
      break;
 800af1a:	e035      	b.n	800af88 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	7e5b      	ldrb	r3, [r3, #25]
 800af20:	3301      	adds	r3, #1
 800af22:	b2da      	uxtb	r2, r3
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	765a      	strb	r2, [r3, #25]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	7e5b      	ldrb	r3, [r3, #25]
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d806      	bhi.n	800af3e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2201      	movs	r2, #1
 800af34:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2201      	movs	r2, #1
 800af3a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800af3c:	e025      	b.n	800af8a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800af44:	2106      	movs	r1, #6
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	795b      	ldrb	r3, [r3, #5]
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 f90c 	bl	800b174 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	791b      	ldrb	r3, [r3, #4]
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f906 	bl	800b174 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800af6e:	2302      	movs	r3, #2
 800af70:	73fb      	strb	r3, [r7, #15]
      break;
 800af72:	e00a      	b.n	800af8a <USBH_HandleControl+0x2de>

    default:
      break;
 800af74:	bf00      	nop
 800af76:	e008      	b.n	800af8a <USBH_HandleControl+0x2de>
      break;
 800af78:	bf00      	nop
 800af7a:	e006      	b.n	800af8a <USBH_HandleControl+0x2de>
      break;
 800af7c:	bf00      	nop
 800af7e:	e004      	b.n	800af8a <USBH_HandleControl+0x2de>
      break;
 800af80:	bf00      	nop
 800af82:	e002      	b.n	800af8a <USBH_HandleControl+0x2de>
      break;
 800af84:	bf00      	nop
 800af86:	e000      	b.n	800af8a <USBH_HandleControl+0x2de>
      break;
 800af88:	bf00      	nop
  }

  return status;
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b088      	sub	sp, #32
 800af98:	af04      	add	r7, sp, #16
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	4613      	mov	r3, r2
 800afa0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800afa2:	79f9      	ldrb	r1, [r7, #7]
 800afa4:	2300      	movs	r3, #0
 800afa6:	9303      	str	r3, [sp, #12]
 800afa8:	2308      	movs	r3, #8
 800afaa:	9302      	str	r3, [sp, #8]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	9301      	str	r3, [sp, #4]
 800afb0:	2300      	movs	r3, #0
 800afb2:	9300      	str	r3, [sp, #0]
 800afb4:	2300      	movs	r3, #0
 800afb6:	2200      	movs	r2, #0
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f000 fb46 	bl	800b64a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b088      	sub	sp, #32
 800afcc:	af04      	add	r7, sp, #16
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	4611      	mov	r1, r2
 800afd4:	461a      	mov	r2, r3
 800afd6:	460b      	mov	r3, r1
 800afd8:	80fb      	strh	r3, [r7, #6]
 800afda:	4613      	mov	r3, r2
 800afdc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d001      	beq.n	800afec <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800afe8:	2300      	movs	r3, #0
 800afea:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800afec:	7979      	ldrb	r1, [r7, #5]
 800afee:	7e3b      	ldrb	r3, [r7, #24]
 800aff0:	9303      	str	r3, [sp, #12]
 800aff2:	88fb      	ldrh	r3, [r7, #6]
 800aff4:	9302      	str	r3, [sp, #8]
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	9301      	str	r3, [sp, #4]
 800affa:	2301      	movs	r3, #1
 800affc:	9300      	str	r3, [sp, #0]
 800affe:	2300      	movs	r3, #0
 800b000:	2200      	movs	r2, #0
 800b002:	68f8      	ldr	r0, [r7, #12]
 800b004:	f000 fb21 	bl	800b64a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b008:	2300      	movs	r3, #0
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	3710      	adds	r7, #16
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}

0800b012 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b012:	b580      	push	{r7, lr}
 800b014:	b088      	sub	sp, #32
 800b016:	af04      	add	r7, sp, #16
 800b018:	60f8      	str	r0, [r7, #12]
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	4611      	mov	r1, r2
 800b01e:	461a      	mov	r2, r3
 800b020:	460b      	mov	r3, r1
 800b022:	80fb      	strh	r3, [r7, #6]
 800b024:	4613      	mov	r3, r2
 800b026:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b028:	7979      	ldrb	r1, [r7, #5]
 800b02a:	2300      	movs	r3, #0
 800b02c:	9303      	str	r3, [sp, #12]
 800b02e:	88fb      	ldrh	r3, [r7, #6]
 800b030:	9302      	str	r3, [sp, #8]
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	9301      	str	r3, [sp, #4]
 800b036:	2301      	movs	r3, #1
 800b038:	9300      	str	r3, [sp, #0]
 800b03a:	2300      	movs	r3, #0
 800b03c:	2201      	movs	r2, #1
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f000 fb03 	bl	800b64a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b044:	2300      	movs	r3, #0

}
 800b046:	4618      	mov	r0, r3
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}

0800b04e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b04e:	b580      	push	{r7, lr}
 800b050:	b088      	sub	sp, #32
 800b052:	af04      	add	r7, sp, #16
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	4611      	mov	r1, r2
 800b05a:	461a      	mov	r2, r3
 800b05c:	460b      	mov	r3, r1
 800b05e:	80fb      	strh	r3, [r7, #6]
 800b060:	4613      	mov	r3, r2
 800b062:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d001      	beq.n	800b072 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b072:	7979      	ldrb	r1, [r7, #5]
 800b074:	7e3b      	ldrb	r3, [r7, #24]
 800b076:	9303      	str	r3, [sp, #12]
 800b078:	88fb      	ldrh	r3, [r7, #6]
 800b07a:	9302      	str	r3, [sp, #8]
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	2301      	movs	r3, #1
 800b082:	9300      	str	r3, [sp, #0]
 800b084:	2302      	movs	r3, #2
 800b086:	2200      	movs	r2, #0
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 fade 	bl	800b64a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3710      	adds	r7, #16
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b088      	sub	sp, #32
 800b09c:	af04      	add	r7, sp, #16
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	4611      	mov	r1, r2
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	460b      	mov	r3, r1
 800b0a8:	80fb      	strh	r3, [r7, #6]
 800b0aa:	4613      	mov	r3, r2
 800b0ac:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800b0ae:	7979      	ldrb	r1, [r7, #5]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9303      	str	r3, [sp, #12]
 800b0b4:	88fb      	ldrh	r3, [r7, #6]
 800b0b6:	9302      	str	r3, [sp, #8]
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	9301      	str	r3, [sp, #4]
 800b0bc:	2301      	movs	r3, #1
 800b0be:	9300      	str	r3, [sp, #0]
 800b0c0:	2302      	movs	r3, #2
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f000 fac0 	bl	800b64a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800b0ca:	2300      	movs	r3, #0
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af04      	add	r7, sp, #16
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	4608      	mov	r0, r1
 800b0de:	4611      	mov	r1, r2
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	70fb      	strb	r3, [r7, #3]
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	70bb      	strb	r3, [r7, #2]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b0ee:	7878      	ldrb	r0, [r7, #1]
 800b0f0:	78ba      	ldrb	r2, [r7, #2]
 800b0f2:	78f9      	ldrb	r1, [r7, #3]
 800b0f4:	8b3b      	ldrh	r3, [r7, #24]
 800b0f6:	9302      	str	r3, [sp, #8]
 800b0f8:	7d3b      	ldrb	r3, [r7, #20]
 800b0fa:	9301      	str	r3, [sp, #4]
 800b0fc:	7c3b      	ldrb	r3, [r7, #16]
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	4603      	mov	r3, r0
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fa53 	bl	800b5ae <USBH_LL_OpenPipe>

  return USBH_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b082      	sub	sp, #8
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	460b      	mov	r3, r1
 800b11c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800b11e:	78fb      	ldrb	r3, [r7, #3]
 800b120:	4619      	mov	r1, r3
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 fa72 	bl	800b60c <USBH_LL_ClosePipe>

  return USBH_OK;
 800b128:	2300      	movs	r3, #0
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b084      	sub	sp, #16
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	460b      	mov	r3, r1
 800b13c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f836 	bl	800b1b0 <USBH_GetFreePipe>
 800b144:	4603      	mov	r3, r0
 800b146:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b148:	89fb      	ldrh	r3, [r7, #14]
 800b14a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b14e:	4293      	cmp	r3, r2
 800b150:	d00a      	beq.n	800b168 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800b152:	78fa      	ldrb	r2, [r7, #3]
 800b154:	89fb      	ldrh	r3, [r7, #14]
 800b156:	f003 030f 	and.w	r3, r3, #15
 800b15a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	33e0      	adds	r3, #224	; 0xe0
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	440b      	add	r3, r1
 800b166:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b168:	89fb      	ldrh	r3, [r7, #14]
 800b16a:	b2db      	uxtb	r3, r3
}
 800b16c:	4618      	mov	r0, r3
 800b16e:	3710      	adds	r7, #16
 800b170:	46bd      	mov	sp, r7
 800b172:	bd80      	pop	{r7, pc}

0800b174 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800b180:	78fb      	ldrb	r3, [r7, #3]
 800b182:	2b0a      	cmp	r3, #10
 800b184:	d80d      	bhi.n	800b1a2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b186:	78fb      	ldrb	r3, [r7, #3]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	33e0      	adds	r3, #224	; 0xe0
 800b18c:	009b      	lsls	r3, r3, #2
 800b18e:	4413      	add	r3, r2
 800b190:	685a      	ldr	r2, [r3, #4]
 800b192:	78fb      	ldrb	r3, [r7, #3]
 800b194:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b198:	6879      	ldr	r1, [r7, #4]
 800b19a:	33e0      	adds	r3, #224	; 0xe0
 800b19c:	009b      	lsls	r3, r3, #2
 800b19e:	440b      	add	r3, r1
 800b1a0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	370c      	adds	r7, #12
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800b1bc:	2300      	movs	r3, #0
 800b1be:	73fb      	strb	r3, [r7, #15]
 800b1c0:	e00f      	b.n	800b1e2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	33e0      	adds	r3, #224	; 0xe0
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d102      	bne.n	800b1dc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
 800b1d8:	b29b      	uxth	r3, r3
 800b1da:	e007      	b.n	800b1ec <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800b1dc:	7bfb      	ldrb	r3, [r7, #15]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	73fb      	strb	r3, [r7, #15]
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
 800b1e4:	2b0a      	cmp	r3, #10
 800b1e6:	d9ec      	bls.n	800b1c2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b1e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3714      	adds	r7, #20
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr

0800b1f8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b1fc:	2201      	movs	r2, #1
 800b1fe:	490e      	ldr	r1, [pc, #56]	; (800b238 <MX_USB_HOST_Init+0x40>)
 800b200:	480e      	ldr	r0, [pc, #56]	; (800b23c <MX_USB_HOST_Init+0x44>)
 800b202:	f7fe fca1 	bl	8009b48 <USBH_Init>
 800b206:	4603      	mov	r3, r0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d001      	beq.n	800b210 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b20c:	f7f6 fce0 	bl	8001bd0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b210:	490b      	ldr	r1, [pc, #44]	; (800b240 <MX_USB_HOST_Init+0x48>)
 800b212:	480a      	ldr	r0, [pc, #40]	; (800b23c <MX_USB_HOST_Init+0x44>)
 800b214:	f7fe fd26 	bl	8009c64 <USBH_RegisterClass>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d001      	beq.n	800b222 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b21e:	f7f6 fcd7 	bl	8001bd0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b222:	4806      	ldr	r0, [pc, #24]	; (800b23c <MX_USB_HOST_Init+0x44>)
 800b224:	f7fe fdaa 	bl	8009d7c <USBH_Start>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b22e:	f7f6 fccf 	bl	8001bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b232:	bf00      	nop
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	0800b259 	.word	0x0800b259
 800b23c:	20000538 	.word	0x20000538
 800b240:	2000001c 	.word	0x2000001c

0800b244 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b248:	4802      	ldr	r0, [pc, #8]	; (800b254 <MX_USB_HOST_Process+0x10>)
 800b24a:	f7fe fda7 	bl	8009d9c <USBH_Process>
}
 800b24e:	bf00      	nop
 800b250:	bd80      	pop	{r7, pc}
 800b252:	bf00      	nop
 800b254:	20000538 	.word	0x20000538

0800b258 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b258:	b480      	push	{r7}
 800b25a:	b083      	sub	sp, #12
 800b25c:	af00      	add	r7, sp, #0
 800b25e:	6078      	str	r0, [r7, #4]
 800b260:	460b      	mov	r3, r1
 800b262:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b264:	78fb      	ldrb	r3, [r7, #3]
 800b266:	3b01      	subs	r3, #1
 800b268:	2b04      	cmp	r3, #4
 800b26a:	d819      	bhi.n	800b2a0 <USBH_UserProcess+0x48>
 800b26c:	a201      	add	r2, pc, #4	; (adr r2, 800b274 <USBH_UserProcess+0x1c>)
 800b26e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b272:	bf00      	nop
 800b274:	0800b2a1 	.word	0x0800b2a1
 800b278:	0800b291 	.word	0x0800b291
 800b27c:	0800b2a1 	.word	0x0800b2a1
 800b280:	0800b299 	.word	0x0800b299
 800b284:	0800b289 	.word	0x0800b289
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b288:	4b09      	ldr	r3, [pc, #36]	; (800b2b0 <USBH_UserProcess+0x58>)
 800b28a:	2203      	movs	r2, #3
 800b28c:	701a      	strb	r2, [r3, #0]
  break;
 800b28e:	e008      	b.n	800b2a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b290:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <USBH_UserProcess+0x58>)
 800b292:	2202      	movs	r2, #2
 800b294:	701a      	strb	r2, [r3, #0]
  break;
 800b296:	e004      	b.n	800b2a2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b298:	4b05      	ldr	r3, [pc, #20]	; (800b2b0 <USBH_UserProcess+0x58>)
 800b29a:	2201      	movs	r2, #1
 800b29c:	701a      	strb	r2, [r3, #0]
  break;
 800b29e:	e000      	b.n	800b2a2 <USBH_UserProcess+0x4a>

  default:
  break;
 800b2a0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b2a2:	bf00      	nop
 800b2a4:	370c      	adds	r7, #12
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ac:	4770      	bx	lr
 800b2ae:	bf00      	nop
 800b2b0:	200000cc 	.word	0x200000cc

0800b2b4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b08a      	sub	sp, #40	; 0x28
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2bc:	f107 0314 	add.w	r3, r7, #20
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	601a      	str	r2, [r3, #0]
 800b2c4:	605a      	str	r2, [r3, #4]
 800b2c6:	609a      	str	r2, [r3, #8]
 800b2c8:	60da      	str	r2, [r3, #12]
 800b2ca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2d4:	d147      	bne.n	800b366 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	613b      	str	r3, [r7, #16]
 800b2da:	4b25      	ldr	r3, [pc, #148]	; (800b370 <HAL_HCD_MspInit+0xbc>)
 800b2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2de:	4a24      	ldr	r2, [pc, #144]	; (800b370 <HAL_HCD_MspInit+0xbc>)
 800b2e0:	f043 0301 	orr.w	r3, r3, #1
 800b2e4:	6313      	str	r3, [r2, #48]	; 0x30
 800b2e6:	4b22      	ldr	r3, [pc, #136]	; (800b370 <HAL_HCD_MspInit+0xbc>)
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2ea:	f003 0301 	and.w	r3, r3, #1
 800b2ee:	613b      	str	r3, [r7, #16]
 800b2f0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b2f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b300:	f107 0314 	add.w	r3, r7, #20
 800b304:	4619      	mov	r1, r3
 800b306:	481b      	ldr	r0, [pc, #108]	; (800b374 <HAL_HCD_MspInit+0xc0>)
 800b308:	f7f7 fb92 	bl	8002a30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b30c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b312:	2302      	movs	r3, #2
 800b314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b316:	2300      	movs	r3, #0
 800b318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b31a:	2300      	movs	r3, #0
 800b31c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b31e:	230a      	movs	r3, #10
 800b320:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b322:	f107 0314 	add.w	r3, r7, #20
 800b326:	4619      	mov	r1, r3
 800b328:	4812      	ldr	r0, [pc, #72]	; (800b374 <HAL_HCD_MspInit+0xc0>)
 800b32a:	f7f7 fb81 	bl	8002a30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b32e:	4b10      	ldr	r3, [pc, #64]	; (800b370 <HAL_HCD_MspInit+0xbc>)
 800b330:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b332:	4a0f      	ldr	r2, [pc, #60]	; (800b370 <HAL_HCD_MspInit+0xbc>)
 800b334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b338:	6353      	str	r3, [r2, #52]	; 0x34
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
 800b33e:	4b0c      	ldr	r3, [pc, #48]	; (800b370 <HAL_HCD_MspInit+0xbc>)
 800b340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b342:	4a0b      	ldr	r2, [pc, #44]	; (800b370 <HAL_HCD_MspInit+0xbc>)
 800b344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b348:	6453      	str	r3, [r2, #68]	; 0x44
 800b34a:	4b09      	ldr	r3, [pc, #36]	; (800b370 <HAL_HCD_MspInit+0xbc>)
 800b34c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b34e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b352:	60fb      	str	r3, [r7, #12]
 800b354:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b356:	2200      	movs	r2, #0
 800b358:	2100      	movs	r1, #0
 800b35a:	2043      	movs	r0, #67	; 0x43
 800b35c:	f7f7 fb31 	bl	80029c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b360:	2043      	movs	r0, #67	; 0x43
 800b362:	f7f7 fb4a 	bl	80029fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b366:	bf00      	nop
 800b368:	3728      	adds	r7, #40	; 0x28
 800b36a:	46bd      	mov	sp, r7
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	40023800 	.word	0x40023800
 800b374:	40020000 	.word	0x40020000

0800b378 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b082      	sub	sp, #8
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b386:	4618      	mov	r0, r3
 800b388:	f7ff f8db 	bl	800a542 <USBH_LL_IncTimer>
}
 800b38c:	bf00      	nop
 800b38e:	3708      	adds	r7, #8
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7ff f913 	bl	800a5ce <USBH_LL_Connect>
}
 800b3a8:	bf00      	nop
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7ff f91c 	bl	800a5fc <USBH_LL_Disconnect>
}
 800b3c4:	bf00      	nop
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	70fb      	strb	r3, [r7, #3]
 800b3d8:	4613      	mov	r3, r2
 800b3da:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b3dc:	bf00      	nop
 800b3de:	370c      	adds	r7, #12
 800b3e0:	46bd      	mov	sp, r7
 800b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e6:	4770      	bx	lr

0800b3e8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff f8cd 	bl	800a596 <USBH_LL_PortEnabled>
}
 800b3fc:	bf00      	nop
 800b3fe:	3708      	adds	r7, #8
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b412:	4618      	mov	r0, r3
 800b414:	f7ff f8cd 	bl	800a5b2 <USBH_LL_PortDisabled>
}
 800b418:	bf00      	nop
 800b41a:	3708      	adds	r7, #8
 800b41c:	46bd      	mov	sp, r7
 800b41e:	bd80      	pop	{r7, pc}

0800b420 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b082      	sub	sp, #8
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d12a      	bne.n	800b488 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b432:	4a18      	ldr	r2, [pc, #96]	; (800b494 <USBH_LL_Init+0x74>)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a15      	ldr	r2, [pc, #84]	; (800b494 <USBH_LL_Init+0x74>)
 800b43e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b442:	4b14      	ldr	r3, [pc, #80]	; (800b494 <USBH_LL_Init+0x74>)
 800b444:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b448:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b44a:	4b12      	ldr	r3, [pc, #72]	; (800b494 <USBH_LL_Init+0x74>)
 800b44c:	2208      	movs	r2, #8
 800b44e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b450:	4b10      	ldr	r3, [pc, #64]	; (800b494 <USBH_LL_Init+0x74>)
 800b452:	2201      	movs	r2, #1
 800b454:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b456:	4b0f      	ldr	r3, [pc, #60]	; (800b494 <USBH_LL_Init+0x74>)
 800b458:	2200      	movs	r2, #0
 800b45a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b45c:	4b0d      	ldr	r3, [pc, #52]	; (800b494 <USBH_LL_Init+0x74>)
 800b45e:	2202      	movs	r2, #2
 800b460:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b462:	4b0c      	ldr	r3, [pc, #48]	; (800b494 <USBH_LL_Init+0x74>)
 800b464:	2200      	movs	r2, #0
 800b466:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b468:	480a      	ldr	r0, [pc, #40]	; (800b494 <USBH_LL_Init+0x74>)
 800b46a:	f7f7 fcc8 	bl	8002dfe <HAL_HCD_Init>
 800b46e:	4603      	mov	r3, r0
 800b470:	2b00      	cmp	r3, #0
 800b472:	d001      	beq.n	800b478 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b474:	f7f6 fbac 	bl	8001bd0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b478:	4806      	ldr	r0, [pc, #24]	; (800b494 <USBH_LL_Init+0x74>)
 800b47a:	f7f8 f8a5 	bl	80035c8 <HAL_HCD_GetCurrentFrame>
 800b47e:	4603      	mov	r3, r0
 800b480:	4619      	mov	r1, r3
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f7ff f84e 	bl	800a524 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	3708      	adds	r7, #8
 800b48e:	46bd      	mov	sp, r7
 800b490:	bd80      	pop	{r7, pc}
 800b492:	bf00      	nop
 800b494:	20000910 	.word	0x20000910

0800b498 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7f8 f814 	bl	80034dc <HAL_HCD_Start>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	4618      	mov	r0, r3
 800b4bc:	f000 f95c 	bl	800b778 <USBH_Get_USB_Status>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4c4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3710      	adds	r7, #16
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}

0800b4ce <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b4ce:	b580      	push	{r7, lr}
 800b4d0:	b084      	sub	sp, #16
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f7f8 f81c 	bl	8003522 <HAL_HCD_Stop>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4ee:	7bfb      	ldrb	r3, [r7, #15]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 f941 	bl	800b778 <USBH_Get_USB_Status>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	3710      	adds	r7, #16
 800b500:	46bd      	mov	sp, r7
 800b502:	bd80      	pop	{r7, pc}

0800b504 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b50c:	2301      	movs	r3, #1
 800b50e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b516:	4618      	mov	r0, r3
 800b518:	f7f8 f864 	bl	80035e4 <HAL_HCD_GetCurrentSpeed>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b02      	cmp	r3, #2
 800b520:	d00c      	beq.n	800b53c <USBH_LL_GetSpeed+0x38>
 800b522:	2b02      	cmp	r3, #2
 800b524:	d80d      	bhi.n	800b542 <USBH_LL_GetSpeed+0x3e>
 800b526:	2b00      	cmp	r3, #0
 800b528:	d002      	beq.n	800b530 <USBH_LL_GetSpeed+0x2c>
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d003      	beq.n	800b536 <USBH_LL_GetSpeed+0x32>
 800b52e:	e008      	b.n	800b542 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b530:	2300      	movs	r3, #0
 800b532:	73fb      	strb	r3, [r7, #15]
    break;
 800b534:	e008      	b.n	800b548 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b536:	2301      	movs	r3, #1
 800b538:	73fb      	strb	r3, [r7, #15]
    break;
 800b53a:	e005      	b.n	800b548 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b53c:	2302      	movs	r3, #2
 800b53e:	73fb      	strb	r3, [r7, #15]
    break;
 800b540:	e002      	b.n	800b548 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b542:	2301      	movs	r3, #1
 800b544:	73fb      	strb	r3, [r7, #15]
    break;
 800b546:	bf00      	nop
  }
  return  speed;
 800b548:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3710      	adds	r7, #16
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b084      	sub	sp, #16
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b55a:	2300      	movs	r3, #0
 800b55c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b55e:	2300      	movs	r3, #0
 800b560:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b568:	4618      	mov	r0, r3
 800b56a:	f7f7 fff7 	bl	800355c <HAL_HCD_ResetPort>
 800b56e:	4603      	mov	r3, r0
 800b570:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b572:	7bfb      	ldrb	r3, [r7, #15]
 800b574:	4618      	mov	r0, r3
 800b576:	f000 f8ff 	bl	800b778 <USBH_Get_USB_Status>
 800b57a:	4603      	mov	r3, r0
 800b57c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b57e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b580:	4618      	mov	r0, r3
 800b582:	3710      	adds	r7, #16
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b59a:	78fa      	ldrb	r2, [r7, #3]
 800b59c:	4611      	mov	r1, r2
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7f7 fffe 	bl	80035a0 <HAL_HCD_HC_GetXferCount>
 800b5a4:	4603      	mov	r3, r0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}

0800b5ae <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b5ae:	b590      	push	{r4, r7, lr}
 800b5b0:	b089      	sub	sp, #36	; 0x24
 800b5b2:	af04      	add	r7, sp, #16
 800b5b4:	6078      	str	r0, [r7, #4]
 800b5b6:	4608      	mov	r0, r1
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	4603      	mov	r3, r0
 800b5be:	70fb      	strb	r3, [r7, #3]
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	70bb      	strb	r3, [r7, #2]
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b5d6:	787c      	ldrb	r4, [r7, #1]
 800b5d8:	78ba      	ldrb	r2, [r7, #2]
 800b5da:	78f9      	ldrb	r1, [r7, #3]
 800b5dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b5de:	9302      	str	r3, [sp, #8]
 800b5e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b5e4:	9301      	str	r3, [sp, #4]
 800b5e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5ea:	9300      	str	r3, [sp, #0]
 800b5ec:	4623      	mov	r3, r4
 800b5ee:	f7f7 fc68 	bl	8002ec2 <HAL_HCD_HC_Init>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5f6:	7bfb      	ldrb	r3, [r7, #15]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 f8bd 	bl	800b778 <USBH_Get_USB_Status>
 800b5fe:	4603      	mov	r3, r0
 800b600:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b602:	7bbb      	ldrb	r3, [r7, #14]
}
 800b604:	4618      	mov	r0, r3
 800b606:	3714      	adds	r7, #20
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd90      	pop	{r4, r7, pc}

0800b60c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	460b      	mov	r3, r1
 800b616:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b618:	2300      	movs	r3, #0
 800b61a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b626:	78fa      	ldrb	r2, [r7, #3]
 800b628:	4611      	mov	r1, r2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7f7 fcd8 	bl	8002fe0 <HAL_HCD_HC_Halt>
 800b630:	4603      	mov	r3, r0
 800b632:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b634:	7bfb      	ldrb	r3, [r7, #15]
 800b636:	4618      	mov	r0, r3
 800b638:	f000 f89e 	bl	800b778 <USBH_Get_USB_Status>
 800b63c:	4603      	mov	r3, r0
 800b63e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b640:	7bbb      	ldrb	r3, [r7, #14]
}
 800b642:	4618      	mov	r0, r3
 800b644:	3710      	adds	r7, #16
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b64a:	b590      	push	{r4, r7, lr}
 800b64c:	b089      	sub	sp, #36	; 0x24
 800b64e:	af04      	add	r7, sp, #16
 800b650:	6078      	str	r0, [r7, #4]
 800b652:	4608      	mov	r0, r1
 800b654:	4611      	mov	r1, r2
 800b656:	461a      	mov	r2, r3
 800b658:	4603      	mov	r3, r0
 800b65a:	70fb      	strb	r3, [r7, #3]
 800b65c:	460b      	mov	r3, r1
 800b65e:	70bb      	strb	r3, [r7, #2]
 800b660:	4613      	mov	r3, r2
 800b662:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b668:	2300      	movs	r3, #0
 800b66a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b672:	787c      	ldrb	r4, [r7, #1]
 800b674:	78ba      	ldrb	r2, [r7, #2]
 800b676:	78f9      	ldrb	r1, [r7, #3]
 800b678:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b67c:	9303      	str	r3, [sp, #12]
 800b67e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b680:	9302      	str	r3, [sp, #8]
 800b682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b68a:	9300      	str	r3, [sp, #0]
 800b68c:	4623      	mov	r3, r4
 800b68e:	f7f7 fccb 	bl	8003028 <HAL_HCD_HC_SubmitRequest>
 800b692:	4603      	mov	r3, r0
 800b694:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b696:	7bfb      	ldrb	r3, [r7, #15]
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 f86d 	bl	800b778 <USBH_Get_USB_Status>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	3714      	adds	r7, #20
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	bd90      	pop	{r4, r7, pc}

0800b6ac <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6be:	78fa      	ldrb	r2, [r7, #3]
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7f7 ff58 	bl	8003578 <HAL_HCD_HC_GetURBState>
 800b6c8:	4603      	mov	r3, r0
}
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	3708      	adds	r7, #8
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	bd80      	pop	{r7, pc}

0800b6d2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b6d2:	b580      	push	{r7, lr}
 800b6d4:	b082      	sub	sp, #8
 800b6d6:	af00      	add	r7, sp, #0
 800b6d8:	6078      	str	r0, [r7, #4]
 800b6da:	460b      	mov	r3, r1
 800b6dc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b6e4:	2b01      	cmp	r3, #1
 800b6e6:	d103      	bne.n	800b6f0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b6e8:	78fb      	ldrb	r3, [r7, #3]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f000 f870 	bl	800b7d0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b6f0:	20c8      	movs	r0, #200	; 0xc8
 800b6f2:	f7f7 f867 	bl	80027c4 <HAL_Delay>
  return USBH_OK;
 800b6f6:	2300      	movs	r3, #0
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3708      	adds	r7, #8
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	70fb      	strb	r3, [r7, #3]
 800b70c:	4613      	mov	r3, r2
 800b70e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b716:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b718:	78fb      	ldrb	r3, [r7, #3]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	212c      	movs	r1, #44	; 0x2c
 800b71e:	fb01 f303 	mul.w	r3, r1, r3
 800b722:	4413      	add	r3, r2
 800b724:	333b      	adds	r3, #59	; 0x3b
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d009      	beq.n	800b740 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b72c:	78fb      	ldrb	r3, [r7, #3]
 800b72e:	68fa      	ldr	r2, [r7, #12]
 800b730:	212c      	movs	r1, #44	; 0x2c
 800b732:	fb01 f303 	mul.w	r3, r1, r3
 800b736:	4413      	add	r3, r2
 800b738:	3354      	adds	r3, #84	; 0x54
 800b73a:	78ba      	ldrb	r2, [r7, #2]
 800b73c:	701a      	strb	r2, [r3, #0]
 800b73e:	e008      	b.n	800b752 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b740:	78fb      	ldrb	r3, [r7, #3]
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	212c      	movs	r1, #44	; 0x2c
 800b746:	fb01 f303 	mul.w	r3, r1, r3
 800b74a:	4413      	add	r3, r2
 800b74c:	3355      	adds	r3, #85	; 0x55
 800b74e:	78ba      	ldrb	r2, [r7, #2]
 800b750:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b752:	2300      	movs	r3, #0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3714      	adds	r7, #20
 800b758:	46bd      	mov	sp, r7
 800b75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75e:	4770      	bx	lr

0800b760 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7f7 f82b 	bl	80027c4 <HAL_Delay>
}
 800b76e:	bf00      	nop
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}
	...

0800b778 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b778:	b480      	push	{r7}
 800b77a:	b085      	sub	sp, #20
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b782:	2300      	movs	r3, #0
 800b784:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b786:	79fb      	ldrb	r3, [r7, #7]
 800b788:	2b03      	cmp	r3, #3
 800b78a:	d817      	bhi.n	800b7bc <USBH_Get_USB_Status+0x44>
 800b78c:	a201      	add	r2, pc, #4	; (adr r2, 800b794 <USBH_Get_USB_Status+0x1c>)
 800b78e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b792:	bf00      	nop
 800b794:	0800b7a5 	.word	0x0800b7a5
 800b798:	0800b7ab 	.word	0x0800b7ab
 800b79c:	0800b7b1 	.word	0x0800b7b1
 800b7a0:	0800b7b7 	.word	0x0800b7b7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7a8:	e00b      	b.n	800b7c2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b7aa:	2302      	movs	r3, #2
 800b7ac:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ae:	e008      	b.n	800b7c2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b7b0:	2301      	movs	r3, #1
 800b7b2:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b4:	e005      	b.n	800b7c2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b7b6:	2302      	movs	r3, #2
 800b7b8:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ba:	e002      	b.n	800b7c2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b7bc:	2302      	movs	r3, #2
 800b7be:	73fb      	strb	r3, [r7, #15]
    break;
 800b7c0:	bf00      	nop
  }
  return usb_status;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3714      	adds	r7, #20
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b7de:	79fb      	ldrb	r3, [r7, #7]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d102      	bne.n	800b7ea <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	73fb      	strb	r3, [r7, #15]
 800b7e8:	e001      	b.n	800b7ee <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	2101      	movs	r1, #1
 800b7f4:	4803      	ldr	r0, [pc, #12]	; (800b804 <MX_DriverVbusFS+0x34>)
 800b7f6:	f7f7 facf 	bl	8002d98 <HAL_GPIO_WritePin>
}
 800b7fa:	bf00      	nop
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
 800b802:	bf00      	nop
 800b804:	40020800 	.word	0x40020800

0800b808 <__errno>:
 800b808:	4b01      	ldr	r3, [pc, #4]	; (800b810 <__errno+0x8>)
 800b80a:	6818      	ldr	r0, [r3, #0]
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	2000003c 	.word	0x2000003c

0800b814 <__libc_init_array>:
 800b814:	b570      	push	{r4, r5, r6, lr}
 800b816:	4d0d      	ldr	r5, [pc, #52]	; (800b84c <__libc_init_array+0x38>)
 800b818:	4c0d      	ldr	r4, [pc, #52]	; (800b850 <__libc_init_array+0x3c>)
 800b81a:	1b64      	subs	r4, r4, r5
 800b81c:	10a4      	asrs	r4, r4, #2
 800b81e:	2600      	movs	r6, #0
 800b820:	42a6      	cmp	r6, r4
 800b822:	d109      	bne.n	800b838 <__libc_init_array+0x24>
 800b824:	4d0b      	ldr	r5, [pc, #44]	; (800b854 <__libc_init_array+0x40>)
 800b826:	4c0c      	ldr	r4, [pc, #48]	; (800b858 <__libc_init_array+0x44>)
 800b828:	f000 f8f8 	bl	800ba1c <_init>
 800b82c:	1b64      	subs	r4, r4, r5
 800b82e:	10a4      	asrs	r4, r4, #2
 800b830:	2600      	movs	r6, #0
 800b832:	42a6      	cmp	r6, r4
 800b834:	d105      	bne.n	800b842 <__libc_init_array+0x2e>
 800b836:	bd70      	pop	{r4, r5, r6, pc}
 800b838:	f855 3b04 	ldr.w	r3, [r5], #4
 800b83c:	4798      	blx	r3
 800b83e:	3601      	adds	r6, #1
 800b840:	e7ee      	b.n	800b820 <__libc_init_array+0xc>
 800b842:	f855 3b04 	ldr.w	r3, [r5], #4
 800b846:	4798      	blx	r3
 800b848:	3601      	adds	r6, #1
 800b84a:	e7f2      	b.n	800b832 <__libc_init_array+0x1e>
 800b84c:	0800dec8 	.word	0x0800dec8
 800b850:	0800dec8 	.word	0x0800dec8
 800b854:	0800dec8 	.word	0x0800dec8
 800b858:	0800decc 	.word	0x0800decc

0800b85c <malloc>:
 800b85c:	4b02      	ldr	r3, [pc, #8]	; (800b868 <malloc+0xc>)
 800b85e:	4601      	mov	r1, r0
 800b860:	6818      	ldr	r0, [r3, #0]
 800b862:	f000 b863 	b.w	800b92c <_malloc_r>
 800b866:	bf00      	nop
 800b868:	2000003c 	.word	0x2000003c

0800b86c <free>:
 800b86c:	4b02      	ldr	r3, [pc, #8]	; (800b878 <free+0xc>)
 800b86e:	4601      	mov	r1, r0
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	f000 b80b 	b.w	800b88c <_free_r>
 800b876:	bf00      	nop
 800b878:	2000003c 	.word	0x2000003c

0800b87c <memset>:
 800b87c:	4402      	add	r2, r0
 800b87e:	4603      	mov	r3, r0
 800b880:	4293      	cmp	r3, r2
 800b882:	d100      	bne.n	800b886 <memset+0xa>
 800b884:	4770      	bx	lr
 800b886:	f803 1b01 	strb.w	r1, [r3], #1
 800b88a:	e7f9      	b.n	800b880 <memset+0x4>

0800b88c <_free_r>:
 800b88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b88e:	2900      	cmp	r1, #0
 800b890:	d048      	beq.n	800b924 <_free_r+0x98>
 800b892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b896:	9001      	str	r0, [sp, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f1a1 0404 	sub.w	r4, r1, #4
 800b89e:	bfb8      	it	lt
 800b8a0:	18e4      	addlt	r4, r4, r3
 800b8a2:	f000 f8ad 	bl	800ba00 <__malloc_lock>
 800b8a6:	4a20      	ldr	r2, [pc, #128]	; (800b928 <_free_r+0x9c>)
 800b8a8:	9801      	ldr	r0, [sp, #4]
 800b8aa:	6813      	ldr	r3, [r2, #0]
 800b8ac:	4615      	mov	r5, r2
 800b8ae:	b933      	cbnz	r3, 800b8be <_free_r+0x32>
 800b8b0:	6063      	str	r3, [r4, #4]
 800b8b2:	6014      	str	r4, [r2, #0]
 800b8b4:	b003      	add	sp, #12
 800b8b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8ba:	f000 b8a7 	b.w	800ba0c <__malloc_unlock>
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	d90b      	bls.n	800b8da <_free_r+0x4e>
 800b8c2:	6821      	ldr	r1, [r4, #0]
 800b8c4:	1862      	adds	r2, r4, r1
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	bf04      	itt	eq
 800b8ca:	681a      	ldreq	r2, [r3, #0]
 800b8cc:	685b      	ldreq	r3, [r3, #4]
 800b8ce:	6063      	str	r3, [r4, #4]
 800b8d0:	bf04      	itt	eq
 800b8d2:	1852      	addeq	r2, r2, r1
 800b8d4:	6022      	streq	r2, [r4, #0]
 800b8d6:	602c      	str	r4, [r5, #0]
 800b8d8:	e7ec      	b.n	800b8b4 <_free_r+0x28>
 800b8da:	461a      	mov	r2, r3
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	b10b      	cbz	r3, 800b8e4 <_free_r+0x58>
 800b8e0:	42a3      	cmp	r3, r4
 800b8e2:	d9fa      	bls.n	800b8da <_free_r+0x4e>
 800b8e4:	6811      	ldr	r1, [r2, #0]
 800b8e6:	1855      	adds	r5, r2, r1
 800b8e8:	42a5      	cmp	r5, r4
 800b8ea:	d10b      	bne.n	800b904 <_free_r+0x78>
 800b8ec:	6824      	ldr	r4, [r4, #0]
 800b8ee:	4421      	add	r1, r4
 800b8f0:	1854      	adds	r4, r2, r1
 800b8f2:	42a3      	cmp	r3, r4
 800b8f4:	6011      	str	r1, [r2, #0]
 800b8f6:	d1dd      	bne.n	800b8b4 <_free_r+0x28>
 800b8f8:	681c      	ldr	r4, [r3, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	6053      	str	r3, [r2, #4]
 800b8fe:	4421      	add	r1, r4
 800b900:	6011      	str	r1, [r2, #0]
 800b902:	e7d7      	b.n	800b8b4 <_free_r+0x28>
 800b904:	d902      	bls.n	800b90c <_free_r+0x80>
 800b906:	230c      	movs	r3, #12
 800b908:	6003      	str	r3, [r0, #0]
 800b90a:	e7d3      	b.n	800b8b4 <_free_r+0x28>
 800b90c:	6825      	ldr	r5, [r4, #0]
 800b90e:	1961      	adds	r1, r4, r5
 800b910:	428b      	cmp	r3, r1
 800b912:	bf04      	itt	eq
 800b914:	6819      	ldreq	r1, [r3, #0]
 800b916:	685b      	ldreq	r3, [r3, #4]
 800b918:	6063      	str	r3, [r4, #4]
 800b91a:	bf04      	itt	eq
 800b91c:	1949      	addeq	r1, r1, r5
 800b91e:	6021      	streq	r1, [r4, #0]
 800b920:	6054      	str	r4, [r2, #4]
 800b922:	e7c7      	b.n	800b8b4 <_free_r+0x28>
 800b924:	b003      	add	sp, #12
 800b926:	bd30      	pop	{r4, r5, pc}
 800b928:	200000d0 	.word	0x200000d0

0800b92c <_malloc_r>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	1ccd      	adds	r5, r1, #3
 800b930:	f025 0503 	bic.w	r5, r5, #3
 800b934:	3508      	adds	r5, #8
 800b936:	2d0c      	cmp	r5, #12
 800b938:	bf38      	it	cc
 800b93a:	250c      	movcc	r5, #12
 800b93c:	2d00      	cmp	r5, #0
 800b93e:	4606      	mov	r6, r0
 800b940:	db01      	blt.n	800b946 <_malloc_r+0x1a>
 800b942:	42a9      	cmp	r1, r5
 800b944:	d903      	bls.n	800b94e <_malloc_r+0x22>
 800b946:	230c      	movs	r3, #12
 800b948:	6033      	str	r3, [r6, #0]
 800b94a:	2000      	movs	r0, #0
 800b94c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b94e:	f000 f857 	bl	800ba00 <__malloc_lock>
 800b952:	4921      	ldr	r1, [pc, #132]	; (800b9d8 <_malloc_r+0xac>)
 800b954:	680a      	ldr	r2, [r1, #0]
 800b956:	4614      	mov	r4, r2
 800b958:	b99c      	cbnz	r4, 800b982 <_malloc_r+0x56>
 800b95a:	4f20      	ldr	r7, [pc, #128]	; (800b9dc <_malloc_r+0xb0>)
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	b923      	cbnz	r3, 800b96a <_malloc_r+0x3e>
 800b960:	4621      	mov	r1, r4
 800b962:	4630      	mov	r0, r6
 800b964:	f000 f83c 	bl	800b9e0 <_sbrk_r>
 800b968:	6038      	str	r0, [r7, #0]
 800b96a:	4629      	mov	r1, r5
 800b96c:	4630      	mov	r0, r6
 800b96e:	f000 f837 	bl	800b9e0 <_sbrk_r>
 800b972:	1c43      	adds	r3, r0, #1
 800b974:	d123      	bne.n	800b9be <_malloc_r+0x92>
 800b976:	230c      	movs	r3, #12
 800b978:	6033      	str	r3, [r6, #0]
 800b97a:	4630      	mov	r0, r6
 800b97c:	f000 f846 	bl	800ba0c <__malloc_unlock>
 800b980:	e7e3      	b.n	800b94a <_malloc_r+0x1e>
 800b982:	6823      	ldr	r3, [r4, #0]
 800b984:	1b5b      	subs	r3, r3, r5
 800b986:	d417      	bmi.n	800b9b8 <_malloc_r+0x8c>
 800b988:	2b0b      	cmp	r3, #11
 800b98a:	d903      	bls.n	800b994 <_malloc_r+0x68>
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	441c      	add	r4, r3
 800b990:	6025      	str	r5, [r4, #0]
 800b992:	e004      	b.n	800b99e <_malloc_r+0x72>
 800b994:	6863      	ldr	r3, [r4, #4]
 800b996:	42a2      	cmp	r2, r4
 800b998:	bf0c      	ite	eq
 800b99a:	600b      	streq	r3, [r1, #0]
 800b99c:	6053      	strne	r3, [r2, #4]
 800b99e:	4630      	mov	r0, r6
 800b9a0:	f000 f834 	bl	800ba0c <__malloc_unlock>
 800b9a4:	f104 000b 	add.w	r0, r4, #11
 800b9a8:	1d23      	adds	r3, r4, #4
 800b9aa:	f020 0007 	bic.w	r0, r0, #7
 800b9ae:	1ac2      	subs	r2, r0, r3
 800b9b0:	d0cc      	beq.n	800b94c <_malloc_r+0x20>
 800b9b2:	1a1b      	subs	r3, r3, r0
 800b9b4:	50a3      	str	r3, [r4, r2]
 800b9b6:	e7c9      	b.n	800b94c <_malloc_r+0x20>
 800b9b8:	4622      	mov	r2, r4
 800b9ba:	6864      	ldr	r4, [r4, #4]
 800b9bc:	e7cc      	b.n	800b958 <_malloc_r+0x2c>
 800b9be:	1cc4      	adds	r4, r0, #3
 800b9c0:	f024 0403 	bic.w	r4, r4, #3
 800b9c4:	42a0      	cmp	r0, r4
 800b9c6:	d0e3      	beq.n	800b990 <_malloc_r+0x64>
 800b9c8:	1a21      	subs	r1, r4, r0
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f000 f808 	bl	800b9e0 <_sbrk_r>
 800b9d0:	3001      	adds	r0, #1
 800b9d2:	d1dd      	bne.n	800b990 <_malloc_r+0x64>
 800b9d4:	e7cf      	b.n	800b976 <_malloc_r+0x4a>
 800b9d6:	bf00      	nop
 800b9d8:	200000d0 	.word	0x200000d0
 800b9dc:	200000d4 	.word	0x200000d4

0800b9e0 <_sbrk_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d06      	ldr	r5, [pc, #24]	; (800b9fc <_sbrk_r+0x1c>)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	602b      	str	r3, [r5, #0]
 800b9ec:	f7f6 fbce 	bl	800218c <_sbrk>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_sbrk_r+0x1a>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_sbrk_r+0x1a>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	20000c14 	.word	0x20000c14

0800ba00 <__malloc_lock>:
 800ba00:	4801      	ldr	r0, [pc, #4]	; (800ba08 <__malloc_lock+0x8>)
 800ba02:	f000 b809 	b.w	800ba18 <__retarget_lock_acquire_recursive>
 800ba06:	bf00      	nop
 800ba08:	20000c1c 	.word	0x20000c1c

0800ba0c <__malloc_unlock>:
 800ba0c:	4801      	ldr	r0, [pc, #4]	; (800ba14 <__malloc_unlock+0x8>)
 800ba0e:	f000 b804 	b.w	800ba1a <__retarget_lock_release_recursive>
 800ba12:	bf00      	nop
 800ba14:	20000c1c 	.word	0x20000c1c

0800ba18 <__retarget_lock_acquire_recursive>:
 800ba18:	4770      	bx	lr

0800ba1a <__retarget_lock_release_recursive>:
 800ba1a:	4770      	bx	lr

0800ba1c <_init>:
 800ba1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba1e:	bf00      	nop
 800ba20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba22:	bc08      	pop	{r3}
 800ba24:	469e      	mov	lr, r3
 800ba26:	4770      	bx	lr

0800ba28 <_fini>:
 800ba28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba2a:	bf00      	nop
 800ba2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba2e:	bc08      	pop	{r3}
 800ba30:	469e      	mov	lr, r3
 800ba32:	4770      	bx	lr
