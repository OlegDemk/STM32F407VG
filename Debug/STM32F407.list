
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cdc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008e64  08008e64  00018e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e80  08008e80  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e88  08008e88  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e88  08008e88  00018e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e8c  08008e8c  00018e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000860  20000090  08008f20  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008f0  08008f20  000208f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f22e  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fcf  00000000  00000000  0003f2ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  000432c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014f8  00000000  00000000  00044938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000248ff  00000000  00000000  00045e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9f5  00000000  00000000  0006a72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3622  00000000  00000000  00089124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015c746  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006154  00000000  00000000  0015c79c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008e4c 	.word	0x08008e4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008e4c 	.word	0x08008e4c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fd2a 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f81a 	bl	8000500 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f9b0 	bl	8000830 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8a4 	bl	800061c <MX_I2C1_Init>
  MX_I2S3_Init();
 80004d4:	f000 f8d0 	bl	8000678 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d8:	f000 f8fe 	bl	80006d8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004dc:	f008 f8a4 	bl	8008628 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004e0:	f000 f930 	bl	8000744 <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80004e4:	f000 f88e 	bl	8000604 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  ////////////////////////////////////////////////////
  HAL_TIM_Base_Start_IT(&htim2);						// Generate interrupt handler
 80004e8:	4804      	ldr	r0, [pc, #16]	; (80004fc <main+0x3c>)
 80004ea:	f004 fa4f 	bl	800498c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004ee:	2100      	movs	r1, #0
 80004f0:	4802      	ldr	r0, [pc, #8]	; (80004fc <main+0x3c>)
 80004f2:	f004 fb15 	bl	8004b20 <HAL_TIM_PWM_Start>
  //int delay = 10;
  while (1)
  {

    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004f6:	f008 f8bd 	bl	8008674 <MX_USB_HOST_Process>
 80004fa:	e7fc      	b.n	80004f6 <main+0x36>
 80004fc:	20000170 	.word	0x20000170

08000500 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b098      	sub	sp, #96	; 0x60
 8000504:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800050a:	2230      	movs	r2, #48	; 0x30
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f008 fbcc 	bl	8008cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000514:	f107 031c 	add.w	r3, r7, #28
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000524:	f107 030c 	add.w	r3, r7, #12
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	60bb      	str	r3, [r7, #8]
 8000536:	4b31      	ldr	r3, [pc, #196]	; (80005fc <SystemClock_Config+0xfc>)
 8000538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800053a:	4a30      	ldr	r2, [pc, #192]	; (80005fc <SystemClock_Config+0xfc>)
 800053c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000540:	6413      	str	r3, [r2, #64]	; 0x40
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <SystemClock_Config+0xfc>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	4b2b      	ldr	r3, [pc, #172]	; (8000600 <SystemClock_Config+0x100>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a2a      	ldr	r2, [pc, #168]	; (8000600 <SystemClock_Config+0x100>)
 8000558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055c:	6013      	str	r3, [r2, #0]
 800055e:	4b28      	ldr	r3, [pc, #160]	; (8000600 <SystemClock_Config+0x100>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800056a:	2301      	movs	r3, #1
 800056c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800056e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800057e:	2308      	movs	r3, #8
 8000580:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000582:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800058c:	2307      	movs	r3, #7
 800058e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000594:	4618      	mov	r0, r3
 8000596:	f003 fb81 	bl	8003c9c <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005a0:	f000 fa44 	bl	8000a2c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2302      	movs	r3, #2
 80005aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005bc:	f107 031c 	add.w	r3, r7, #28
 80005c0:	2105      	movs	r1, #5
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fde2 	bl	800418c <HAL_RCC_ClockConfig>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005ce:	f000 fa2d 	bl	8000a2c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80005d2:	2301      	movs	r3, #1
 80005d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80005d6:	23c0      	movs	r3, #192	; 0xc0
 80005d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	4618      	mov	r0, r3
 80005e4:	f003 ffba 	bl	800455c <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80005ee:	f000 fa1d 	bl	8000a2c <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3760      	adds	r7, #96	; 0x60
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000608:	2200      	movs	r2, #0
 800060a:	2100      	movs	r1, #0
 800060c:	201c      	movs	r0, #28
 800060e:	f000 fdf6 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000612:	201c      	movs	r0, #28
 8000614:	f000 fe0f 	bl	8001236 <HAL_NVIC_EnableIRQ>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000620:	4b12      	ldr	r3, [pc, #72]	; (800066c <MX_I2C1_Init+0x50>)
 8000622:	4a13      	ldr	r2, [pc, #76]	; (8000670 <MX_I2C1_Init+0x54>)
 8000624:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <MX_I2C1_Init+0x50>)
 8000628:	4a12      	ldr	r2, [pc, #72]	; (8000674 <MX_I2C1_Init+0x58>)
 800062a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800062c:	4b0f      	ldr	r3, [pc, #60]	; (800066c <MX_I2C1_Init+0x50>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000632:	4b0e      	ldr	r3, [pc, #56]	; (800066c <MX_I2C1_Init+0x50>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <MX_I2C1_Init+0x50>)
 800063a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800063e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000640:	4b0a      	ldr	r3, [pc, #40]	; (800066c <MX_I2C1_Init+0x50>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <MX_I2C1_Init+0x50>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800064c:	4b07      	ldr	r3, [pc, #28]	; (800066c <MX_I2C1_Init+0x50>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000652:	4b06      	ldr	r3, [pc, #24]	; (800066c <MX_I2C1_Init+0x50>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000658:	4804      	ldr	r0, [pc, #16]	; (800066c <MX_I2C1_Init+0x50>)
 800065a:	f002 fd3b 	bl	80030d4 <HAL_I2C_Init>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000664:	f000 f9e2 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}
 800066c:	200000c4 	.word	0x200000c4
 8000670:	40005400 	.word	0x40005400
 8000674:	000186a0 	.word	0x000186a0

08000678 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_I2S3_Init+0x54>)
 800067e:	4a14      	ldr	r2, [pc, #80]	; (80006d0 <MX_I2S3_Init+0x58>)
 8000680:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_I2S3_Init+0x54>)
 8000684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000688:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800068a:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_I2S3_Init+0x54>)
 800068c:	2200      	movs	r2, #0
 800068e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000690:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_I2S3_Init+0x54>)
 8000692:	2200      	movs	r2, #0
 8000694:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_I2S3_Init+0x54>)
 8000698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a0:	4a0c      	ldr	r2, [pc, #48]	; (80006d4 <MX_I2S3_Init+0x5c>)
 80006a2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_I2S3_Init+0x54>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_I2S3_Init+0x54>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <MX_I2S3_Init+0x54>)
 80006b8:	f002 fe50 	bl	800335c <HAL_I2S_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006c2:	f000 f9b3 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200001b8 	.word	0x200001b8
 80006d0:	40003c00 	.word	0x40003c00
 80006d4:	00017700 	.word	0x00017700

080006d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006dc:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_SPI1_Init+0x64>)
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <MX_SPI1_Init+0x68>)
 80006e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006e2:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_SPI1_Init+0x64>)
 80006e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_SPI1_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_SPI1_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_SPI1_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_SPI1_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000702:	4b0e      	ldr	r3, [pc, #56]	; (800073c <MX_SPI1_Init+0x64>)
 8000704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <MX_SPI1_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000710:	4b0a      	ldr	r3, [pc, #40]	; (800073c <MX_SPI1_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <MX_SPI1_Init+0x64>)
 8000718:	2200      	movs	r2, #0
 800071a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <MX_SPI1_Init+0x64>)
 800071e:	2200      	movs	r2, #0
 8000720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <MX_SPI1_Init+0x64>)
 8000724:	220a      	movs	r2, #10
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000728:	4804      	ldr	r0, [pc, #16]	; (800073c <MX_SPI1_Init+0x64>)
 800072a:	f004 f857 	bl	80047dc <HAL_SPI_Init>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000734:	f000 f97a 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000118 	.word	0x20000118
 8000740:	40013000 	.word	0x40013000

08000744 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08e      	sub	sp, #56	; 0x38
 8000748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000758:	f107 0320 	add.w	r3, r7, #32
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000774:	4b2d      	ldr	r3, [pc, #180]	; (800082c <MX_TIM2_Init+0xe8>)
 8000776:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800077a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8399;
 800077c:	4b2b      	ldr	r3, [pc, #172]	; (800082c <MX_TIM2_Init+0xe8>)
 800077e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000782:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b29      	ldr	r3, [pc, #164]	; (800082c <MX_TIM2_Init+0xe8>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800078a:	4b28      	ldr	r3, [pc, #160]	; (800082c <MX_TIM2_Init+0xe8>)
 800078c:	2264      	movs	r2, #100	; 0x64
 800078e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <MX_TIM2_Init+0xe8>)
 8000792:	2200      	movs	r2, #0
 8000794:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000796:	4b25      	ldr	r3, [pc, #148]	; (800082c <MX_TIM2_Init+0xe8>)
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800079c:	4823      	ldr	r0, [pc, #140]	; (800082c <MX_TIM2_Init+0xe8>)
 800079e:	f004 f8a6 	bl	80048ee <HAL_TIM_Base_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007a8:	f000 f940 	bl	8000a2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007b6:	4619      	mov	r1, r3
 80007b8:	481c      	ldr	r0, [pc, #112]	; (800082c <MX_TIM2_Init+0xe8>)
 80007ba:	f004 fc3f 	bl	800503c <HAL_TIM_ConfigClockSource>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007c4:	f000 f932 	bl	8000a2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007c8:	4818      	ldr	r0, [pc, #96]	; (800082c <MX_TIM2_Init+0xe8>)
 80007ca:	f004 f94f 	bl	8004a6c <HAL_TIM_PWM_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007d4:	f000 f92a 	bl	8000a2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80007d8:	2310      	movs	r3, #16
 80007da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e0:	f107 0320 	add.w	r3, r7, #32
 80007e4:	4619      	mov	r1, r3
 80007e6:	4811      	ldr	r0, [pc, #68]	; (800082c <MX_TIM2_Init+0xe8>)
 80007e8:	f005 f82e 	bl	8005848 <HAL_TIMEx_MasterConfigSynchronization>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007f2:	f000 f91b 	bl	8000a2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007f6:	2360      	movs	r3, #96	; 0x60
 80007f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80007fa:	2301      	movs	r3, #1
 80007fc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4807      	ldr	r0, [pc, #28]	; (800082c <MX_TIM2_Init+0xe8>)
 800080e:	f004 fb57 	bl	8004ec0 <HAL_TIM_PWM_ConfigChannel>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000818:	f000 f908 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800081c:	4803      	ldr	r0, [pc, #12]	; (800082c <MX_TIM2_Init+0xe8>)
 800081e:	f000 fa53 	bl	8000cc8 <HAL_TIM_MspPostInit>

}
 8000822:	bf00      	nop
 8000824:	3738      	adds	r7, #56	; 0x38
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000170 	.word	0x20000170

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	61bb      	str	r3, [r7, #24]
 800084a:	4b71      	ldr	r3, [pc, #452]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a70      	ldr	r2, [pc, #448]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b6e      	ldr	r3, [pc, #440]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0310 	and.w	r3, r3, #16
 800085e:	61bb      	str	r3, [r7, #24]
 8000860:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	617b      	str	r3, [r7, #20]
 8000866:	4b6a      	ldr	r3, [pc, #424]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a69      	ldr	r2, [pc, #420]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b67      	ldr	r3, [pc, #412]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b63      	ldr	r3, [pc, #396]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a62      	ldr	r2, [pc, #392]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b5c      	ldr	r3, [pc, #368]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a5b      	ldr	r2, [pc, #364]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b59      	ldr	r3, [pc, #356]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b55      	ldr	r3, [pc, #340]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a54      	ldr	r2, [pc, #336]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b52      	ldr	r3, [pc, #328]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b4e      	ldr	r3, [pc, #312]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a4d      	ldr	r2, [pc, #308]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <MX_GPIO_Init+0x1e0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0308 	and.w	r3, r3, #8
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	4848      	ldr	r0, [pc, #288]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 80008f4:	f000 fe56 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2101      	movs	r1, #1
 80008fc:	4846      	ldr	r0, [pc, #280]	; (8000a18 <MX_GPIO_Init+0x1e8>)
 80008fe:	f000 fe51 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000902:	2200      	movs	r2, #0
 8000904:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000908:	4844      	ldr	r0, [pc, #272]	; (8000a1c <MX_GPIO_Init+0x1ec>)
 800090a:	f000 fe4b 	bl	80015a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800090e:	2308      	movs	r3, #8
 8000910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000912:	2301      	movs	r3, #1
 8000914:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	483b      	ldr	r0, [pc, #236]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 8000926:	f000 fca1 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800092a:	2301      	movs	r3, #1
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000936:	2300      	movs	r3, #0
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4835      	ldr	r0, [pc, #212]	; (8000a18 <MX_GPIO_Init+0x1e8>)
 8000942:	f000 fc93 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000946:	2308      	movs	r3, #8
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000956:	2305      	movs	r3, #5
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800095a:	f107 031c 	add.w	r3, r7, #28
 800095e:	4619      	mov	r1, r3
 8000960:	482d      	ldr	r0, [pc, #180]	; (8000a18 <MX_GPIO_Init+0x1e8>)
 8000962:	f000 fc83 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000966:	2301      	movs	r3, #1
 8000968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800096a:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <MX_GPIO_Init+0x1f0>)
 800096c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	482a      	ldr	r0, [pc, #168]	; (8000a24 <MX_GPIO_Init+0x1f4>)
 800097a:	f000 fc77 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800097e:	2304      	movs	r3, #4
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4825      	ldr	r0, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 8000992:	f000 fc6b 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009a8:	2305      	movs	r3, #5
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4619      	mov	r1, r3
 80009b2:	481d      	ldr	r0, [pc, #116]	; (8000a28 <MX_GPIO_Init+0x1f8>)
 80009b4:	f000 fc5a 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009b8:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009bc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009be:	2301      	movs	r3, #1
 80009c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4812      	ldr	r0, [pc, #72]	; (8000a1c <MX_GPIO_Init+0x1ec>)
 80009d2:	f000 fc4b 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d6:	2320      	movs	r3, #32
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_GPIO_Init+0x1ec>)
 80009ea:	f000 fc3f 	bl	800126c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80009ee:	2302      	movs	r3, #2
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_GPIO_Init+0x1f0>)
 80009f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f6:	2300      	movs	r3, #0
 80009f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	4804      	ldr	r0, [pc, #16]	; (8000a14 <MX_GPIO_Init+0x1e4>)
 8000a02:	f000 fc33 	bl	800126c <HAL_GPIO_Init>

}
 8000a06:	bf00      	nop
 8000a08:	3730      	adds	r7, #48	; 0x30
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020800 	.word	0x40020800
 8000a1c:	40020c00 	.word	0x40020c00
 8000a20:	10120000 	.word	0x10120000
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400

08000a2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a30:	b672      	cpsid	i
}
 8000a32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <Error_Handler+0x8>
	...

08000a38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	603b      	str	r3, [r7, #0]
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a62:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a68:	6413      	str	r3, [r2, #64]	; 0x40
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_MspInit+0x5c>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a76:	2007      	movs	r0, #7
 8000a78:	f000 fbb6 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2100      	movs	r1, #0
 8000a80:	2005      	movs	r0, #5
 8000a82:	f000 fbbc 	bl	80011fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000a86:	2005      	movs	r0, #5
 8000a88:	f000 fbd5 	bl	8001236 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	; 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a19      	ldr	r2, [pc, #100]	; (8000b1c <HAL_I2C_MspInit+0x84>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12c      	bne.n	8000b14 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b18      	ldr	r3, [pc, #96]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b15      	ldr	r3, [pc, #84]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ad6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000adc:	2312      	movs	r3, #18
 8000ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae8:	2304      	movs	r3, #4
 8000aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	480c      	ldr	r0, [pc, #48]	; (8000b24 <HAL_I2C_MspInit+0x8c>)
 8000af4:	f000 fbba 	bl	800126c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b06:	6413      	str	r3, [r2, #64]	; 0x40
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <HAL_I2C_MspInit+0x88>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b14:	bf00      	nop
 8000b16:	3728      	adds	r7, #40	; 0x28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40020400 	.word	0x40020400

08000b28 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	; 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <HAL_I2S_MspInit+0xc0>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d14a      	bne.n	8000be0 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a26      	ldr	r2, [pc, #152]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b24      	ldr	r3, [pc, #144]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a1f      	ldr	r2, [pc, #124]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b70:	f043 0301 	orr.w	r3, r3, #1
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0301 	and.w	r3, r3, #1
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b16      	ldr	r3, [pc, #88]	; (8000bec <HAL_I2S_MspInit+0xc4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0304 	and.w	r3, r3, #4
 8000b9a:	60bb      	str	r3, [r7, #8]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b9e:	2310      	movs	r3, #16
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bae:	2306      	movs	r3, #6
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <HAL_I2S_MspInit+0xc8>)
 8000bba:	f000 fb57 	bl	800126c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000bbe:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bd0:	2306      	movs	r3, #6
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	; (8000bf4 <HAL_I2S_MspInit+0xcc>)
 8000bdc:	f000 fb46 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40003c00 	.word	0x40003c00
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	40020800 	.word	0x40020800

08000bf8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a19      	ldr	r2, [pc, #100]	; (8000c7c <HAL_SPI_MspInit+0x84>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d12b      	bne.n	8000c72 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	613b      	str	r3, [r7, #16]
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c28:	6453      	str	r3, [r2, #68]	; 0x44
 8000c2a:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c32:	613b      	str	r3, [r7, #16]
 8000c34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a10      	ldr	r2, [pc, #64]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c40:	f043 0301 	orr.w	r3, r3, #1
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_SPI_MspInit+0x88>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0301 	and.w	r3, r3, #1
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000c52:	23e0      	movs	r3, #224	; 0xe0
 8000c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c62:	2305      	movs	r3, #5
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <HAL_SPI_MspInit+0x8c>)
 8000c6e:	f000 fafd 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c72:	bf00      	nop
 8000c74:	3728      	adds	r7, #40	; 0x28
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40013000 	.word	0x40013000
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020000 	.word	0x40020000

08000c88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b085      	sub	sp, #20
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c98:	d10d      	bne.n	8000cb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cb6:	bf00      	nop
 8000cb8:	3714      	adds	r7, #20
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ce8:	d11e      	bne.n	8000d28 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_TIM_MspPostInit+0x68>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <HAL_TIM_MspPostInit+0x68>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_TIM_MspPostInit+0x68>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	4804      	ldr	r0, [pc, #16]	; (8000d34 <HAL_TIM_MspPostInit+0x6c>)
 8000d24:	f000 faa2 	bl	800126c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d28:	bf00      	nop
 8000d2a:	3720      	adds	r7, #32
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40020000 	.word	0x40020000

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f91c 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8000da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da4:	481b      	ldr	r0, [pc, #108]	; (8000e14 <TIM2_IRQHandler+0x78>)
 8000da6:	f000 fc16 	bl	80015d6 <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back.
  if(movement == 0)			// Up
 8000daa:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <TIM2_IRQHandler+0x7c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d111      	bne.n	8000dd6 <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 100)
 8000db2:	4b1a      	ldr	r3, [pc, #104]	; (8000e1c <TIM2_IRQHandler+0x80>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	dc0a      	bgt.n	8000dd0 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8000dba:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <TIM2_IRQHandler+0x80>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <TIM2_IRQHandler+0x84>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8000dc4:	4b15      	ldr	r3, [pc, #84]	; (8000e1c <TIM2_IRQHandler+0x80>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <TIM2_IRQHandler+0x80>)
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e002      	b.n	8000dd6 <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8000dd0:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <TIM2_IRQHandler+0x7c>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 8000dd6:	4b10      	ldr	r3, [pc, #64]	; (8000e18 <TIM2_IRQHandler+0x7c>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d114      	bne.n	8000e08 <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 0)
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <TIM2_IRQHandler+0x80>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	db0a      	blt.n	8000dfc <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 8000de6:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <TIM2_IRQHandler+0x80>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <TIM2_IRQHandler+0x84>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <TIM2_IRQHandler+0x80>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	3b01      	subs	r3, #1
 8000df6:	4a09      	ldr	r2, [pc, #36]	; (8000e1c <TIM2_IRQHandler+0x80>)
 8000df8:	6013      	str	r3, [r2, #0]
 8000dfa:	e005      	b.n	8000e08 <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <TIM2_IRQHandler+0x7c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
		  i = 0;
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <TIM2_IRQHandler+0x80>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <TIM2_IRQHandler+0x84>)
 8000e0a:	f003 ff51 	bl	8004cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40020c00 	.word	0x40020c00
 8000e18:	200000b0 	.word	0x200000b0
 8000e1c:	200000ac 	.word	0x200000ac
 8000e20:	20000170 	.word	0x20000170

08000e24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <OTG_FS_IRQHandler+0x10>)
 8000e2a:	f000 fe59 	bl	8001ae0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200005dc 	.word	0x200005dc

08000e38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e40:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <_sbrk+0x5c>)
 8000e42:	4b15      	ldr	r3, [pc, #84]	; (8000e98 <_sbrk+0x60>)
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e4c:	4b13      	ldr	r3, [pc, #76]	; (8000e9c <_sbrk+0x64>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d102      	bne.n	8000e5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e54:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <_sbrk+0x64>)
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <_sbrk+0x68>)
 8000e58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e5a:	4b10      	ldr	r3, [pc, #64]	; (8000e9c <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d207      	bcs.n	8000e78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e68:	f007 fee6 	bl	8008c38 <__errno>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	220c      	movs	r2, #12
 8000e70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e76:	e009      	b.n	8000e8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e78:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <_sbrk+0x64>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e7e:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <_sbrk+0x64>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4413      	add	r3, r2
 8000e86:	4a05      	ldr	r2, [pc, #20]	; (8000e9c <_sbrk+0x64>)
 8000e88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20020000 	.word	0x20020000
 8000e98:	00000400 	.word	0x00000400
 8000e9c:	200000b4 	.word	0x200000b4
 8000ea0:	200008f0 	.word	0x200008f0

08000ea4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ea8:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <SystemInit+0x20>)
 8000eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eae:	4a05      	ldr	r2, [pc, #20]	; (8000ec4 <SystemInit+0x20>)
 8000eb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb8:	bf00      	nop
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ecc:	480d      	ldr	r0, [pc, #52]	; (8000f04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ece:	490e      	ldr	r1, [pc, #56]	; (8000f08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ed0:	4a0e      	ldr	r2, [pc, #56]	; (8000f0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed4:	e002      	b.n	8000edc <LoopCopyDataInit>

08000ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eda:	3304      	adds	r3, #4

08000edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee0:	d3f9      	bcc.n	8000ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ee4:	4c0b      	ldr	r4, [pc, #44]	; (8000f14 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ee8:	e001      	b.n	8000eee <LoopFillZerobss>

08000eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eec:	3204      	adds	r2, #4

08000eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef0:	d3fb      	bcc.n	8000eea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ffd7 	bl	8000ea4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f007 fea5 	bl	8008c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fae1 	bl	80004c0 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f08:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000f0c:	08008e90 	.word	0x08008e90
  ldr r2, =_sbss
 8000f10:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000f14:	200008f0 	.word	0x200008f0

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f94f 	bl	80011e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f000 f808 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fd72 	bl	8000a38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <HAL_InitTick+0x54>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0x58>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f967 	bl	8001252 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f9c:	f000 f92f 	bl	80011fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x5c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000008 	.word	0x20000008
 8000fbc:	20000004 	.word	0x20000004

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008
 8000fe4:	20000200 	.word	0x20000200

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000200 	.word	0x20000200

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008

08001048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001064:	4013      	ands	r3, r2
 8001066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001070:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001074:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107a:	4a04      	ldr	r2, [pc, #16]	; (800108c <__NVIC_SetPriorityGrouping+0x44>)
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	60d3      	str	r3, [r2, #12]
}
 8001080:	bf00      	nop
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000ed00 	.word	0xe000ed00

08001090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001094:	4b04      	ldr	r3, [pc, #16]	; (80010a8 <__NVIC_GetPriorityGrouping+0x18>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	0a1b      	lsrs	r3, r3, #8
 800109a:	f003 0307 	and.w	r3, r3, #7
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	db0b      	blt.n	80010d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f003 021f 	and.w	r2, r3, #31
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <__NVIC_EnableIRQ+0x38>)
 80010c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ca:	095b      	lsrs	r3, r3, #5
 80010cc:	2001      	movs	r0, #1
 80010ce:	fa00 f202 	lsl.w	r2, r0, r2
 80010d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000e100 	.word	0xe000e100

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	db0a      	blt.n	8001112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	490c      	ldr	r1, [pc, #48]	; (8001134 <__NVIC_SetPriority+0x4c>)
 8001102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001106:	0112      	lsls	r2, r2, #4
 8001108:	b2d2      	uxtb	r2, r2
 800110a:	440b      	add	r3, r1
 800110c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001110:	e00a      	b.n	8001128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	b2da      	uxtb	r2, r3
 8001116:	4908      	ldr	r1, [pc, #32]	; (8001138 <__NVIC_SetPriority+0x50>)
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	3b04      	subs	r3, #4
 8001120:	0112      	lsls	r2, r2, #4
 8001122:	b2d2      	uxtb	r2, r2
 8001124:	440b      	add	r3, r1
 8001126:	761a      	strb	r2, [r3, #24]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000e100 	.word	0xe000e100
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	60f8      	str	r0, [r7, #12]
 8001144:	60b9      	str	r1, [r7, #8]
 8001146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	f1c3 0307 	rsb	r3, r3, #7
 8001156:	2b04      	cmp	r3, #4
 8001158:	bf28      	it	cs
 800115a:	2304      	movcs	r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3304      	adds	r3, #4
 8001162:	2b06      	cmp	r3, #6
 8001164:	d902      	bls.n	800116c <NVIC_EncodePriority+0x30>
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	3b03      	subs	r3, #3
 800116a:	e000      	b.n	800116e <NVIC_EncodePriority+0x32>
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43da      	mvns	r2, r3
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	401a      	ands	r2, r3
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001184:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43d9      	mvns	r1, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001194:	4313      	orrs	r3, r2
         );
}
 8001196:	4618      	mov	r0, r3
 8001198:	3724      	adds	r7, #36	; 0x24
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
	...

080011a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011b4:	d301      	bcc.n	80011ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00f      	b.n	80011da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ba:	4a0a      	ldr	r2, [pc, #40]	; (80011e4 <SysTick_Config+0x40>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	3b01      	subs	r3, #1
 80011c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c2:	210f      	movs	r1, #15
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011c8:	f7ff ff8e 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011cc:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <SysTick_Config+0x40>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x40>)
 80011d4:	2207      	movs	r2, #7
 80011d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d8:	2300      	movs	r3, #0
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff29 	bl	8001048 <__NVIC_SetPriorityGrouping>
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	60b9      	str	r1, [r7, #8]
 8001208:	607a      	str	r2, [r7, #4]
 800120a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff3e 	bl	8001090 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff8e 	bl	800113c <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	4603      	mov	r3, r0
 800123e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff31 	bl	80010ac <__NVIC_EnableIRQ>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff ffa2 	bl	80011a4 <SysTick_Config>
 8001260:	4603      	mov	r3, r0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800126c:	b480      	push	{r7}
 800126e:	b089      	sub	sp, #36	; 0x24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
 8001286:	e16b      	b.n	8001560 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001288:	2201      	movs	r2, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	697a      	ldr	r2, [r7, #20]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	f040 815a 	bne.w	800155a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f003 0303 	and.w	r3, r3, #3
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d005      	beq.n	80012be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d130      	bne.n	8001320 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	2203      	movs	r2, #3
 80012ca:	fa02 f303 	lsl.w	r3, r2, r3
 80012ce:	43db      	mvns	r3, r3
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	4013      	ands	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	005b      	lsls	r3, r3, #1
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012f4:	2201      	movs	r2, #1
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f003 0201 	and.w	r2, r3, #1
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b03      	cmp	r3, #3
 800132a:	d017      	beq.n	800135c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d123      	bne.n	80013b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	f003 0307 	and.w	r3, r3, #7
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	220f      	movs	r2, #15
 8001380:	fa02 f303 	lsl.w	r3, r2, r3
 8001384:	43db      	mvns	r3, r3
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4013      	ands	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	691a      	ldr	r2, [r3, #16]
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	4313      	orrs	r3, r2
 80013a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	08da      	lsrs	r2, r3, #3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3208      	adds	r2, #8
 80013aa:	69b9      	ldr	r1, [r7, #24]
 80013ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	4013      	ands	r3, r2
 80013c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0203 	and.w	r2, r3, #3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 80b4 	beq.w	800155a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b60      	ldr	r3, [pc, #384]	; (8001578 <HAL_GPIO_Init+0x30c>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	4a5f      	ldr	r2, [pc, #380]	; (8001578 <HAL_GPIO_Init+0x30c>)
 80013fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001400:	6453      	str	r3, [r2, #68]	; 0x44
 8001402:	4b5d      	ldr	r3, [pc, #372]	; (8001578 <HAL_GPIO_Init+0x30c>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800140e:	4a5b      	ldr	r2, [pc, #364]	; (800157c <HAL_GPIO_Init+0x310>)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	220f      	movs	r2, #15
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a52      	ldr	r2, [pc, #328]	; (8001580 <HAL_GPIO_Init+0x314>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d02b      	beq.n	8001492 <HAL_GPIO_Init+0x226>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a51      	ldr	r2, [pc, #324]	; (8001584 <HAL_GPIO_Init+0x318>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d025      	beq.n	800148e <HAL_GPIO_Init+0x222>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a50      	ldr	r2, [pc, #320]	; (8001588 <HAL_GPIO_Init+0x31c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01f      	beq.n	800148a <HAL_GPIO_Init+0x21e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a4f      	ldr	r2, [pc, #316]	; (800158c <HAL_GPIO_Init+0x320>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d019      	beq.n	8001486 <HAL_GPIO_Init+0x21a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4e      	ldr	r2, [pc, #312]	; (8001590 <HAL_GPIO_Init+0x324>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x216>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4d      	ldr	r2, [pc, #308]	; (8001594 <HAL_GPIO_Init+0x328>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x212>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4c      	ldr	r2, [pc, #304]	; (8001598 <HAL_GPIO_Init+0x32c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x20e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4b      	ldr	r2, [pc, #300]	; (800159c <HAL_GPIO_Init+0x330>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x20a>
 8001472:	2307      	movs	r3, #7
 8001474:	e00e      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001476:	2308      	movs	r3, #8
 8001478:	e00c      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147a:	2306      	movs	r3, #6
 800147c:	e00a      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800147e:	2305      	movs	r3, #5
 8001480:	e008      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001482:	2304      	movs	r3, #4
 8001484:	e006      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001486:	2303      	movs	r3, #3
 8001488:	e004      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148a:	2302      	movs	r3, #2
 800148c:	e002      	b.n	8001494 <HAL_GPIO_Init+0x228>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <HAL_GPIO_Init+0x228>
 8001492:	2300      	movs	r3, #0
 8001494:	69fa      	ldr	r2, [r7, #28]
 8001496:	f002 0203 	and.w	r2, r2, #3
 800149a:	0092      	lsls	r2, r2, #2
 800149c:	4093      	lsls	r3, r2
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a4:	4935      	ldr	r1, [pc, #212]	; (800157c <HAL_GPIO_Init+0x310>)
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	3302      	adds	r3, #2
 80014ac:	69ba      	ldr	r2, [r7, #24]
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014d6:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014dc:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <HAL_GPIO_Init+0x334>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d003      	beq.n	8001500 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001500:	4a27      	ldr	r2, [pc, #156]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d003      	beq.n	800152a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4313      	orrs	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <HAL_GPIO_Init+0x334>)
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	43db      	mvns	r3, r3
 800153a:	69ba      	ldr	r2, [r7, #24]
 800153c:	4013      	ands	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d003      	beq.n	8001554 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	4313      	orrs	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001554:	4a12      	ldr	r2, [pc, #72]	; (80015a0 <HAL_GPIO_Init+0x334>)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3301      	adds	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	2b0f      	cmp	r3, #15
 8001564:	f67f ae90 	bls.w	8001288 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40013800 	.word	0x40013800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020400 	.word	0x40020400
 8001588:	40020800 	.word	0x40020800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40021000 	.word	0x40021000
 8001594:	40021400 	.word	0x40021400
 8001598:	40021800 	.word	0x40021800
 800159c:	40021c00 	.word	0x40021c00
 80015a0:	40013c00 	.word	0x40013c00

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015c0:	e003      	b.n	80015ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	041a      	lsls	r2, r3, #16
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	619a      	str	r2, [r3, #24]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b085      	sub	sp, #20
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015e8:	887a      	ldrh	r2, [r7, #2]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4013      	ands	r3, r2
 80015ee:	041a      	lsls	r2, r3, #16
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	400b      	ands	r3, r1
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	619a      	str	r2, [r3, #24]
}
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr

0800160a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800160a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800160c:	b08f      	sub	sp, #60	; 0x3c
 800160e:	af0a      	add	r7, sp, #40	; 0x28
 8001610:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e054      	b.n	80016c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f007 f854 	bl	80086e4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2203      	movs	r2, #3
 8001640:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d102      	bne.n	8001656 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f004 f9f6 	bl	8005a4c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	687e      	ldr	r6, [r7, #4]
 8001668:	466d      	mov	r5, sp
 800166a:	f106 0410 	add.w	r4, r6, #16
 800166e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800167a:	e885 0003 	stmia.w	r5, {r0, r1}
 800167e:	1d33      	adds	r3, r6, #4
 8001680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001682:	6838      	ldr	r0, [r7, #0]
 8001684:	f004 f970 	bl	8005968 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	4618      	mov	r0, r3
 8001690:	f004 f9ed 	bl	8005a6e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	687e      	ldr	r6, [r7, #4]
 800169c:	466d      	mov	r5, sp
 800169e:	f106 0410 	add.w	r4, r6, #16
 80016a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80016ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80016b2:	1d33      	adds	r3, r6, #4
 80016b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016b6:	6838      	ldr	r0, [r7, #0]
 80016b8:	f004 fb00 	bl	8005cbc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3714      	adds	r7, #20
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016ce:	b590      	push	{r4, r7, lr}
 80016d0:	b089      	sub	sp, #36	; 0x24
 80016d2:	af04      	add	r7, sp, #16
 80016d4:	6078      	str	r0, [r7, #4]
 80016d6:	4608      	mov	r0, r1
 80016d8:	4611      	mov	r1, r2
 80016da:	461a      	mov	r2, r3
 80016dc:	4603      	mov	r3, r0
 80016de:	70fb      	strb	r3, [r7, #3]
 80016e0:	460b      	mov	r3, r1
 80016e2:	70bb      	strb	r3, [r7, #2]
 80016e4:	4613      	mov	r3, r2
 80016e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_HCD_HC_Init+0x28>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e076      	b.n	80017e4 <HAL_HCD_HC_Init+0x116>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	212c      	movs	r1, #44	; 0x2c
 8001704:	fb01 f303 	mul.w	r3, r1, r3
 8001708:	4413      	add	r3, r2
 800170a:	333d      	adds	r3, #61	; 0x3d
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001710:	78fb      	ldrb	r3, [r7, #3]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	212c      	movs	r1, #44	; 0x2c
 8001716:	fb01 f303 	mul.w	r3, r1, r3
 800171a:	4413      	add	r3, r2
 800171c:	3338      	adds	r3, #56	; 0x38
 800171e:	787a      	ldrb	r2, [r7, #1]
 8001720:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001722:	78fb      	ldrb	r3, [r7, #3]
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	212c      	movs	r1, #44	; 0x2c
 8001728:	fb01 f303 	mul.w	r3, r1, r3
 800172c:	4413      	add	r3, r2
 800172e:	3340      	adds	r3, #64	; 0x40
 8001730:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001732:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001734:	78fb      	ldrb	r3, [r7, #3]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	212c      	movs	r1, #44	; 0x2c
 800173a:	fb01 f303 	mul.w	r3, r1, r3
 800173e:	4413      	add	r3, r2
 8001740:	3339      	adds	r3, #57	; 0x39
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	212c      	movs	r1, #44	; 0x2c
 800174c:	fb01 f303 	mul.w	r3, r1, r3
 8001750:	4413      	add	r3, r2
 8001752:	333f      	adds	r3, #63	; 0x3f
 8001754:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001758:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800175a:	78fb      	ldrb	r3, [r7, #3]
 800175c:	78ba      	ldrb	r2, [r7, #2]
 800175e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001762:	b2d0      	uxtb	r0, r2
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	212c      	movs	r1, #44	; 0x2c
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	333a      	adds	r3, #58	; 0x3a
 8001770:	4602      	mov	r2, r0
 8001772:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001774:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001778:	2b00      	cmp	r3, #0
 800177a:	da09      	bge.n	8001790 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	333b      	adds	r3, #59	; 0x3b
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
 800178e:	e008      	b.n	80017a2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	212c      	movs	r1, #44	; 0x2c
 8001796:	fb01 f303 	mul.w	r3, r1, r3
 800179a:	4413      	add	r3, r2
 800179c:	333b      	adds	r3, #59	; 0x3b
 800179e:	2200      	movs	r2, #0
 80017a0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80017a2:	78fb      	ldrb	r3, [r7, #3]
 80017a4:	687a      	ldr	r2, [r7, #4]
 80017a6:	212c      	movs	r1, #44	; 0x2c
 80017a8:	fb01 f303 	mul.w	r3, r1, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	333c      	adds	r3, #60	; 0x3c
 80017b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017b4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6818      	ldr	r0, [r3, #0]
 80017ba:	787c      	ldrb	r4, [r7, #1]
 80017bc:	78ba      	ldrb	r2, [r7, #2]
 80017be:	78f9      	ldrb	r1, [r7, #3]
 80017c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ce:	9300      	str	r3, [sp, #0]
 80017d0:	4623      	mov	r3, r4
 80017d2:	f004 fbf5 	bl	8005fc0 <USB_HC_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017f8:	2300      	movs	r3, #0
 80017fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_HCD_HC_Halt+0x1e>
 8001806:	2302      	movs	r3, #2
 8001808:	e00f      	b.n	800182a <HAL_HCD_HC_Halt+0x3e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	78fa      	ldrb	r2, [r7, #3]
 8001818:	4611      	mov	r1, r2
 800181a:	4618      	mov	r0, r3
 800181c:	f004 fe31 	bl	8006482 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001828:	7bfb      	ldrb	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
	...

08001834 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	4608      	mov	r0, r1
 800183e:	4611      	mov	r1, r2
 8001840:	461a      	mov	r2, r3
 8001842:	4603      	mov	r3, r0
 8001844:	70fb      	strb	r3, [r7, #3]
 8001846:	460b      	mov	r3, r1
 8001848:	70bb      	strb	r3, [r7, #2]
 800184a:	4613      	mov	r3, r2
 800184c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	212c      	movs	r1, #44	; 0x2c
 8001854:	fb01 f303 	mul.w	r3, r1, r3
 8001858:	4413      	add	r3, r2
 800185a:	333b      	adds	r3, #59	; 0x3b
 800185c:	78ba      	ldrb	r2, [r7, #2]
 800185e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	212c      	movs	r1, #44	; 0x2c
 8001866:	fb01 f303 	mul.w	r3, r1, r3
 800186a:	4413      	add	r3, r2
 800186c:	333f      	adds	r3, #63	; 0x3f
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001872:	7c3b      	ldrb	r3, [r7, #16]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d112      	bne.n	800189e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001878:	78fb      	ldrb	r3, [r7, #3]
 800187a:	687a      	ldr	r2, [r7, #4]
 800187c:	212c      	movs	r1, #44	; 0x2c
 800187e:	fb01 f303 	mul.w	r3, r1, r3
 8001882:	4413      	add	r3, r2
 8001884:	3342      	adds	r3, #66	; 0x42
 8001886:	2203      	movs	r2, #3
 8001888:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	212c      	movs	r1, #44	; 0x2c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	333d      	adds	r3, #61	; 0x3d
 8001898:	7f3a      	ldrb	r2, [r7, #28]
 800189a:	701a      	strb	r2, [r3, #0]
 800189c:	e008      	b.n	80018b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800189e:	78fb      	ldrb	r3, [r7, #3]
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	212c      	movs	r1, #44	; 0x2c
 80018a4:	fb01 f303 	mul.w	r3, r1, r3
 80018a8:	4413      	add	r3, r2
 80018aa:	3342      	adds	r3, #66	; 0x42
 80018ac:	2202      	movs	r2, #2
 80018ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	f200 80c6 	bhi.w	8001a44 <HAL_HCD_HC_SubmitRequest+0x210>
 80018b8:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018be:	bf00      	nop
 80018c0:	080018d1 	.word	0x080018d1
 80018c4:	08001a31 	.word	0x08001a31
 80018c8:	08001935 	.word	0x08001935
 80018cc:	080019b3 	.word	0x080019b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018d0:	7c3b      	ldrb	r3, [r7, #16]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	f040 80b8 	bne.w	8001a48 <HAL_HCD_HC_SubmitRequest+0x214>
 80018d8:	78bb      	ldrb	r3, [r7, #2]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f040 80b4 	bne.w	8001a48 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018e0:	8b3b      	ldrh	r3, [r7, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d108      	bne.n	80018f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018e6:	78fb      	ldrb	r3, [r7, #3]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	212c      	movs	r1, #44	; 0x2c
 80018ec:	fb01 f303 	mul.w	r3, r1, r3
 80018f0:	4413      	add	r3, r2
 80018f2:	3355      	adds	r3, #85	; 0x55
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3355      	adds	r3, #85	; 0x55
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d109      	bne.n	8001920 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	212c      	movs	r1, #44	; 0x2c
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	2200      	movs	r2, #0
 800191c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800191e:	e093      	b.n	8001a48 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001920:	78fb      	ldrb	r3, [r7, #3]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	212c      	movs	r1, #44	; 0x2c
 8001926:	fb01 f303 	mul.w	r3, r1, r3
 800192a:	4413      	add	r3, r2
 800192c:	3342      	adds	r3, #66	; 0x42
 800192e:	2202      	movs	r2, #2
 8001930:	701a      	strb	r2, [r3, #0]
      break;
 8001932:	e089      	b.n	8001a48 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001934:	78bb      	ldrb	r3, [r7, #2]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d11d      	bne.n	8001976 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	212c      	movs	r1, #44	; 0x2c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3355      	adds	r3, #85	; 0x55
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3342      	adds	r3, #66	; 0x42
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001960:	e073      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	212c      	movs	r1, #44	; 0x2c
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	3342      	adds	r3, #66	; 0x42
 8001970:	2202      	movs	r2, #2
 8001972:	701a      	strb	r2, [r3, #0]
      break;
 8001974:	e069      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3354      	adds	r3, #84	; 0x54
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	212c      	movs	r1, #44	; 0x2c
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	4413      	add	r3, r2
 8001996:	3342      	adds	r3, #66	; 0x42
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
      break;
 800199c:	e055      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212c      	movs	r1, #44	; 0x2c
 80019a4:	fb01 f303 	mul.w	r3, r1, r3
 80019a8:	4413      	add	r3, r2
 80019aa:	3342      	adds	r3, #66	; 0x42
 80019ac:	2202      	movs	r2, #2
 80019ae:	701a      	strb	r2, [r3, #0]
      break;
 80019b0:	e04b      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80019b2:	78bb      	ldrb	r3, [r7, #2]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d11d      	bne.n	80019f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3355      	adds	r3, #85	; 0x55
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d109      	bne.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3342      	adds	r3, #66	; 0x42
 80019da:	2200      	movs	r2, #0
 80019dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019de:	e034      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3342      	adds	r3, #66	; 0x42
 80019ee:	2202      	movs	r2, #2
 80019f0:	701a      	strb	r2, [r3, #0]
      break;
 80019f2:	e02a      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3354      	adds	r3, #84	; 0x54
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d109      	bne.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3342      	adds	r3, #66	; 0x42
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
      break;
 8001a1a:	e016      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3342      	adds	r3, #66	; 0x42
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	701a      	strb	r2, [r3, #0]
      break;
 8001a2e:	e00c      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a30:	78fb      	ldrb	r3, [r7, #3]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	212c      	movs	r1, #44	; 0x2c
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	2200      	movs	r2, #0
 8001a40:	701a      	strb	r2, [r3, #0]
      break;
 8001a42:	e002      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a44:	bf00      	nop
 8001a46:	e000      	b.n	8001a4a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a48:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	212c      	movs	r1, #44	; 0x2c
 8001a50:	fb01 f303 	mul.w	r3, r1, r3
 8001a54:	4413      	add	r3, r2
 8001a56:	3344      	adds	r3, #68	; 0x44
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a5c:	78fb      	ldrb	r3, [r7, #3]
 8001a5e:	8b3a      	ldrh	r2, [r7, #24]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	202c      	movs	r0, #44	; 0x2c
 8001a64:	fb00 f303 	mul.w	r3, r0, r3
 8001a68:	440b      	add	r3, r1
 8001a6a:	334c      	adds	r3, #76	; 0x4c
 8001a6c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	212c      	movs	r1, #44	; 0x2c
 8001a74:	fb01 f303 	mul.w	r3, r1, r3
 8001a78:	4413      	add	r3, r2
 8001a7a:	3360      	adds	r3, #96	; 0x60
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	212c      	movs	r1, #44	; 0x2c
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3350      	adds	r3, #80	; 0x50
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a92:	78fb      	ldrb	r3, [r7, #3]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	212c      	movs	r1, #44	; 0x2c
 8001a98:	fb01 f303 	mul.w	r3, r1, r3
 8001a9c:	4413      	add	r3, r2
 8001a9e:	3339      	adds	r3, #57	; 0x39
 8001aa0:	78fa      	ldrb	r2, [r7, #3]
 8001aa2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001aa4:	78fb      	ldrb	r3, [r7, #3]
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	212c      	movs	r1, #44	; 0x2c
 8001aaa:	fb01 f303 	mul.w	r3, r1, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	3361      	adds	r3, #97	; 0x61
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6818      	ldr	r0, [r3, #0]
 8001aba:	78fb      	ldrb	r3, [r7, #3]
 8001abc:	222c      	movs	r2, #44	; 0x2c
 8001abe:	fb02 f303 	mul.w	r3, r2, r3
 8001ac2:	3338      	adds	r3, #56	; 0x38
 8001ac4:	687a      	ldr	r2, [r7, #4]
 8001ac6:	18d1      	adds	r1, r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f004 fb84 	bl	80061dc <USB_HC_StartXfer>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop

08001ae0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b086      	sub	sp, #24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f004 f89d 	bl	8005c36 <USB_GetMode>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	f040 80ef 	bne.w	8001ce2 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f004 f881 	bl	8005c10 <USB_ReadInterrupts>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80e5 	beq.w	8001ce0 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f004 f878 	bl	8005c10 <USB_ReadInterrupts>
 8001b20:	4603      	mov	r3, r0
 8001b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b2a:	d104      	bne.n	8001b36 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f004 f868 	bl	8005c10 <USB_ReadInterrupts>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b4a:	d104      	bne.n	8001b56 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f004 f858 	bl	8005c10 <USB_ReadInterrupts>
 8001b60:	4603      	mov	r3, r0
 8001b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b6a:	d104      	bne.n	8001b76 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b74:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f004 f848 	bl	8005c10 <USB_ReadInterrupts>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d103      	bne.n	8001b92 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f004 f83a 	bl	8005c10 <USB_ReadInterrupts>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001ba2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ba6:	d115      	bne.n	8001bd4 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001bb0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d108      	bne.n	8001bd4 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f006 fe0c 	bl	80087e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f004 f930 	bl	8005e34 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f004 f819 	bl	8005c10 <USB_ReadInterrupts>
 8001bde:	4603      	mov	r3, r0
 8001be0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be8:	d102      	bne.n	8001bf0 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f001 f9ff 	bl	8002fee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f004 f80b 	bl	8005c10 <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d106      	bne.n	8001c12 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f006 fdcf 	bl	80087a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2208      	movs	r2, #8
 8001c10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f003 fffa 	bl	8005c10 <USB_ReadInterrupts>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d101      	bne.n	8001c2a <HAL_HCD_IRQHandler+0x14a>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_HCD_IRQHandler+0x14c>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d012      	beq.n	8001c56 <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f022 0210 	bic.w	r2, r2, #16
 8001c3e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f001 f902 	bl	8002e4a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699a      	ldr	r2, [r3, #24]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f042 0210 	orr.w	r2, r2, #16
 8001c54:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f003 ffd8 	bl	8005c10 <USB_ReadInterrupts>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c6a:	d13a      	bne.n	8001ce2 <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f004 fbf5 	bl	8006460 <USB_HC_ReadInterrupt>
 8001c76:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e025      	b.n	8001cca <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	68ba      	ldr	r2, [r7, #8]
 8001c86:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d018      	beq.n	8001cc4 <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	015a      	lsls	r2, r3, #5
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	4413      	add	r3, r2
 8001c9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca8:	d106      	bne.n	8001cb8 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f8ab 	bl	8001e0c <HCD_HC_IN_IRQHandler>
 8001cb6:	e005      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fcc6 	bl	8002650 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	617b      	str	r3, [r7, #20]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d3d4      	bcc.n	8001c7e <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cdc:	615a      	str	r2, [r3, #20]
 8001cde:	e000      	b.n	8001ce2 <HAL_HCD_IRQHandler+0x202>
      return;
 8001ce0:	bf00      	nop
    }
  }
}
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d101      	bne.n	8001cfe <HAL_HCD_Start+0x16>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e013      	b.n	8001d26 <HAL_HCD_Start+0x3e>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f003 fe8d 	bl	8005a2a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2101      	movs	r1, #1
 8001d16:	4618      	mov	r0, r3
 8001d18:	f004 f8f0 	bl	8005efc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_HCD_Stop+0x16>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e00d      	b.n	8001d60 <HAL_HCD_Stop+0x32>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f004 fcef 	bl	8006734 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f004 f897 	bl	8005ea8 <USB_ResetPort>
 8001d7a:	4603      	mov	r3, r0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d90:	78fb      	ldrb	r3, [r7, #3]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	212c      	movs	r1, #44	; 0x2c
 8001d96:	fb01 f303 	mul.w	r3, r1, r3
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3360      	adds	r3, #96	; 0x60
 8001d9e:	781b      	ldrb	r3, [r3, #0]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	212c      	movs	r1, #44	; 0x2c
 8001dbe:	fb01 f303 	mul.w	r3, r1, r3
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3350      	adds	r3, #80	; 0x50
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f004 f8db 	bl	8005f9c <USB_GetCurrentFrame>
 8001de6:	4603      	mov	r3, r0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f004 f8b6 	bl	8005f6e <USB_GetHostSpeed>
 8001e02:	4603      	mov	r3, r0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d119      	bne.n	8001e70 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e48:	461a      	mov	r2, r3
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	0151      	lsls	r1, r2, #5
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	440a      	add	r2, r1
 8001e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e68:	f043 0302 	orr.w	r3, r3, #2
 8001e6c:	60d3      	str	r3, [r2, #12]
 8001e6e:	e101      	b.n	8002074 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	015a      	lsls	r2, r3, #5
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	4413      	add	r3, r2
 8001e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e86:	d12b      	bne.n	8001ee0 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	015a      	lsls	r2, r3, #5
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4413      	add	r3, r2
 8001e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e94:	461a      	mov	r2, r3
 8001e96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	212c      	movs	r1, #44	; 0x2c
 8001ea2:	fb01 f303 	mul.w	r3, r1, r3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3361      	adds	r3, #97	; 0x61
 8001eaa:	2207      	movs	r2, #7
 8001eac:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	015a      	lsls	r2, r3, #5
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	68fa      	ldr	r2, [r7, #12]
 8001ebe:	0151      	lsls	r1, r2, #5
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	440a      	add	r2, r1
 8001ec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec8:	f043 0302 	orr.w	r3, r3, #2
 8001ecc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 fad2 	bl	8006482 <USB_HC_Halt>
 8001ede:	e0c9      	b.n	8002074 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	015a      	lsls	r2, r3, #5
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d109      	bne.n	8001f0a <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	015a      	lsls	r2, r3, #5
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4413      	add	r3, r2
 8001efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f02:	461a      	mov	r2, r3
 8001f04:	2320      	movs	r3, #32
 8001f06:	6093      	str	r3, [r2, #8]
 8001f08:	e0b4      	b.n	8002074 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	015a      	lsls	r2, r3, #5
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4413      	add	r3, r2
 8001f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d133      	bne.n	8001f88 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	015a      	lsls	r2, r3, #5
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4413      	add	r3, r2
 8001f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	0151      	lsls	r1, r2, #5
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	440a      	add	r2, r1
 8001f36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f3a:	f043 0302 	orr.w	r3, r3, #2
 8001f3e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	212c      	movs	r1, #44	; 0x2c
 8001f46:	fb01 f303 	mul.w	r3, r1, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	3361      	adds	r3, #97	; 0x61
 8001f4e:	2205      	movs	r2, #5
 8001f50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2310      	movs	r3, #16
 8001f62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	461a      	mov	r2, r3
 8001f72:	2308      	movs	r3, #8
 8001f74:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f004 fa7e 	bl	8006482 <USB_HC_Halt>
 8001f86:	e075      	b.n	8002074 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9e:	d134      	bne.n	800200a <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	0151      	lsls	r1, r2, #5
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	440a      	add	r2, r1
 8001fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	212c      	movs	r1, #44	; 0x2c
 8001fc6:	fb01 f303 	mul.w	r3, r1, r3
 8001fca:	4413      	add	r3, r2
 8001fcc:	3361      	adds	r3, #97	; 0x61
 8001fce:	2208      	movs	r2, #8
 8001fd0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	015a      	lsls	r2, r3, #5
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2310      	movs	r3, #16
 8001fe2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ff6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f004 fa3d 	bl	8006482 <USB_HC_Halt>
 8002008:	e034      	b.n	8002074 <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800201c:	2b80      	cmp	r3, #128	; 0x80
 800201e:	d129      	bne.n	8002074 <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	4413      	add	r3, r2
 8002028:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	0151      	lsls	r1, r2, #5
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	440a      	add	r2, r1
 8002036:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	212c      	movs	r1, #44	; 0x2c
 8002046:	fb01 f303 	mul.w	r3, r1, r3
 800204a:	4413      	add	r3, r2
 800204c:	3361      	adds	r3, #97	; 0x61
 800204e:	2206      	movs	r2, #6
 8002050:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	b2d2      	uxtb	r2, r2
 800205a:	4611      	mov	r1, r2
 800205c:	4618      	mov	r0, r3
 800205e:	f004 fa10 	bl	8006482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	015a      	lsls	r2, r3, #5
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4413      	add	r3, r2
 800206a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206e:	461a      	mov	r2, r3
 8002070:	2380      	movs	r3, #128	; 0x80
 8002072:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002086:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800208a:	d122      	bne.n	80020d2 <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	015a      	lsls	r2, r3, #5
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	0151      	lsls	r1, r2, #5
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	440a      	add	r2, r1
 80020a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	4611      	mov	r1, r2
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 f9e3 	bl	8006482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	015a      	lsls	r2, r3, #5
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4413      	add	r3, r2
 80020c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c8:	461a      	mov	r2, r3
 80020ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ce:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80020d0:	e2ba      	b.n	8002648 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	f040 811b 	bne.w	8002320 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d019      	beq.n	8002126 <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	212c      	movs	r1, #44	; 0x2c
 80020f8:	fb01 f303 	mul.w	r3, r1, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	3348      	adds	r3, #72	; 0x48
 8002100:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	0159      	lsls	r1, r3, #5
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	440b      	add	r3, r1
 800210a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002114:	1ad2      	subs	r2, r2, r3
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	202c      	movs	r0, #44	; 0x2c
 800211c:	fb00 f303 	mul.w	r3, r0, r3
 8002120:	440b      	add	r3, r1
 8002122:	3350      	adds	r3, #80	; 0x50
 8002124:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	212c      	movs	r1, #44	; 0x2c
 800212c:	fb01 f303 	mul.w	r3, r1, r3
 8002130:	4413      	add	r3, r2
 8002132:	3361      	adds	r3, #97	; 0x61
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	212c      	movs	r1, #44	; 0x2c
 800213e:	fb01 f303 	mul.w	r3, r1, r3
 8002142:	4413      	add	r3, r2
 8002144:	335c      	adds	r3, #92	; 0x5c
 8002146:	2200      	movs	r2, #0
 8002148:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	015a      	lsls	r2, r3, #5
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002156:	461a      	mov	r2, r3
 8002158:	2301      	movs	r3, #1
 800215a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	212c      	movs	r1, #44	; 0x2c
 8002162:	fb01 f303 	mul.w	r3, r1, r3
 8002166:	4413      	add	r3, r2
 8002168:	333f      	adds	r3, #63	; 0x3f
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d009      	beq.n	8002184 <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	212c      	movs	r1, #44	; 0x2c
 8002176:	fb01 f303 	mul.w	r3, r1, r3
 800217a:	4413      	add	r3, r2
 800217c:	333f      	adds	r3, #63	; 0x3f
 800217e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002180:	2b02      	cmp	r3, #2
 8002182:	d121      	bne.n	80021c8 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	015a      	lsls	r2, r3, #5
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4413      	add	r3, r2
 800218c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	0151      	lsls	r1, r2, #5
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	440a      	add	r2, r1
 800219a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800219e:	f043 0302 	orr.w	r3, r3, #2
 80021a2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	4611      	mov	r1, r2
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 f967 	bl	8006482 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	461a      	mov	r2, r3
 80021c2:	2310      	movs	r3, #16
 80021c4:	6093      	str	r3, [r2, #8]
 80021c6:	e066      	b.n	8002296 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	212c      	movs	r1, #44	; 0x2c
 80021ce:	fb01 f303 	mul.w	r3, r1, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	333f      	adds	r3, #63	; 0x3f
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d127      	bne.n	800222c <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	0151      	lsls	r1, r2, #5
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	440a      	add	r2, r1
 80021f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021fa:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	212c      	movs	r1, #44	; 0x2c
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	3360      	adds	r3, #96	; 0x60
 800220a:	2201      	movs	r2, #1
 800220c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	b2d9      	uxtb	r1, r3
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	202c      	movs	r0, #44	; 0x2c
 8002218:	fb00 f303 	mul.w	r3, r0, r3
 800221c:	4413      	add	r3, r2
 800221e:	3360      	adds	r3, #96	; 0x60
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f006 fae9 	bl	80087fc <HAL_HCD_HC_NotifyURBChange_Callback>
 800222a:	e034      	b.n	8002296 <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	333f      	adds	r3, #63	; 0x3f
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d12a      	bne.n	8002296 <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	212c      	movs	r1, #44	; 0x2c
 8002246:	fb01 f303 	mul.w	r3, r1, r3
 800224a:	4413      	add	r3, r2
 800224c:	3360      	adds	r3, #96	; 0x60
 800224e:	2201      	movs	r2, #1
 8002250:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	212c      	movs	r1, #44	; 0x2c
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	4413      	add	r3, r2
 800225e:	3354      	adds	r3, #84	; 0x54
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2d8      	uxtb	r0, r3
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	212c      	movs	r1, #44	; 0x2c
 800226e:	fb01 f303 	mul.w	r3, r1, r3
 8002272:	4413      	add	r3, r2
 8002274:	3354      	adds	r3, #84	; 0x54
 8002276:	4602      	mov	r2, r0
 8002278:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	b2d9      	uxtb	r1, r3
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	202c      	movs	r0, #44	; 0x2c
 8002284:	fb00 f303 	mul.w	r3, r0, r3
 8002288:	4413      	add	r3, r2
 800228a:	3360      	adds	r3, #96	; 0x60
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f006 fab3 	bl	80087fc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d12b      	bne.n	80022f6 <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	212c      	movs	r1, #44	; 0x2c
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	4413      	add	r3, r2
 80022aa:	3348      	adds	r3, #72	; 0x48
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	202c      	movs	r0, #44	; 0x2c
 80022b4:	fb00 f202 	mul.w	r2, r0, r2
 80022b8:	440a      	add	r2, r1
 80022ba:	3240      	adds	r2, #64	; 0x40
 80022bc:	8812      	ldrh	r2, [r2, #0]
 80022be:	fbb3 f3f2 	udiv	r3, r3, r2
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 81be 	beq.w	8002648 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3354      	adds	r3, #84	; 0x54
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f083 0301 	eor.w	r3, r3, #1
 80022e0:	b2d8      	uxtb	r0, r3
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	212c      	movs	r1, #44	; 0x2c
 80022e8:	fb01 f303 	mul.w	r3, r1, r3
 80022ec:	4413      	add	r3, r2
 80022ee:	3354      	adds	r3, #84	; 0x54
 80022f0:	4602      	mov	r2, r0
 80022f2:	701a      	strb	r2, [r3, #0]
}
 80022f4:	e1a8      	b.n	8002648 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	212c      	movs	r1, #44	; 0x2c
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	3354      	adds	r3, #84	; 0x54
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	f083 0301 	eor.w	r3, r3, #1
 800230a:	b2d8      	uxtb	r0, r3
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	212c      	movs	r1, #44	; 0x2c
 8002312:	fb01 f303 	mul.w	r3, r1, r3
 8002316:	4413      	add	r3, r2
 8002318:	3354      	adds	r3, #84	; 0x54
 800231a:	4602      	mov	r2, r0
 800231c:	701a      	strb	r2, [r3, #0]
}
 800231e:	e193      	b.n	8002648 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	015a      	lsls	r2, r3, #5
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	4413      	add	r3, r2
 8002328:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b02      	cmp	r3, #2
 8002334:	f040 8106 	bne.w	8002544 <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	0151      	lsls	r1, r2, #5
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	440a      	add	r2, r1
 800234e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002352:	f023 0302 	bic.w	r3, r3, #2
 8002356:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	212c      	movs	r1, #44	; 0x2c
 800235e:	fb01 f303 	mul.w	r3, r1, r3
 8002362:	4413      	add	r3, r2
 8002364:	3361      	adds	r3, #97	; 0x61
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d109      	bne.n	8002380 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3360      	adds	r3, #96	; 0x60
 800237a:	2201      	movs	r2, #1
 800237c:	701a      	strb	r2, [r3, #0]
 800237e:	e0c9      	b.n	8002514 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	3361      	adds	r3, #97	; 0x61
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b05      	cmp	r3, #5
 8002392:	d109      	bne.n	80023a8 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	212c      	movs	r1, #44	; 0x2c
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	3360      	adds	r3, #96	; 0x60
 80023a2:	2205      	movs	r2, #5
 80023a4:	701a      	strb	r2, [r3, #0]
 80023a6:	e0b5      	b.n	8002514 <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	212c      	movs	r1, #44	; 0x2c
 80023ae:	fb01 f303 	mul.w	r3, r1, r3
 80023b2:	4413      	add	r3, r2
 80023b4:	3361      	adds	r3, #97	; 0x61
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b06      	cmp	r3, #6
 80023ba:	d009      	beq.n	80023d0 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	212c      	movs	r1, #44	; 0x2c
 80023c2:	fb01 f303 	mul.w	r3, r1, r3
 80023c6:	4413      	add	r3, r2
 80023c8:	3361      	adds	r3, #97	; 0x61
 80023ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80023cc:	2b08      	cmp	r3, #8
 80023ce:	d150      	bne.n	8002472 <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	212c      	movs	r1, #44	; 0x2c
 80023d6:	fb01 f303 	mul.w	r3, r1, r3
 80023da:	4413      	add	r3, r2
 80023dc:	335c      	adds	r3, #92	; 0x5c
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	6879      	ldr	r1, [r7, #4]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	202c      	movs	r0, #44	; 0x2c
 80023e8:	fb00 f303 	mul.w	r3, r0, r3
 80023ec:	440b      	add	r3, r1
 80023ee:	335c      	adds	r3, #92	; 0x5c
 80023f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	212c      	movs	r1, #44	; 0x2c
 80023f8:	fb01 f303 	mul.w	r3, r1, r3
 80023fc:	4413      	add	r3, r2
 80023fe:	335c      	adds	r3, #92	; 0x5c
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d912      	bls.n	800242c <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	212c      	movs	r1, #44	; 0x2c
 800240c:	fb01 f303 	mul.w	r3, r1, r3
 8002410:	4413      	add	r3, r2
 8002412:	335c      	adds	r3, #92	; 0x5c
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3360      	adds	r3, #96	; 0x60
 8002426:	2204      	movs	r2, #4
 8002428:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800242a:	e073      	b.n	8002514 <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	3360      	adds	r3, #96	; 0x60
 800243a:	2202      	movs	r2, #2
 800243c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	015a      	lsls	r2, r3, #5
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	4413      	add	r3, r2
 8002446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002454:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800245c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	015a      	lsls	r2, r3, #5
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4413      	add	r3, r2
 8002466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800246a:	461a      	mov	r2, r3
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002470:	e050      	b.n	8002514 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	212c      	movs	r1, #44	; 0x2c
 8002478:	fb01 f303 	mul.w	r3, r1, r3
 800247c:	4413      	add	r3, r2
 800247e:	3361      	adds	r3, #97	; 0x61
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b03      	cmp	r3, #3
 8002484:	d122      	bne.n	80024cc <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	212c      	movs	r1, #44	; 0x2c
 800248c:	fb01 f303 	mul.w	r3, r1, r3
 8002490:	4413      	add	r3, r2
 8002492:	3360      	adds	r3, #96	; 0x60
 8002494:	2202      	movs	r2, #2
 8002496:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	015a      	lsls	r2, r3, #5
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4413      	add	r3, r2
 80024a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e023      	b.n	8002514 <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	3361      	adds	r3, #97	; 0x61
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b07      	cmp	r3, #7
 80024de:	d119      	bne.n	8002514 <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	335c      	adds	r3, #92	; 0x5c
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	1c5a      	adds	r2, r3, #1
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	202c      	movs	r0, #44	; 0x2c
 80024f8:	fb00 f303 	mul.w	r3, r0, r3
 80024fc:	440b      	add	r3, r1
 80024fe:	335c      	adds	r3, #92	; 0x5c
 8002500:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	212c      	movs	r1, #44	; 0x2c
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	4413      	add	r3, r2
 800250e:	3360      	adds	r3, #96	; 0x60
 8002510:	2204      	movs	r2, #4
 8002512:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	2302      	movs	r3, #2
 8002524:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	b2d9      	uxtb	r1, r3
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	202c      	movs	r0, #44	; 0x2c
 8002530:	fb00 f303 	mul.w	r3, r0, r3
 8002534:	4413      	add	r3, r2
 8002536:	3360      	adds	r3, #96	; 0x60
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f006 f95d 	bl	80087fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002542:	e081      	b.n	8002648 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	015a      	lsls	r2, r3, #5
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	4413      	add	r3, r2
 800254c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 0310 	and.w	r3, r3, #16
 8002556:	2b10      	cmp	r3, #16
 8002558:	d176      	bne.n	8002648 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	212c      	movs	r1, #44	; 0x2c
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	4413      	add	r3, r2
 8002566:	333f      	adds	r3, #63	; 0x3f
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d121      	bne.n	80025b2 <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	212c      	movs	r1, #44	; 0x2c
 8002574:	fb01 f303 	mul.w	r3, r1, r3
 8002578:	4413      	add	r3, r2
 800257a:	335c      	adds	r3, #92	; 0x5c
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	015a      	lsls	r2, r3, #5
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	4413      	add	r3, r2
 8002588:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	0151      	lsls	r1, r2, #5
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	440a      	add	r2, r1
 8002596:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 ff69 	bl	8006482 <USB_HC_Halt>
 80025b0:	e041      	b.n	8002636 <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	212c      	movs	r1, #44	; 0x2c
 80025b8:	fb01 f303 	mul.w	r3, r1, r3
 80025bc:	4413      	add	r3, r2
 80025be:	333f      	adds	r3, #63	; 0x3f
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	212c      	movs	r1, #44	; 0x2c
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4413      	add	r3, r2
 80025d2:	333f      	adds	r3, #63	; 0x3f
 80025d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d12d      	bne.n	8002636 <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	212c      	movs	r1, #44	; 0x2c
 80025e0:	fb01 f303 	mul.w	r3, r1, r3
 80025e4:	4413      	add	r3, r2
 80025e6:	335c      	adds	r3, #92	; 0x5c
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d120      	bne.n	8002636 <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	212c      	movs	r1, #44	; 0x2c
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	4413      	add	r3, r2
 8002600:	3361      	adds	r3, #97	; 0x61
 8002602:	2203      	movs	r2, #3
 8002604:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	0151      	lsls	r1, r2, #5
 8002618:	693a      	ldr	r2, [r7, #16]
 800261a:	440a      	add	r2, r1
 800261c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002620:	f043 0302 	orr.w	r3, r3, #2
 8002624:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f003 ff26 	bl	8006482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4413      	add	r3, r2
 800263e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002642:	461a      	mov	r2, r3
 8002644:	2310      	movs	r3, #16
 8002646:	6093      	str	r3, [r2, #8]
}
 8002648:	bf00      	nop
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002666:	78fb      	ldrb	r3, [r7, #3]
 8002668:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	015a      	lsls	r2, r3, #5
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	4413      	add	r3, r2
 8002672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b04      	cmp	r3, #4
 800267e:	d119      	bne.n	80026b4 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	4413      	add	r3, r2
 8002688:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800268c:	461a      	mov	r2, r3
 800268e:	2304      	movs	r3, #4
 8002690:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	015a      	lsls	r2, r3, #5
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	4413      	add	r3, r2
 800269a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	0151      	lsls	r1, r2, #5
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	440a      	add	r2, r1
 80026a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ac:	f043 0302 	orr.w	r3, r3, #2
 80026b0:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026b2:	e3c6      	b.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b20      	cmp	r3, #32
 80026c8:	d13e      	bne.n	8002748 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	461a      	mov	r2, r3
 80026d8:	2320      	movs	r3, #32
 80026da:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	212c      	movs	r1, #44	; 0x2c
 80026e2:	fb01 f303 	mul.w	r3, r1, r3
 80026e6:	4413      	add	r3, r2
 80026e8:	333d      	adds	r3, #61	; 0x3d
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	f040 83a8 	bne.w	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	212c      	movs	r1, #44	; 0x2c
 80026f8:	fb01 f303 	mul.w	r3, r1, r3
 80026fc:	4413      	add	r3, r2
 80026fe:	333d      	adds	r3, #61	; 0x3d
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	212c      	movs	r1, #44	; 0x2c
 800270a:	fb01 f303 	mul.w	r3, r1, r3
 800270e:	4413      	add	r3, r2
 8002710:	3360      	adds	r3, #96	; 0x60
 8002712:	2202      	movs	r2, #2
 8002714:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	0151      	lsls	r1, r2, #5
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	440a      	add	r2, r1
 800272c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002730:	f043 0302 	orr.w	r3, r3, #2
 8002734:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	4611      	mov	r1, r2
 8002740:	4618      	mov	r0, r3
 8002742:	f003 fe9e 	bl	8006482 <USB_HC_Halt>
}
 8002746:	e37c      	b.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	015a      	lsls	r2, r3, #5
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	4413      	add	r3, r2
 8002750:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800275a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275e:	d122      	bne.n	80027a6 <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	015a      	lsls	r2, r3, #5
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	4413      	add	r3, r2
 8002768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	0151      	lsls	r1, r2, #5
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	440a      	add	r2, r1
 8002776:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800277a:	f043 0302 	orr.w	r3, r3, #2
 800277e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	b2d2      	uxtb	r2, r2
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f003 fe79 	bl	8006482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	4413      	add	r3, r2
 8002798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800279c:	461a      	mov	r2, r3
 800279e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a2:	6093      	str	r3, [r2, #8]
}
 80027a4:	e34d      	b.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	015a      	lsls	r2, r3, #5
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	4413      	add	r3, r2
 80027ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d150      	bne.n	800285e <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	335c      	adds	r3, #92	; 0x5c
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d111      	bne.n	8002808 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	333d      	adds	r3, #61	; 0x3d
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002802:	461a      	mov	r2, r3
 8002804:	2340      	movs	r3, #64	; 0x40
 8002806:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	0151      	lsls	r1, r2, #5
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	440a      	add	r2, r1
 800281e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002822:	f043 0302 	orr.w	r3, r3, #2
 8002826:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	b2d2      	uxtb	r2, r2
 8002830:	4611      	mov	r1, r2
 8002832:	4618      	mov	r0, r3
 8002834:	f003 fe25 	bl	8006482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002844:	461a      	mov	r2, r3
 8002846:	2301      	movs	r3, #1
 8002848:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	212c      	movs	r1, #44	; 0x2c
 8002850:	fb01 f303 	mul.w	r3, r1, r3
 8002854:	4413      	add	r3, r2
 8002856:	3361      	adds	r3, #97	; 0x61
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
}
 800285c:	e2f1      	b.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4413      	add	r3, r2
 8002866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002870:	2b40      	cmp	r3, #64	; 0x40
 8002872:	d13c      	bne.n	80028ee <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	212c      	movs	r1, #44	; 0x2c
 800287a:	fb01 f303 	mul.w	r3, r1, r3
 800287e:	4413      	add	r3, r2
 8002880:	3361      	adds	r3, #97	; 0x61
 8002882:	2204      	movs	r2, #4
 8002884:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	212c      	movs	r1, #44	; 0x2c
 800288c:	fb01 f303 	mul.w	r3, r1, r3
 8002890:	4413      	add	r3, r2
 8002892:	333d      	adds	r3, #61	; 0x3d
 8002894:	2201      	movs	r2, #1
 8002896:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	212c      	movs	r1, #44	; 0x2c
 800289e:	fb01 f303 	mul.w	r3, r1, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	335c      	adds	r3, #92	; 0x5c
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	0151      	lsls	r1, r2, #5
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	440a      	add	r2, r1
 80028c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	b2d2      	uxtb	r2, r2
 80028d2:	4611      	mov	r1, r2
 80028d4:	4618      	mov	r0, r3
 80028d6:	f003 fdd4 	bl	8006482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e6:	461a      	mov	r2, r3
 80028e8:	2340      	movs	r3, #64	; 0x40
 80028ea:	6093      	str	r3, [r2, #8]
}
 80028ec:	e2a9      	b.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	015a      	lsls	r2, r3, #5
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b08      	cmp	r3, #8
 8002902:	d12a      	bne.n	800295a <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	015a      	lsls	r2, r3, #5
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	4413      	add	r3, r2
 800290c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002910:	461a      	mov	r2, r3
 8002912:	2308      	movs	r3, #8
 8002914:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	015a      	lsls	r2, r3, #5
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4413      	add	r3, r2
 800291e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	0151      	lsls	r1, r2, #5
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	440a      	add	r2, r1
 800292c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002930:	f043 0302 	orr.w	r3, r3, #2
 8002934:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f003 fd9e 	bl	8006482 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	212c      	movs	r1, #44	; 0x2c
 800294c:	fb01 f303 	mul.w	r3, r1, r3
 8002950:	4413      	add	r3, r2
 8002952:	3361      	adds	r3, #97	; 0x61
 8002954:	2205      	movs	r2, #5
 8002956:	701a      	strb	r2, [r3, #0]
}
 8002958:	e273      	b.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	2b10      	cmp	r3, #16
 800296e:	d150      	bne.n	8002a12 <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	212c      	movs	r1, #44	; 0x2c
 8002976:	fb01 f303 	mul.w	r3, r1, r3
 800297a:	4413      	add	r3, r2
 800297c:	335c      	adds	r3, #92	; 0x5c
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	212c      	movs	r1, #44	; 0x2c
 8002988:	fb01 f303 	mul.w	r3, r1, r3
 800298c:	4413      	add	r3, r2
 800298e:	3361      	adds	r3, #97	; 0x61
 8002990:	2203      	movs	r2, #3
 8002992:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	212c      	movs	r1, #44	; 0x2c
 800299a:	fb01 f303 	mul.w	r3, r1, r3
 800299e:	4413      	add	r3, r2
 80029a0:	333d      	adds	r3, #61	; 0x3d
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d112      	bne.n	80029ce <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	212c      	movs	r1, #44	; 0x2c
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	4413      	add	r3, r2
 80029b4:	333c      	adds	r3, #60	; 0x3c
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d108      	bne.n	80029ce <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	212c      	movs	r1, #44	; 0x2c
 80029c2:	fb01 f303 	mul.w	r3, r1, r3
 80029c6:	4413      	add	r3, r2
 80029c8:	333d      	adds	r3, #61	; 0x3d
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	0151      	lsls	r1, r2, #5
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	440a      	add	r2, r1
 80029e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029e8:	f043 0302 	orr.w	r3, r3, #2
 80029ec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	4611      	mov	r1, r2
 80029f8:	4618      	mov	r0, r3
 80029fa:	f003 fd42 	bl	8006482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	015a      	lsls	r2, r3, #5
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	4413      	add	r3, r2
 8002a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	6093      	str	r3, [r2, #8]
}
 8002a10:	e217      	b.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	015a      	lsls	r2, r3, #5
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	4413      	add	r3, r2
 8002a1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a24:	2b80      	cmp	r3, #128	; 0x80
 8002a26:	d174      	bne.n	8002b12 <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d121      	bne.n	8002a74 <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	212c      	movs	r1, #44	; 0x2c
 8002a36:	fb01 f303 	mul.w	r3, r1, r3
 8002a3a:	4413      	add	r3, r2
 8002a3c:	3361      	adds	r3, #97	; 0x61
 8002a3e:	2206      	movs	r2, #6
 8002a40:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a5c:	f043 0302 	orr.w	r3, r3, #2
 8002a60:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	b2d2      	uxtb	r2, r2
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f003 fd08 	bl	8006482 <USB_HC_Halt>
 8002a72:	e044      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	335c      	adds	r3, #92	; 0x5c
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	202c      	movs	r0, #44	; 0x2c
 8002a8c:	fb00 f303 	mul.w	r3, r0, r3
 8002a90:	440b      	add	r3, r1
 8002a92:	335c      	adds	r3, #92	; 0x5c
 8002a94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	212c      	movs	r1, #44	; 0x2c
 8002a9c:	fb01 f303 	mul.w	r3, r1, r3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	335c      	adds	r3, #92	; 0x5c
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d920      	bls.n	8002aec <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	212c      	movs	r1, #44	; 0x2c
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3360      	adds	r3, #96	; 0x60
 8002aca:	2204      	movs	r2, #4
 8002acc:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	b2d9      	uxtb	r1, r3
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	202c      	movs	r0, #44	; 0x2c
 8002ad8:	fb00 f303 	mul.w	r3, r0, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	3360      	adds	r3, #96	; 0x60
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f005 fe89 	bl	80087fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002aea:	e008      	b.n	8002afe <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	212c      	movs	r1, #44	; 0x2c
 8002af2:	fb01 f303 	mul.w	r3, r1, r3
 8002af6:	4413      	add	r3, r2
 8002af8:	3360      	adds	r3, #96	; 0x60
 8002afa:	2202      	movs	r2, #2
 8002afc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2380      	movs	r3, #128	; 0x80
 8002b0e:	6093      	str	r3, [r2, #8]
}
 8002b10:	e197      	b.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b28:	d134      	bne.n	8002b94 <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	0151      	lsls	r1, r2, #5
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	440a      	add	r2, r1
 8002b40:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f003 fc94 	bl	8006482 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	015a      	lsls	r2, r3, #5
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	4413      	add	r3, r2
 8002b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b66:	461a      	mov	r2, r3
 8002b68:	2310      	movs	r3, #16
 8002b6a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	212c      	movs	r1, #44	; 0x2c
 8002b86:	fb01 f303 	mul.w	r3, r1, r3
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3361      	adds	r3, #97	; 0x61
 8002b8e:	2208      	movs	r2, #8
 8002b90:	701a      	strb	r2, [r3, #0]
}
 8002b92:	e156      	b.n	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	f040 814b 	bne.w	8002e42 <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	0151      	lsls	r1, r2, #5
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	440a      	add	r2, r1
 8002bc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002bc6:	f023 0302 	bic.w	r3, r3, #2
 8002bca:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	212c      	movs	r1, #44	; 0x2c
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3361      	adds	r3, #97	; 0x61
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d179      	bne.n	8002cd4 <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	212c      	movs	r1, #44	; 0x2c
 8002be6:	fb01 f303 	mul.w	r3, r1, r3
 8002bea:	4413      	add	r3, r2
 8002bec:	3360      	adds	r3, #96	; 0x60
 8002bee:	2201      	movs	r2, #1
 8002bf0:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	212c      	movs	r1, #44	; 0x2c
 8002bf8:	fb01 f303 	mul.w	r3, r1, r3
 8002bfc:	4413      	add	r3, r2
 8002bfe:	333f      	adds	r3, #63	; 0x3f
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d00a      	beq.n	8002c1c <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	212c      	movs	r1, #44	; 0x2c
 8002c0c:	fb01 f303 	mul.w	r3, r1, r3
 8002c10:	4413      	add	r3, r2
 8002c12:	333f      	adds	r3, #63	; 0x3f
 8002c14:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	f040 80fc 	bne.w	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d142      	bne.n	8002caa <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	334c      	adds	r3, #76	; 0x4c
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 80ed 	beq.w	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	212c      	movs	r1, #44	; 0x2c
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	4413      	add	r3, r2
 8002c46:	334c      	adds	r3, #76	; 0x4c
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	202c      	movs	r0, #44	; 0x2c
 8002c50:	fb00 f202 	mul.w	r2, r0, r2
 8002c54:	440a      	add	r2, r1
 8002c56:	3240      	adds	r2, #64	; 0x40
 8002c58:	8812      	ldrh	r2, [r2, #0]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3b01      	subs	r3, #1
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	202c      	movs	r0, #44	; 0x2c
 8002c64:	fb00 f202 	mul.w	r2, r0, r2
 8002c68:	440a      	add	r2, r1
 8002c6a:	3240      	adds	r2, #64	; 0x40
 8002c6c:	8812      	ldrh	r2, [r2, #0]
 8002c6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f000 80ca 	beq.w	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3355      	adds	r3, #85	; 0x55
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	f083 0301 	eor.w	r3, r3, #1
 8002c94:	b2d8      	uxtb	r0, r3
 8002c96:	687a      	ldr	r2, [r7, #4]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	212c      	movs	r1, #44	; 0x2c
 8002c9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3355      	adds	r3, #85	; 0x55
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	701a      	strb	r2, [r3, #0]
 8002ca8:	e0b4      	b.n	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	212c      	movs	r1, #44	; 0x2c
 8002cb0:	fb01 f303 	mul.w	r3, r1, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	3355      	adds	r3, #85	; 0x55
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	f083 0301 	eor.w	r3, r3, #1
 8002cbe:	b2d8      	uxtb	r0, r3
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	212c      	movs	r1, #44	; 0x2c
 8002cc6:	fb01 f303 	mul.w	r3, r1, r3
 8002cca:	4413      	add	r3, r2
 8002ccc:	3355      	adds	r3, #85	; 0x55
 8002cce:	4602      	mov	r2, r0
 8002cd0:	701a      	strb	r2, [r3, #0]
 8002cd2:	e09f      	b.n	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	212c      	movs	r1, #44	; 0x2c
 8002cda:	fb01 f303 	mul.w	r3, r1, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	3361      	adds	r3, #97	; 0x61
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d109      	bne.n	8002cfc <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3360      	adds	r3, #96	; 0x60
 8002cf6:	2202      	movs	r2, #2
 8002cf8:	701a      	strb	r2, [r3, #0]
 8002cfa:	e08b      	b.n	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3361      	adds	r3, #97	; 0x61
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d109      	bne.n	8002d24 <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	212c      	movs	r1, #44	; 0x2c
 8002d16:	fb01 f303 	mul.w	r3, r1, r3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	3360      	adds	r3, #96	; 0x60
 8002d1e:	2202      	movs	r2, #2
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e077      	b.n	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3361      	adds	r3, #97	; 0x61
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b05      	cmp	r3, #5
 8002d36:	d109      	bne.n	8002d4c <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	212c      	movs	r1, #44	; 0x2c
 8002d3e:	fb01 f303 	mul.w	r3, r1, r3
 8002d42:	4413      	add	r3, r2
 8002d44:	3360      	adds	r3, #96	; 0x60
 8002d46:	2205      	movs	r2, #5
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e063      	b.n	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	212c      	movs	r1, #44	; 0x2c
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	3361      	adds	r3, #97	; 0x61
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d009      	beq.n	8002d74 <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	212c      	movs	r1, #44	; 0x2c
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	3361      	adds	r3, #97	; 0x61
 8002d6e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d14f      	bne.n	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	212c      	movs	r1, #44	; 0x2c
 8002d7a:	fb01 f303 	mul.w	r3, r1, r3
 8002d7e:	4413      	add	r3, r2
 8002d80:	335c      	adds	r3, #92	; 0x5c
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	202c      	movs	r0, #44	; 0x2c
 8002d8c:	fb00 f303 	mul.w	r3, r0, r3
 8002d90:	440b      	add	r3, r1
 8002d92:	335c      	adds	r3, #92	; 0x5c
 8002d94:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	212c      	movs	r1, #44	; 0x2c
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	335c      	adds	r3, #92	; 0x5c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d912      	bls.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	335c      	adds	r3, #92	; 0x5c
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3360      	adds	r3, #96	; 0x60
 8002dca:	2204      	movs	r2, #4
 8002dcc:	701a      	strb	r2, [r3, #0]
 8002dce:	e021      	b.n	8002e14 <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	212c      	movs	r1, #44	; 0x2c
 8002dd6:	fb01 f303 	mul.w	r3, r1, r3
 8002dda:	4413      	add	r3, r2
 8002ddc:	3360      	adds	r3, #96	; 0x60
 8002dde:	2202      	movs	r2, #2
 8002de0:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002df8:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e00:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e0e:	461a      	mov	r2, r3
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e20:	461a      	mov	r2, r3
 8002e22:	2302      	movs	r3, #2
 8002e24:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	b2d9      	uxtb	r1, r3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	202c      	movs	r0, #44	; 0x2c
 8002e30:	fb00 f303 	mul.w	r3, r0, r3
 8002e34:	4413      	add	r3, r2
 8002e36:	3360      	adds	r3, #96	; 0x60
 8002e38:	781b      	ldrb	r3, [r3, #0]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f005 fcdd 	bl	80087fc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002e42:	bf00      	nop
 8002e44:	3720      	adds	r7, #32
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b08a      	sub	sp, #40	; 0x28
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	0c5b      	lsrs	r3, r3, #17
 8002e70:	f003 030f 	and.w	r3, r3, #15
 8002e74:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	091b      	lsrs	r3, r3, #4
 8002e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e7e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d004      	beq.n	8002e90 <HCD_RXQLVL_IRQHandler+0x46>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	f000 80a9 	beq.w	8002fe0 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002e8e:	e0aa      	b.n	8002fe6 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 80a6 	beq.w	8002fe4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	3344      	adds	r3, #68	; 0x44
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 809b 	beq.w	8002fe4 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	212c      	movs	r1, #44	; 0x2c
 8002eb4:	fb01 f303 	mul.w	r3, r1, r3
 8002eb8:	4413      	add	r3, r2
 8002eba:	3350      	adds	r3, #80	; 0x50
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	441a      	add	r2, r3
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	202c      	movs	r0, #44	; 0x2c
 8002ec8:	fb00 f303 	mul.w	r3, r0, r3
 8002ecc:	440b      	add	r3, r1
 8002ece:	334c      	adds	r3, #76	; 0x4c
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d87a      	bhi.n	8002fcc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6818      	ldr	r0, [r3, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	212c      	movs	r1, #44	; 0x2c
 8002ee0:	fb01 f303 	mul.w	r3, r1, r3
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3344      	adds	r3, #68	; 0x44
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	b292      	uxth	r2, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f002 fe65 	bl	8005bbe <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3344      	adds	r3, #68	; 0x44
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	441a      	add	r2, r3
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	202c      	movs	r0, #44	; 0x2c
 8002f0e:	fb00 f303 	mul.w	r3, r0, r3
 8002f12:	440b      	add	r3, r1
 8002f14:	3344      	adds	r3, #68	; 0x44
 8002f16:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	212c      	movs	r1, #44	; 0x2c
 8002f1e:	fb01 f303 	mul.w	r3, r1, r3
 8002f22:	4413      	add	r3, r2
 8002f24:	3350      	adds	r3, #80	; 0x50
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	441a      	add	r2, r3
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	202c      	movs	r0, #44	; 0x2c
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	440b      	add	r3, r1
 8002f38:	3350      	adds	r3, #80	; 0x50
 8002f3a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	015a      	lsls	r2, r3, #5
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	4413      	add	r3, r2
 8002f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	0cdb      	lsrs	r3, r3, #19
 8002f4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f50:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	212c      	movs	r1, #44	; 0x2c
 8002f58:	fb01 f303 	mul.w	r3, r1, r3
 8002f5c:	4413      	add	r3, r2
 8002f5e:	3340      	adds	r3, #64	; 0x40
 8002f60:	881b      	ldrh	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d13c      	bne.n	8002fe4 <HCD_RXQLVL_IRQHandler+0x19a>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d039      	beq.n	8002fe4 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	015a      	lsls	r2, r3, #5
 8002f74:	6a3b      	ldr	r3, [r7, #32]
 8002f76:	4413      	add	r3, r2
 8002f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f86:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f8e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	015a      	lsls	r2, r3, #5
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	4413      	add	r3, r2
 8002f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	212c      	movs	r1, #44	; 0x2c
 8002fa8:	fb01 f303 	mul.w	r3, r1, r3
 8002fac:	4413      	add	r3, r2
 8002fae:	3354      	adds	r3, #84	; 0x54
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	f083 0301 	eor.w	r3, r3, #1
 8002fb6:	b2d8      	uxtb	r0, r3
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	212c      	movs	r1, #44	; 0x2c
 8002fbe:	fb01 f303 	mul.w	r3, r1, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3354      	adds	r3, #84	; 0x54
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	701a      	strb	r2, [r3, #0]
      break;
 8002fca:	e00b      	b.n	8002fe4 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	212c      	movs	r1, #44	; 0x2c
 8002fd2:	fb01 f303 	mul.w	r3, r1, r3
 8002fd6:	4413      	add	r3, r2
 8002fd8:	3360      	adds	r3, #96	; 0x60
 8002fda:	2204      	movs	r2, #4
 8002fdc:	701a      	strb	r2, [r3, #0]
      break;
 8002fde:	e001      	b.n	8002fe4 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002fe0:	bf00      	nop
 8002fe2:	e000      	b.n	8002fe6 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002fe4:	bf00      	nop
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	3728      	adds	r7, #40	; 0x28
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800301a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	d10b      	bne.n	800303e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d102      	bne.n	8003036 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f005 fbc7 	bl	80087c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d132      	bne.n	80030ae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	f043 0308 	orr.w	r3, r3, #8
 800304e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b04      	cmp	r3, #4
 8003058:	d126      	bne.n	80030a8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d113      	bne.n	800308a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003068:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800306c:	d106      	bne.n	800307c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2102      	movs	r1, #2
 8003074:	4618      	mov	r0, r3
 8003076:	f002 fedd 	bl	8005e34 <USB_InitFSLSPClkSel>
 800307a:	e011      	b.n	80030a0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2101      	movs	r1, #1
 8003082:	4618      	mov	r0, r3
 8003084:	f002 fed6 	bl	8005e34 <USB_InitFSLSPClkSel>
 8003088:	e00a      	b.n	80030a0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d106      	bne.n	80030a0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003098:	461a      	mov	r2, r3
 800309a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800309e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f005 fbb9 	bl	8008818 <HAL_HCD_PortEnabled_Callback>
 80030a6:	e002      	b.n	80030ae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f005 fbc3 	bl	8008834 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0320 	and.w	r3, r3, #32
 80030b4:	2b20      	cmp	r3, #32
 80030b6:	d103      	bne.n	80030c0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f043 0320 	orr.w	r3, r3, #32
 80030be:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80030c6:	461a      	mov	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	6013      	str	r3, [r2, #0]
}
 80030cc:	bf00      	nop
 80030ce:	3718      	adds	r7, #24
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e12b      	b.n	800333e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d106      	bne.n	8003100 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fccc 	bl	8000a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2224      	movs	r2, #36	; 0x24
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f022 0201 	bic.w	r2, r2, #1
 8003116:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003126:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003136:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003138:	f001 f9fc 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 800313c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a81      	ldr	r2, [pc, #516]	; (8003348 <HAL_I2C_Init+0x274>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d807      	bhi.n	8003158 <HAL_I2C_Init+0x84>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	4a80      	ldr	r2, [pc, #512]	; (800334c <HAL_I2C_Init+0x278>)
 800314c:	4293      	cmp	r3, r2
 800314e:	bf94      	ite	ls
 8003150:	2301      	movls	r3, #1
 8003152:	2300      	movhi	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e006      	b.n	8003166 <HAL_I2C_Init+0x92>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4a7d      	ldr	r2, [pc, #500]	; (8003350 <HAL_I2C_Init+0x27c>)
 800315c:	4293      	cmp	r3, r2
 800315e:	bf94      	ite	ls
 8003160:	2301      	movls	r3, #1
 8003162:	2300      	movhi	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d001      	beq.n	800316e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e0e7      	b.n	800333e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4a78      	ldr	r2, [pc, #480]	; (8003354 <HAL_I2C_Init+0x280>)
 8003172:	fba2 2303 	umull	r2, r3, r2, r3
 8003176:	0c9b      	lsrs	r3, r3, #18
 8003178:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	430a      	orrs	r2, r1
 800318c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	4a6a      	ldr	r2, [pc, #424]	; (8003348 <HAL_I2C_Init+0x274>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d802      	bhi.n	80031a8 <HAL_I2C_Init+0xd4>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3301      	adds	r3, #1
 80031a6:	e009      	b.n	80031bc <HAL_I2C_Init+0xe8>
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031ae:	fb02 f303 	mul.w	r3, r2, r3
 80031b2:	4a69      	ldr	r2, [pc, #420]	; (8003358 <HAL_I2C_Init+0x284>)
 80031b4:	fba2 2303 	umull	r2, r3, r2, r3
 80031b8:	099b      	lsrs	r3, r3, #6
 80031ba:	3301      	adds	r3, #1
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	495c      	ldr	r1, [pc, #368]	; (8003348 <HAL_I2C_Init+0x274>)
 80031d8:	428b      	cmp	r3, r1
 80031da:	d819      	bhi.n	8003210 <HAL_I2C_Init+0x13c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e59      	subs	r1, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ea:	1c59      	adds	r1, r3, #1
 80031ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80031f0:	400b      	ands	r3, r1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00a      	beq.n	800320c <HAL_I2C_Init+0x138>
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	1e59      	subs	r1, r3, #1
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	fbb1 f3f3 	udiv	r3, r1, r3
 8003204:	3301      	adds	r3, #1
 8003206:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800320a:	e051      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800320c:	2304      	movs	r3, #4
 800320e:	e04f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d111      	bne.n	800323c <HAL_I2C_Init+0x168>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e58      	subs	r0, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6859      	ldr	r1, [r3, #4]
 8003220:	460b      	mov	r3, r1
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	440b      	add	r3, r1
 8003226:	fbb0 f3f3 	udiv	r3, r0, r3
 800322a:	3301      	adds	r3, #1
 800322c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf0c      	ite	eq
 8003234:	2301      	moveq	r3, #1
 8003236:	2300      	movne	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e012      	b.n	8003262 <HAL_I2C_Init+0x18e>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	0099      	lsls	r1, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <HAL_I2C_Init+0x196>
 8003266:	2301      	movs	r3, #1
 8003268:	e022      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10e      	bne.n	8003290 <HAL_I2C_Init+0x1bc>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1e58      	subs	r0, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6859      	ldr	r1, [r3, #4]
 800327a:	460b      	mov	r3, r1
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	440b      	add	r3, r1
 8003280:	fbb0 f3f3 	udiv	r3, r0, r3
 8003284:	3301      	adds	r3, #1
 8003286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800328a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328e:	e00f      	b.n	80032b0 <HAL_I2C_Init+0x1dc>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1e58      	subs	r0, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	0099      	lsls	r1, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	6809      	ldr	r1, [r1, #0]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6911      	ldr	r1, [r2, #16]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68d2      	ldr	r2, [r2, #12]
 80032ea:	4311      	orrs	r1, r2
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	000186a0 	.word	0x000186a0
 800334c:	001e847f 	.word	0x001e847f
 8003350:	003d08ff 	.word	0x003d08ff
 8003354:	431bde83 	.word	0x431bde83
 8003358:	10624dd3 	.word	0x10624dd3

0800335c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b088      	sub	sp, #32
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e128      	b.n	80035c0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a90      	ldr	r2, [pc, #576]	; (80035c8 <HAL_I2S_Init+0x26c>)
 8003386:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7fd fbcd 	bl	8000b28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033a4:	f023 030f 	bic.w	r3, r3, #15
 80033a8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2202      	movs	r2, #2
 80033b0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d060      	beq.n	800347c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d102      	bne.n	80033c8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80033c2:	2310      	movs	r3, #16
 80033c4:	617b      	str	r3, [r7, #20]
 80033c6:	e001      	b.n	80033cc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	689b      	ldr	r3, [r3, #8]
 80033d0:	2b20      	cmp	r3, #32
 80033d2:	d802      	bhi.n	80033da <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80033da:	2001      	movs	r0, #1
 80033dc:	f001 f9a0 	bl	8004720 <HAL_RCCEx_GetPeriphCLKFreq>
 80033e0:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033ea:	d125      	bne.n	8003438 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80033fe:	4613      	mov	r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	461a      	mov	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	3305      	adds	r3, #5
 8003412:	613b      	str	r3, [r7, #16]
 8003414:	e01f      	b.n	8003456 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	68fa      	ldr	r2, [r7, #12]
 800341c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003420:	4613      	mov	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	4413      	add	r3, r2
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	461a      	mov	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003432:	3305      	adds	r3, #5
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	e00e      	b.n	8003456 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003440:	4613      	mov	r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	461a      	mov	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003452:	3305      	adds	r3, #5
 8003454:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	4a5c      	ldr	r2, [pc, #368]	; (80035cc <HAL_I2S_Init+0x270>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	08db      	lsrs	r3, r3, #3
 8003460:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	085b      	lsrs	r3, r3, #1
 8003472:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	e003      	b.n	8003484 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800347c:	2302      	movs	r3, #2
 800347e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d902      	bls.n	8003490 <HAL_I2S_Init+0x134>
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2bff      	cmp	r3, #255	; 0xff
 800348e:	d907      	bls.n	80034a0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003494:	f043 0210 	orr.w	r2, r3, #16
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e08f      	b.n	80035c0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	ea42 0103 	orr.w	r1, r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69fa      	ldr	r2, [r7, #28]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	69db      	ldr	r3, [r3, #28]
 80034ba:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034be:	f023 030f 	bic.w	r3, r3, #15
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	6851      	ldr	r1, [r2, #4]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6892      	ldr	r2, [r2, #8]
 80034ca:	4311      	orrs	r1, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68d2      	ldr	r2, [r2, #12]
 80034d0:	4311      	orrs	r1, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6992      	ldr	r2, [r2, #24]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034e2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d161      	bne.n	80035b0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a38      	ldr	r2, [pc, #224]	; (80035d0 <HAL_I2S_Init+0x274>)
 80034f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a37      	ldr	r2, [pc, #220]	; (80035d4 <HAL_I2S_Init+0x278>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d101      	bne.n	8003500 <HAL_I2S_Init+0x1a4>
 80034fc:	4b36      	ldr	r3, [pc, #216]	; (80035d8 <HAL_I2S_Init+0x27c>)
 80034fe:	e001      	b.n	8003504 <HAL_I2S_Init+0x1a8>
 8003500:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003504:	69db      	ldr	r3, [r3, #28]
 8003506:	687a      	ldr	r2, [r7, #4]
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	4932      	ldr	r1, [pc, #200]	; (80035d4 <HAL_I2S_Init+0x278>)
 800350c:	428a      	cmp	r2, r1
 800350e:	d101      	bne.n	8003514 <HAL_I2S_Init+0x1b8>
 8003510:	4a31      	ldr	r2, [pc, #196]	; (80035d8 <HAL_I2S_Init+0x27c>)
 8003512:	e001      	b.n	8003518 <HAL_I2S_Init+0x1bc>
 8003514:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003518:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800351c:	f023 030f 	bic.w	r3, r3, #15
 8003520:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a2b      	ldr	r2, [pc, #172]	; (80035d4 <HAL_I2S_Init+0x278>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d101      	bne.n	8003530 <HAL_I2S_Init+0x1d4>
 800352c:	4b2a      	ldr	r3, [pc, #168]	; (80035d8 <HAL_I2S_Init+0x27c>)
 800352e:	e001      	b.n	8003534 <HAL_I2S_Init+0x1d8>
 8003530:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003534:	2202      	movs	r2, #2
 8003536:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a25      	ldr	r2, [pc, #148]	; (80035d4 <HAL_I2S_Init+0x278>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_I2S_Init+0x1ea>
 8003542:	4b25      	ldr	r3, [pc, #148]	; (80035d8 <HAL_I2S_Init+0x27c>)
 8003544:	e001      	b.n	800354a <HAL_I2S_Init+0x1ee>
 8003546:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800354a:	69db      	ldr	r3, [r3, #28]
 800354c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003556:	d003      	beq.n	8003560 <HAL_I2S_Init+0x204>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d103      	bne.n	8003568 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	e001      	b.n	800356c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003568:	2300      	movs	r3, #0
 800356a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003576:	4313      	orrs	r3, r2
 8003578:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003580:	4313      	orrs	r3, r2
 8003582:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800358a:	4313      	orrs	r3, r2
 800358c:	b29a      	uxth	r2, r3
 800358e:	897b      	ldrh	r3, [r7, #10]
 8003590:	4313      	orrs	r3, r2
 8003592:	b29b      	uxth	r3, r3
 8003594:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003598:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a0d      	ldr	r2, [pc, #52]	; (80035d4 <HAL_I2S_Init+0x278>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d101      	bne.n	80035a8 <HAL_I2S_Init+0x24c>
 80035a4:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <HAL_I2S_Init+0x27c>)
 80035a6:	e001      	b.n	80035ac <HAL_I2S_Init+0x250>
 80035a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035ac:	897a      	ldrh	r2, [r7, #10]
 80035ae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3720      	adds	r7, #32
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	080036d3 	.word	0x080036d3
 80035cc:	cccccccd 	.word	0xcccccccd
 80035d0:	080037e9 	.word	0x080037e9
 80035d4:	40003800 	.word	0x40003800
 80035d8:	40003400 	.word	0x40003400

080035dc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	881a      	ldrh	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	1c9a      	adds	r2, r3, #2
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363a:	b29b      	uxth	r3, r3
 800363c:	3b01      	subs	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10e      	bne.n	800366c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800365c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ffb8 	bl	80035dc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800366c:	bf00      	nop
 800366e:	3708      	adds	r7, #8
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003686:	b292      	uxth	r2, r2
 8003688:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368e:	1c9a      	adds	r2, r3, #2
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003698:	b29b      	uxth	r3, r3
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d10e      	bne.n	80036ca <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036ba:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7ff ff93 	bl	80035f0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b086      	sub	sp, #24
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d13a      	bne.n	8003764 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d109      	bne.n	800370c <I2S_IRQHandler+0x3a>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003702:	2b40      	cmp	r3, #64	; 0x40
 8003704:	d102      	bne.n	800370c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff ffb4 	bl	8003674 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003712:	2b40      	cmp	r3, #64	; 0x40
 8003714:	d126      	bne.n	8003764 <I2S_IRQHandler+0x92>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b20      	cmp	r3, #32
 8003722:	d11f      	bne.n	8003764 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003732:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003734:	2300      	movs	r3, #0
 8003736:	613b      	str	r3, [r7, #16]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	613b      	str	r3, [r7, #16]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	613b      	str	r3, [r7, #16]
 8003748:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f043 0202 	orr.w	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff ff50 	bl	8003604 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b03      	cmp	r3, #3
 800376e:	d136      	bne.n	80037de <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b02      	cmp	r3, #2
 8003778:	d109      	bne.n	800378e <I2S_IRQHandler+0xbc>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003784:	2b80      	cmp	r3, #128	; 0x80
 8003786:	d102      	bne.n	800378e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ff45 	bl	8003618 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	f003 0308 	and.w	r3, r3, #8
 8003794:	2b08      	cmp	r3, #8
 8003796:	d122      	bne.n	80037de <I2S_IRQHandler+0x10c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b20      	cmp	r3, #32
 80037a4:	d11b      	bne.n	80037de <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80037b6:	2300      	movs	r3, #0
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff13 	bl	8003604 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037de:	bf00      	nop
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4aa2      	ldr	r2, [pc, #648]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d101      	bne.n	8003806 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003802:	4ba2      	ldr	r3, [pc, #648]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003804:	e001      	b.n	800380a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a9b      	ldr	r2, [pc, #620]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d101      	bne.n	8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003820:	4b9a      	ldr	r3, [pc, #616]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003822:	e001      	b.n	8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003824:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003834:	d004      	beq.n	8003840 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f040 8099 	bne.w	8003972 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b02      	cmp	r3, #2
 8003848:	d107      	bne.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f925 	bl	8003aa4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d107      	bne.n	8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f9c8 	bl	8003c04 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800387a:	2b40      	cmp	r3, #64	; 0x40
 800387c:	d13a      	bne.n	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d035      	beq.n	80038f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a7e      	ldr	r2, [pc, #504]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d101      	bne.n	8003896 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003892:	4b7e      	ldr	r3, [pc, #504]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003894:	e001      	b.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4979      	ldr	r1, [pc, #484]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80038a2:	428b      	cmp	r3, r1
 80038a4:	d101      	bne.n	80038aa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80038a6:	4b79      	ldr	r3, [pc, #484]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80038a8:	e001      	b.n	80038ae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80038aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038b2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f043 0202 	orr.w	r2, r3, #2
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff fe88 	bl	8003604 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f003 0308 	and.w	r3, r3, #8
 80038fa:	2b08      	cmp	r3, #8
 80038fc:	f040 80be 	bne.w	8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80b8 	beq.w	8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800391a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a59      	ldr	r2, [pc, #356]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003926:	4b59      	ldr	r3, [pc, #356]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003928:	e001      	b.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800392a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4954      	ldr	r1, [pc, #336]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003936:	428b      	cmp	r3, r1
 8003938:	d101      	bne.n	800393e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800393a:	4b54      	ldr	r3, [pc, #336]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800393c:	e001      	b.n	8003942 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800393e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003942:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003946:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003948:	2300      	movs	r3, #0
 800394a:	60bb      	str	r3, [r7, #8]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003962:	f043 0204 	orr.w	r2, r3, #4
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f7ff fe4a 	bl	8003604 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003970:	e084      	b.n	8003a7c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	2b02      	cmp	r3, #2
 800397a:	d107      	bne.n	800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f8be 	bl	8003b08 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b01      	cmp	r3, #1
 8003994:	d107      	bne.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f8fd 	bl	8003ba0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ac:	2b40      	cmp	r3, #64	; 0x40
 80039ae:	d12f      	bne.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f003 0320 	and.w	r3, r3, #32
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d02a      	beq.n	8003a10 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039c8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2e      	ldr	r2, [pc, #184]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80039d4:	4b2d      	ldr	r3, [pc, #180]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039d6:	e001      	b.n	80039dc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80039d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4929      	ldr	r1, [pc, #164]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80039e4:	428b      	cmp	r3, r1
 80039e6:	d101      	bne.n	80039ec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80039e8:	4b28      	ldr	r3, [pc, #160]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80039ea:	e001      	b.n	80039f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80039ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039f0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039f4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a02:	f043 0202 	orr.w	r2, r3, #2
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff fdfa 	bl	8003604 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d131      	bne.n	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d02c      	beq.n	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a17      	ldr	r2, [pc, #92]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d101      	bne.n	8003a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003a2e:	4b17      	ldr	r3, [pc, #92]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a30:	e001      	b.n	8003a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003a32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4912      	ldr	r1, [pc, #72]	; (8003a88 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003a3e:	428b      	cmp	r3, r1
 8003a40:	d101      	bne.n	8003a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003a42:	4b12      	ldr	r3, [pc, #72]	; (8003a8c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003a44:	e001      	b.n	8003a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003a46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a4a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a4e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	685a      	ldr	r2, [r3, #4]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a5e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6c:	f043 0204 	orr.w	r2, r3, #4
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f7ff fdc5 	bl	8003604 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a7a:	e000      	b.n	8003a7e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a7c:	bf00      	nop
}
 8003a7e:	bf00      	nop
 8003a80:	3720      	adds	r7, #32
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40003800 	.word	0x40003800
 8003a8c:	40003400 	.word	0x40003400

08003a90 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab0:	1c99      	adds	r1, r3, #2
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	6251      	str	r1, [r2, #36]	; 0x24
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d113      	bne.n	8003afe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ae4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d106      	bne.n	8003afe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f7ff ffc9 	bl	8003a90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
	...

08003b08 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	1c99      	adds	r1, r3, #2
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	6251      	str	r1, [r2, #36]	; 0x24
 8003b1a:	8819      	ldrh	r1, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <I2SEx_TxISR_I2SExt+0x90>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d101      	bne.n	8003b2a <I2SEx_TxISR_I2SExt+0x22>
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <I2SEx_TxISR_I2SExt+0x94>)
 8003b28:	e001      	b.n	8003b2e <I2SEx_TxISR_I2SExt+0x26>
 8003b2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b2e:	460a      	mov	r2, r1
 8003b30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d121      	bne.n	8003b8e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <I2SEx_TxISR_I2SExt+0x90>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d101      	bne.n	8003b58 <I2SEx_TxISR_I2SExt+0x50>
 8003b54:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <I2SEx_TxISR_I2SExt+0x94>)
 8003b56:	e001      	b.n	8003b5c <I2SEx_TxISR_I2SExt+0x54>
 8003b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	490d      	ldr	r1, [pc, #52]	; (8003b98 <I2SEx_TxISR_I2SExt+0x90>)
 8003b64:	428b      	cmp	r3, r1
 8003b66:	d101      	bne.n	8003b6c <I2SEx_TxISR_I2SExt+0x64>
 8003b68:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <I2SEx_TxISR_I2SExt+0x94>)
 8003b6a:	e001      	b.n	8003b70 <I2SEx_TxISR_I2SExt+0x68>
 8003b6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b74:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d106      	bne.n	8003b8e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f7ff ff81 	bl	8003a90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b8e:	bf00      	nop
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40003800 	.word	0x40003800
 8003b9c:	40003400 	.word	0x40003400

08003ba0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68d8      	ldr	r0, [r3, #12]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	1c99      	adds	r1, r3, #2
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003bb8:	b282      	uxth	r2, r0
 8003bba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d113      	bne.n	8003bfc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003be2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7ff ff4a 	bl	8003a90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a20      	ldr	r2, [pc, #128]	; (8003c94 <I2SEx_RxISR_I2SExt+0x90>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d101      	bne.n	8003c1a <I2SEx_RxISR_I2SExt+0x16>
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <I2SEx_RxISR_I2SExt+0x94>)
 8003c18:	e001      	b.n	8003c1e <I2SEx_RxISR_I2SExt+0x1a>
 8003c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c1e:	68d8      	ldr	r0, [r3, #12]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c24:	1c99      	adds	r1, r3, #2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003c2a:	b282      	uxth	r2, r0
 8003c2c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d121      	bne.n	8003c8a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <I2SEx_RxISR_I2SExt+0x90>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d101      	bne.n	8003c54 <I2SEx_RxISR_I2SExt+0x50>
 8003c50:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <I2SEx_RxISR_I2SExt+0x94>)
 8003c52:	e001      	b.n	8003c58 <I2SEx_RxISR_I2SExt+0x54>
 8003c54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	490d      	ldr	r1, [pc, #52]	; (8003c94 <I2SEx_RxISR_I2SExt+0x90>)
 8003c60:	428b      	cmp	r3, r1
 8003c62:	d101      	bne.n	8003c68 <I2SEx_RxISR_I2SExt+0x64>
 8003c64:	4b0c      	ldr	r3, [pc, #48]	; (8003c98 <I2SEx_RxISR_I2SExt+0x94>)
 8003c66:	e001      	b.n	8003c6c <I2SEx_RxISR_I2SExt+0x68>
 8003c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c6c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c70:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d106      	bne.n	8003c8a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff ff03 	bl	8003a90 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	40003800 	.word	0x40003800
 8003c98:	40003400 	.word	0x40003400

08003c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e264      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d075      	beq.n	8003da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cba:	4ba3      	ldr	r3, [pc, #652]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d00c      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc6:	4ba0      	ldr	r3, [pc, #640]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d112      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cd2:	4b9d      	ldr	r3, [pc, #628]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003cde:	d10b      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	4b99      	ldr	r3, [pc, #612]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d05b      	beq.n	8003da4 <HAL_RCC_OscConfig+0x108>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d157      	bne.n	8003da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e23f      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d00:	d106      	bne.n	8003d10 <HAL_RCC_OscConfig+0x74>
 8003d02:	4b91      	ldr	r3, [pc, #580]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a90      	ldr	r2, [pc, #576]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0c:	6013      	str	r3, [r2, #0]
 8003d0e:	e01d      	b.n	8003d4c <HAL_RCC_OscConfig+0xb0>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d18:	d10c      	bne.n	8003d34 <HAL_RCC_OscConfig+0x98>
 8003d1a:	4b8b      	ldr	r3, [pc, #556]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a8a      	ldr	r2, [pc, #552]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	4b88      	ldr	r3, [pc, #544]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a87      	ldr	r2, [pc, #540]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d30:	6013      	str	r3, [r2, #0]
 8003d32:	e00b      	b.n	8003d4c <HAL_RCC_OscConfig+0xb0>
 8003d34:	4b84      	ldr	r3, [pc, #528]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a83      	ldr	r2, [pc, #524]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b81      	ldr	r3, [pc, #516]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a80      	ldr	r2, [pc, #512]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d013      	beq.n	8003d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d54:	f7fd f948 	bl	8000fe8 <HAL_GetTick>
 8003d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d5a:	e008      	b.n	8003d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d5c:	f7fd f944 	bl	8000fe8 <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	2b64      	cmp	r3, #100	; 0x64
 8003d68:	d901      	bls.n	8003d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d6a:	2303      	movs	r3, #3
 8003d6c:	e204      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d6e:	4b76      	ldr	r3, [pc, #472]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0f0      	beq.n	8003d5c <HAL_RCC_OscConfig+0xc0>
 8003d7a:	e014      	b.n	8003da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fd f934 	bl	8000fe8 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fd f930 	bl	8000fe8 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e1f0      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d96:	4b6c      	ldr	r3, [pc, #432]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_OscConfig+0xe8>
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d063      	beq.n	8003e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003db2:	4b65      	ldr	r3, [pc, #404]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00b      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dbe:	4b62      	ldr	r3, [pc, #392]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dc6:	2b08      	cmp	r3, #8
 8003dc8:	d11c      	bne.n	8003e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dca:	4b5f      	ldr	r3, [pc, #380]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d116      	bne.n	8003e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dd6:	4b5c      	ldr	r3, [pc, #368]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <HAL_RCC_OscConfig+0x152>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e1c4      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dee:	4b56      	ldr	r3, [pc, #344]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	4952      	ldr	r1, [pc, #328]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e02:	e03a      	b.n	8003e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d020      	beq.n	8003e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e0c:	4b4f      	ldr	r3, [pc, #316]	; (8003f4c <HAL_RCC_OscConfig+0x2b0>)
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e12:	f7fd f8e9 	bl	8000fe8 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e18:	e008      	b.n	8003e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e1a:	f7fd f8e5 	bl	8000fe8 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d901      	bls.n	8003e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e1a5      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e2c:	4b46      	ldr	r3, [pc, #280]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0302 	and.w	r3, r3, #2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d0f0      	beq.n	8003e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e38:	4b43      	ldr	r3, [pc, #268]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	00db      	lsls	r3, r3, #3
 8003e46:	4940      	ldr	r1, [pc, #256]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	600b      	str	r3, [r1, #0]
 8003e4c:	e015      	b.n	8003e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e4e:	4b3f      	ldr	r3, [pc, #252]	; (8003f4c <HAL_RCC_OscConfig+0x2b0>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fd f8c8 	bl	8000fe8 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e5c:	f7fd f8c4 	bl	8000fe8 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e184      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e6e:	4b36      	ldr	r3, [pc, #216]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d030      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d016      	beq.n	8003ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e8e:	4b30      	ldr	r3, [pc, #192]	; (8003f50 <HAL_RCC_OscConfig+0x2b4>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e94:	f7fd f8a8 	bl	8000fe8 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e9c:	f7fd f8a4 	bl	8000fe8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e164      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eae:	4b26      	ldr	r3, [pc, #152]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x200>
 8003eba:	e015      	b.n	8003ee8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ebc:	4b24      	ldr	r3, [pc, #144]	; (8003f50 <HAL_RCC_OscConfig+0x2b4>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec2:	f7fd f891 	bl	8000fe8 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eca:	f7fd f88d 	bl	8000fe8 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e14d      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b1a      	ldr	r3, [pc, #104]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80a0 	beq.w	8004036 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10f      	bne.n	8003f26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f06:	2300      	movs	r3, #0
 8003f08:	60bb      	str	r3, [r7, #8]
 8003f0a:	4b0f      	ldr	r3, [pc, #60]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f14:	6413      	str	r3, [r2, #64]	; 0x40
 8003f16:	4b0c      	ldr	r3, [pc, #48]	; (8003f48 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1e:	60bb      	str	r3, [r7, #8]
 8003f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f26:	4b0b      	ldr	r3, [pc, #44]	; (8003f54 <HAL_RCC_OscConfig+0x2b8>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d121      	bne.n	8003f76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f32:	4b08      	ldr	r3, [pc, #32]	; (8003f54 <HAL_RCC_OscConfig+0x2b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a07      	ldr	r2, [pc, #28]	; (8003f54 <HAL_RCC_OscConfig+0x2b8>)
 8003f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f3e:	f7fd f853 	bl	8000fe8 <HAL_GetTick>
 8003f42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	e011      	b.n	8003f6a <HAL_RCC_OscConfig+0x2ce>
 8003f46:	bf00      	nop
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	42470000 	.word	0x42470000
 8003f50:	42470e80 	.word	0x42470e80
 8003f54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f58:	f7fd f846 	bl	8000fe8 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e106      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	4b85      	ldr	r3, [pc, #532]	; (8004180 <HAL_RCC_OscConfig+0x4e4>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d106      	bne.n	8003f8c <HAL_RCC_OscConfig+0x2f0>
 8003f7e:	4b81      	ldr	r3, [pc, #516]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a80      	ldr	r2, [pc, #512]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003f84:	f043 0301 	orr.w	r3, r3, #1
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
 8003f8a:	e01c      	b.n	8003fc6 <HAL_RCC_OscConfig+0x32a>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	689b      	ldr	r3, [r3, #8]
 8003f90:	2b05      	cmp	r3, #5
 8003f92:	d10c      	bne.n	8003fae <HAL_RCC_OscConfig+0x312>
 8003f94:	4b7b      	ldr	r3, [pc, #492]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f98:	4a7a      	ldr	r2, [pc, #488]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003f9a:	f043 0304 	orr.w	r3, r3, #4
 8003f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa0:	4b78      	ldr	r3, [pc, #480]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a77      	ldr	r2, [pc, #476]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
 8003fac:	e00b      	b.n	8003fc6 <HAL_RCC_OscConfig+0x32a>
 8003fae:	4b75      	ldr	r3, [pc, #468]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb2:	4a74      	ldr	r2, [pc, #464]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fba:	4b72      	ldr	r3, [pc, #456]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	4a71      	ldr	r2, [pc, #452]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003fc0:	f023 0304 	bic.w	r3, r3, #4
 8003fc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d015      	beq.n	8003ffa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fce:	f7fd f80b 	bl	8000fe8 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fd f807 	bl	8000fe8 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e0c5      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fec:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ee      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x33a>
 8003ff8:	e014      	b.n	8004024 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7fc fff5 	bl	8000fe8 <HAL_GetTick>
 8003ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004000:	e00a      	b.n	8004018 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004002:	f7fc fff1 	bl	8000fe8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004010:	4293      	cmp	r3, r2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e0af      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004018:	4b5a      	ldr	r3, [pc, #360]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 800401a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d1ee      	bne.n	8004002 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004024:	7dfb      	ldrb	r3, [r7, #23]
 8004026:	2b01      	cmp	r3, #1
 8004028:	d105      	bne.n	8004036 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800402a:	4b56      	ldr	r3, [pc, #344]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	4a55      	ldr	r2, [pc, #340]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004034:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 809b 	beq.w	8004176 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004040:	4b50      	ldr	r3, [pc, #320]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f003 030c 	and.w	r3, r3, #12
 8004048:	2b08      	cmp	r3, #8
 800404a:	d05c      	beq.n	8004106 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	2b02      	cmp	r3, #2
 8004052:	d141      	bne.n	80040d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004054:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <HAL_RCC_OscConfig+0x4ec>)
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800405a:	f7fc ffc5 	bl	8000fe8 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004060:	e008      	b.n	8004074 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004062:	f7fc ffc1 	bl	8000fe8 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e081      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004074:	4b43      	ldr	r3, [pc, #268]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1f0      	bne.n	8004062 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69da      	ldr	r2, [r3, #28]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a1b      	ldr	r3, [r3, #32]
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	019b      	lsls	r3, r3, #6
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004096:	085b      	lsrs	r3, r3, #1
 8004098:	3b01      	subs	r3, #1
 800409a:	041b      	lsls	r3, r3, #16
 800409c:	431a      	orrs	r2, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	061b      	lsls	r3, r3, #24
 80040a4:	4937      	ldr	r1, [pc, #220]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040aa:	4b37      	ldr	r3, [pc, #220]	; (8004188 <HAL_RCC_OscConfig+0x4ec>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fc ff9a 	bl	8000fe8 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040b8:	f7fc ff96 	bl	8000fe8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e056      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ca:	4b2e      	ldr	r3, [pc, #184]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x41c>
 80040d6:	e04e      	b.n	8004176 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040d8:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_RCC_OscConfig+0x4ec>)
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040de:	f7fc ff83 	bl	8000fe8 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e6:	f7fc ff7f 	bl	8000fe8 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e03f      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f8:	4b22      	ldr	r3, [pc, #136]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f0      	bne.n	80040e6 <HAL_RCC_OscConfig+0x44a>
 8004104:	e037      	b.n	8004176 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d101      	bne.n	8004112 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e032      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <HAL_RCC_OscConfig+0x4e8>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d028      	beq.n	8004172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800412a:	429a      	cmp	r2, r3
 800412c:	d121      	bne.n	8004172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004138:	429a      	cmp	r2, r3
 800413a:	d11a      	bne.n	8004172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004142:	4013      	ands	r3, r2
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004148:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800414a:	4293      	cmp	r3, r2
 800414c:	d111      	bne.n	8004172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	3b01      	subs	r3, #1
 800415c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800415e:	429a      	cmp	r2, r3
 8004160:	d107      	bne.n	8004172 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800416e:	429a      	cmp	r2, r3
 8004170:	d001      	beq.n	8004176 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004176:	2300      	movs	r3, #0
}
 8004178:	4618      	mov	r0, r3
 800417a:	3718      	adds	r7, #24
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	40007000 	.word	0x40007000
 8004184:	40023800 	.word	0x40023800
 8004188:	42470060 	.word	0x42470060

0800418c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d101      	bne.n	80041a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e0cc      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041a0:	4b68      	ldr	r3, [pc, #416]	; (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d90c      	bls.n	80041c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b65      	ldr	r3, [pc, #404]	; (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b63      	ldr	r3, [pc, #396]	; (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0b8      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d020      	beq.n	8004216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041e0:	4b59      	ldr	r3, [pc, #356]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	4a58      	ldr	r2, [pc, #352]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d005      	beq.n	8004204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041f8:	4b53      	ldr	r3, [pc, #332]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	4a52      	ldr	r2, [pc, #328]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80041fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004204:	4b50      	ldr	r3, [pc, #320]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	494d      	ldr	r1, [pc, #308]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004212:	4313      	orrs	r3, r2
 8004214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0301 	and.w	r3, r3, #1
 800421e:	2b00      	cmp	r3, #0
 8004220:	d044      	beq.n	80042ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	4b47      	ldr	r3, [pc, #284]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d119      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e07f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2b02      	cmp	r3, #2
 8004240:	d003      	beq.n	800424a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004246:	2b03      	cmp	r3, #3
 8004248:	d107      	bne.n	800425a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800424a:	4b3f      	ldr	r3, [pc, #252]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d109      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e06f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800425a:	4b3b      	ldr	r3, [pc, #236]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0302 	and.w	r3, r3, #2
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e067      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800426a:	4b37      	ldr	r3, [pc, #220]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f023 0203 	bic.w	r2, r3, #3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	4934      	ldr	r1, [pc, #208]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800427c:	f7fc feb4 	bl	8000fe8 <HAL_GetTick>
 8004280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004282:	e00a      	b.n	800429a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004284:	f7fc feb0 	bl	8000fe8 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e04f      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800429a:	4b2b      	ldr	r3, [pc, #172]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 020c 	and.w	r2, r3, #12
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d1eb      	bne.n	8004284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ac:	4b25      	ldr	r3, [pc, #148]	; (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f003 0307 	and.w	r3, r3, #7
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d20c      	bcs.n	80042d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ba:	4b22      	ldr	r3, [pc, #136]	; (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c2:	4b20      	ldr	r3, [pc, #128]	; (8004344 <HAL_RCC_ClockConfig+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	683a      	ldr	r2, [r7, #0]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d001      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e032      	b.n	800433a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042e0:	4b19      	ldr	r3, [pc, #100]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	4916      	ldr	r1, [pc, #88]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d009      	beq.n	8004312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042fe:	4b12      	ldr	r3, [pc, #72]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	490e      	ldr	r1, [pc, #56]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800430e:	4313      	orrs	r3, r2
 8004310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004312:	f000 f821 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004316:	4602      	mov	r2, r0
 8004318:	4b0b      	ldr	r3, [pc, #44]	; (8004348 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	490a      	ldr	r1, [pc, #40]	; (800434c <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	5ccb      	ldrb	r3, [r1, r3]
 8004326:	fa22 f303 	lsr.w	r3, r2, r3
 800432a:	4a09      	ldr	r2, [pc, #36]	; (8004350 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800432e:	4b09      	ldr	r3, [pc, #36]	; (8004354 <HAL_RCC_ClockConfig+0x1c8>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7fc fe14 	bl	8000f60 <HAL_InitTick>

  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40023c00 	.word	0x40023c00
 8004348:	40023800 	.word	0x40023800
 800434c:	08008e68 	.word	0x08008e68
 8004350:	20000000 	.word	0x20000000
 8004354:	20000004 	.word	0x20000004

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004360:	2300      	movs	r3, #0
 8004362:	607b      	str	r3, [r7, #4]
 8004364:	2300      	movs	r3, #0
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	2300      	movs	r3, #0
 800436a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004370:	4b67      	ldr	r3, [pc, #412]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	f003 030c 	and.w	r3, r3, #12
 8004378:	2b08      	cmp	r3, #8
 800437a:	d00d      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x40>
 800437c:	2b08      	cmp	r3, #8
 800437e:	f200 80bd 	bhi.w	80044fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x34>
 8004386:	2b04      	cmp	r3, #4
 8004388:	d003      	beq.n	8004392 <HAL_RCC_GetSysClockFreq+0x3a>
 800438a:	e0b7      	b.n	80044fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800438c:	4b61      	ldr	r3, [pc, #388]	; (8004514 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800438e:	60bb      	str	r3, [r7, #8]
       break;
 8004390:	e0b7      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004392:	4b61      	ldr	r3, [pc, #388]	; (8004518 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004394:	60bb      	str	r3, [r7, #8]
      break;
 8004396:	e0b4      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004398:	4b5d      	ldr	r3, [pc, #372]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043a2:	4b5b      	ldr	r3, [pc, #364]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d04d      	beq.n	800444a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ae:	4b58      	ldr	r3, [pc, #352]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	099b      	lsrs	r3, r3, #6
 80043b4:	461a      	mov	r2, r3
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043be:	f04f 0100 	mov.w	r1, #0
 80043c2:	ea02 0800 	and.w	r8, r2, r0
 80043c6:	ea03 0901 	and.w	r9, r3, r1
 80043ca:	4640      	mov	r0, r8
 80043cc:	4649      	mov	r1, r9
 80043ce:	f04f 0200 	mov.w	r2, #0
 80043d2:	f04f 0300 	mov.w	r3, #0
 80043d6:	014b      	lsls	r3, r1, #5
 80043d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043dc:	0142      	lsls	r2, r0, #5
 80043de:	4610      	mov	r0, r2
 80043e0:	4619      	mov	r1, r3
 80043e2:	ebb0 0008 	subs.w	r0, r0, r8
 80043e6:	eb61 0109 	sbc.w	r1, r1, r9
 80043ea:	f04f 0200 	mov.w	r2, #0
 80043ee:	f04f 0300 	mov.w	r3, #0
 80043f2:	018b      	lsls	r3, r1, #6
 80043f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043f8:	0182      	lsls	r2, r0, #6
 80043fa:	1a12      	subs	r2, r2, r0
 80043fc:	eb63 0301 	sbc.w	r3, r3, r1
 8004400:	f04f 0000 	mov.w	r0, #0
 8004404:	f04f 0100 	mov.w	r1, #0
 8004408:	00d9      	lsls	r1, r3, #3
 800440a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800440e:	00d0      	lsls	r0, r2, #3
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	eb12 0208 	adds.w	r2, r2, r8
 8004418:	eb43 0309 	adc.w	r3, r3, r9
 800441c:	f04f 0000 	mov.w	r0, #0
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	0259      	lsls	r1, r3, #9
 8004426:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800442a:	0250      	lsls	r0, r2, #9
 800442c:	4602      	mov	r2, r0
 800442e:	460b      	mov	r3, r1
 8004430:	4610      	mov	r0, r2
 8004432:	4619      	mov	r1, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	461a      	mov	r2, r3
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	f7fb fec4 	bl	80001c8 <__aeabi_uldivmod>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4613      	mov	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e04a      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800444a:	4b31      	ldr	r3, [pc, #196]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	099b      	lsrs	r3, r3, #6
 8004450:	461a      	mov	r2, r3
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	f240 10ff 	movw	r0, #511	; 0x1ff
 800445a:	f04f 0100 	mov.w	r1, #0
 800445e:	ea02 0400 	and.w	r4, r2, r0
 8004462:	ea03 0501 	and.w	r5, r3, r1
 8004466:	4620      	mov	r0, r4
 8004468:	4629      	mov	r1, r5
 800446a:	f04f 0200 	mov.w	r2, #0
 800446e:	f04f 0300 	mov.w	r3, #0
 8004472:	014b      	lsls	r3, r1, #5
 8004474:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004478:	0142      	lsls	r2, r0, #5
 800447a:	4610      	mov	r0, r2
 800447c:	4619      	mov	r1, r3
 800447e:	1b00      	subs	r0, r0, r4
 8004480:	eb61 0105 	sbc.w	r1, r1, r5
 8004484:	f04f 0200 	mov.w	r2, #0
 8004488:	f04f 0300 	mov.w	r3, #0
 800448c:	018b      	lsls	r3, r1, #6
 800448e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004492:	0182      	lsls	r2, r0, #6
 8004494:	1a12      	subs	r2, r2, r0
 8004496:	eb63 0301 	sbc.w	r3, r3, r1
 800449a:	f04f 0000 	mov.w	r0, #0
 800449e:	f04f 0100 	mov.w	r1, #0
 80044a2:	00d9      	lsls	r1, r3, #3
 80044a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044a8:	00d0      	lsls	r0, r2, #3
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	1912      	adds	r2, r2, r4
 80044b0:	eb45 0303 	adc.w	r3, r5, r3
 80044b4:	f04f 0000 	mov.w	r0, #0
 80044b8:	f04f 0100 	mov.w	r1, #0
 80044bc:	0299      	lsls	r1, r3, #10
 80044be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044c2:	0290      	lsls	r0, r2, #10
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4610      	mov	r0, r2
 80044ca:	4619      	mov	r1, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	461a      	mov	r2, r3
 80044d0:	f04f 0300 	mov.w	r3, #0
 80044d4:	f7fb fe78 	bl	80001c8 <__aeabi_uldivmod>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4613      	mov	r3, r2
 80044de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044e0:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	0c1b      	lsrs	r3, r3, #16
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	3301      	adds	r3, #1
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f8:	60bb      	str	r3, [r7, #8]
      break;
 80044fa:	e002      	b.n	8004502 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b05      	ldr	r3, [pc, #20]	; (8004514 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80044fe:	60bb      	str	r3, [r7, #8]
      break;
 8004500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004502:	68bb      	ldr	r3, [r7, #8]
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800450e:	bf00      	nop
 8004510:	40023800 	.word	0x40023800
 8004514:	00f42400 	.word	0x00f42400
 8004518:	007a1200 	.word	0x007a1200

0800451c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <HAL_RCC_GetHCLKFreq+0x14>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	20000000 	.word	0x20000000

08004534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004538:	f7ff fff0 	bl	800451c <HAL_RCC_GetHCLKFreq>
 800453c:	4602      	mov	r2, r0
 800453e:	4b05      	ldr	r3, [pc, #20]	; (8004554 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	0a9b      	lsrs	r3, r3, #10
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	4903      	ldr	r1, [pc, #12]	; (8004558 <HAL_RCC_GetPCLK1Freq+0x24>)
 800454a:	5ccb      	ldrb	r3, [r1, r3]
 800454c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004550:	4618      	mov	r0, r3
 8004552:	bd80      	pop	{r7, pc}
 8004554:	40023800 	.word	0x40023800
 8004558:	08008e78 	.word	0x08008e78

0800455c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004564:	2300      	movs	r3, #0
 8004566:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004568:	2300      	movs	r3, #0
 800456a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d105      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004580:	2b00      	cmp	r3, #0
 8004582:	d035      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004584:	4b62      	ldr	r3, [pc, #392]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800458a:	f7fc fd2d 	bl	8000fe8 <HAL_GetTick>
 800458e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004592:	f7fc fd29 	bl	8000fe8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e0b0      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045a4:	4b5b      	ldr	r3, [pc, #364]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	019a      	lsls	r2, r3, #6
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	071b      	lsls	r3, r3, #28
 80045bc:	4955      	ldr	r1, [pc, #340]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80045c4:	4b52      	ldr	r3, [pc, #328]	; (8004710 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045c6:	2201      	movs	r2, #1
 80045c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045ca:	f7fc fd0d 	bl	8000fe8 <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045d0:	e008      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80045d2:	f7fc fd09 	bl	8000fe8 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d901      	bls.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045e0:	2303      	movs	r3, #3
 80045e2:	e090      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80045e4:	4b4b      	ldr	r3, [pc, #300]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d0f0      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0302 	and.w	r3, r3, #2
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8083 	beq.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	4b44      	ldr	r3, [pc, #272]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	4a43      	ldr	r2, [pc, #268]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460c:	6413      	str	r3, [r2, #64]	; 0x40
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a3e      	ldr	r2, [pc, #248]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004624:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004626:	f7fc fcdf 	bl	8000fe8 <HAL_GetTick>
 800462a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800462c:	e008      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800462e:	f7fc fcdb 	bl	8000fe8 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e062      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004640:	4b35      	ldr	r3, [pc, #212]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800464c:	4b31      	ldr	r3, [pc, #196]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004654:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02f      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	429a      	cmp	r2, r3
 8004668:	d028      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800466a:	4b2a      	ldr	r3, [pc, #168]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004672:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004674:	4b29      	ldr	r3, [pc, #164]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004676:	2201      	movs	r2, #1
 8004678:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800467a:	4b28      	ldr	r3, [pc, #160]	; (800471c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004680:	4a24      	ldr	r2, [pc, #144]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004686:	4b23      	ldr	r3, [pc, #140]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b01      	cmp	r3, #1
 8004690:	d114      	bne.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004692:	f7fc fca9 	bl	8000fe8 <HAL_GetTick>
 8004696:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004698:	e00a      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800469a:	f7fc fca5 	bl	8000fe8 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d901      	bls.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	e02a      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b0:	4b18      	ldr	r3, [pc, #96]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d0ee      	beq.n	800469a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046c8:	d10d      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80046ca:	4b12      	ldr	r3, [pc, #72]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80046da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046de:	490d      	ldr	r1, [pc, #52]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	608b      	str	r3, [r1, #8]
 80046e4:	e005      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80046e6:	4b0b      	ldr	r3, [pc, #44]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	4a0a      	ldr	r2, [pc, #40]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046f0:	6093      	str	r3, [r2, #8]
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046fe:	4905      	ldr	r1, [pc, #20]	; (8004714 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004700:	4313      	orrs	r3, r2
 8004702:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	42470068 	.word	0x42470068
 8004714:	40023800 	.word	0x40023800
 8004718:	40007000 	.word	0x40007000
 800471c:	42470e40 	.word	0x42470e40

08004720 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d13e      	bne.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800473e:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d005      	beq.n	800475a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d12f      	bne.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004754:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004756:	617b      	str	r3, [r7, #20]
          break;
 8004758:	e02f      	b.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800475a:	4b1c      	ldr	r3, [pc, #112]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004766:	d108      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004768:	4b18      	ldr	r3, [pc, #96]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004770:	4a18      	ldr	r2, [pc, #96]	; (80047d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	613b      	str	r3, [r7, #16]
 8004778:	e007      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800477a:	4b14      	ldr	r3, [pc, #80]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004782:	4a15      	ldr	r2, [pc, #84]	; (80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004784:	fbb2 f3f3 	udiv	r3, r2, r3
 8004788:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800478c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004790:	099b      	lsrs	r3, r3, #6
 8004792:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	fb02 f303 	mul.w	r3, r2, r3
 800479c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80047a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a4:	0f1b      	lsrs	r3, r3, #28
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	617b      	str	r3, [r7, #20]
          break;
 80047b2:	e002      	b.n	80047ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	617b      	str	r3, [r7, #20]
          break;
 80047b8:	bf00      	nop
        }
      }
      break;
 80047ba:	bf00      	nop
    }
  }
  return frequency;
 80047bc:	697b      	ldr	r3, [r7, #20]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	40023800 	.word	0x40023800
 80047d0:	00bb8000 	.word	0x00bb8000
 80047d4:	007a1200 	.word	0x007a1200
 80047d8:	00f42400 	.word	0x00f42400

080047dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d101      	bne.n	80047ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e07b      	b.n	80048e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d108      	bne.n	8004808 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047fe:	d009      	beq.n	8004814 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	61da      	str	r2, [r3, #28]
 8004806:	e005      	b.n	8004814 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d106      	bne.n	8004834 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7fc f9e2 	bl	8000bf8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800484a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004866:	431a      	orrs	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	431a      	orrs	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	69db      	ldr	r3, [r3, #28]
 800488a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004898:	ea42 0103 	orr.w	r1, r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	430a      	orrs	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	699b      	ldr	r3, [r3, #24]
 80048b0:	0c1b      	lsrs	r3, r3, #16
 80048b2:	f003 0104 	and.w	r1, r3, #4
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f003 0210 	and.w	r2, r3, #16
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69da      	ldr	r2, [r3, #28]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b082      	sub	sp, #8
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d101      	bne.n	8004900 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e041      	b.n	8004984 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d106      	bne.n	800491a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7fc f9b7 	bl	8000c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2202      	movs	r2, #2
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	3304      	adds	r3, #4
 800492a:	4619      	mov	r1, r3
 800492c:	4610      	mov	r0, r2
 800492e:	f000 fc7b 	bl	8005228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800499a:	b2db      	uxtb	r3, r3
 800499c:	2b01      	cmp	r3, #1
 800499e:	d001      	beq.n	80049a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e04e      	b.n	8004a42 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f042 0201 	orr.w	r2, r2, #1
 80049ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a23      	ldr	r2, [pc, #140]	; (8004a50 <HAL_TIM_Base_Start_IT+0xc4>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d022      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ce:	d01d      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a1f      	ldr	r2, [pc, #124]	; (8004a54 <HAL_TIM_Base_Start_IT+0xc8>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d018      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a1e      	ldr	r2, [pc, #120]	; (8004a58 <HAL_TIM_Base_Start_IT+0xcc>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d013      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a1c      	ldr	r2, [pc, #112]	; (8004a5c <HAL_TIM_Base_Start_IT+0xd0>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00e      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1b      	ldr	r2, [pc, #108]	; (8004a60 <HAL_TIM_Base_Start_IT+0xd4>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d009      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a19      	ldr	r2, [pc, #100]	; (8004a64 <HAL_TIM_Base_Start_IT+0xd8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d004      	beq.n	8004a0c <HAL_TIM_Base_Start_IT+0x80>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d111      	bne.n	8004a30 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d010      	beq.n	8004a40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 0201 	orr.w	r2, r2, #1
 8004a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	e007      	b.n	8004a40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	40010000 	.word	0x40010000
 8004a54:	40000400 	.word	0x40000400
 8004a58:	40000800 	.word	0x40000800
 8004a5c:	40000c00 	.word	0x40000c00
 8004a60:	40010400 	.word	0x40010400
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40001800 	.word	0x40001800

08004a6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e041      	b.n	8004b02 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d106      	bne.n	8004a98 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f839 	bl	8004b0a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2202      	movs	r2, #2
 8004a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f000 fbbc 	bl	8005228 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3708      	adds	r7, #8
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b12:	bf00      	nop
 8004b14:	370c      	adds	r7, #12
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
	...

08004b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_TIM_PWM_Start+0x24>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	bf14      	ite	ne
 8004b3c:	2301      	movne	r3, #1
 8004b3e:	2300      	moveq	r3, #0
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	e022      	b.n	8004b8a <HAL_TIM_PWM_Start+0x6a>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	d109      	bne.n	8004b5e <HAL_TIM_PWM_Start+0x3e>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	bf14      	ite	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	2300      	moveq	r3, #0
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	e015      	b.n	8004b8a <HAL_TIM_PWM_Start+0x6a>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d109      	bne.n	8004b78 <HAL_TIM_PWM_Start+0x58>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	e008      	b.n	8004b8a <HAL_TIM_PWM_Start+0x6a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	bf14      	ite	ne
 8004b84:	2301      	movne	r3, #1
 8004b86:	2300      	moveq	r3, #0
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e07c      	b.n	8004c8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0x82>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ba0:	e013      	b.n	8004bca <HAL_TIM_PWM_Start+0xaa>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0x92>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bb0:	e00b      	b.n	8004bca <HAL_TIM_PWM_Start+0xaa>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xa2>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc0:	e003      	b.n	8004bca <HAL_TIM_PWM_Start+0xaa>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	6839      	ldr	r1, [r7, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 fe12 	bl	80057fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <HAL_TIM_PWM_Start+0x174>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d004      	beq.n	8004bec <HAL_TIM_PWM_Start+0xcc>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2c      	ldr	r2, [pc, #176]	; (8004c98 <HAL_TIM_PWM_Start+0x178>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d101      	bne.n	8004bf0 <HAL_TIM_PWM_Start+0xd0>
 8004bec:	2301      	movs	r3, #1
 8004bee:	e000      	b.n	8004bf2 <HAL_TIM_PWM_Start+0xd2>
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d007      	beq.n	8004c06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a22      	ldr	r2, [pc, #136]	; (8004c94 <HAL_TIM_PWM_Start+0x174>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d022      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c18:	d01d      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1f      	ldr	r2, [pc, #124]	; (8004c9c <HAL_TIM_PWM_Start+0x17c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d018      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1d      	ldr	r2, [pc, #116]	; (8004ca0 <HAL_TIM_PWM_Start+0x180>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d013      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <HAL_TIM_PWM_Start+0x184>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d00e      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a16      	ldr	r2, [pc, #88]	; (8004c98 <HAL_TIM_PWM_Start+0x178>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d009      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a18      	ldr	r2, [pc, #96]	; (8004ca8 <HAL_TIM_PWM_Start+0x188>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d004      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x136>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a16      	ldr	r2, [pc, #88]	; (8004cac <HAL_TIM_PWM_Start+0x18c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d111      	bne.n	8004c7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b06      	cmp	r3, #6
 8004c66:	d010      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0201 	orr.w	r2, r2, #1
 8004c76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c78:	e007      	b.n	8004c8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40000400 	.word	0x40000400
 8004ca0:	40000800 	.word	0x40000800
 8004ca4:	40000c00 	.word	0x40000c00
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40001800 	.word	0x40001800

08004cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d122      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d11b      	bne.n	8004d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f06f 0202 	mvn.w	r2, #2
 8004cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fa7a 	bl	80051ec <HAL_TIM_IC_CaptureCallback>
 8004cf8:	e005      	b.n	8004d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fa6c 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fa7d 	bl	8005200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f003 0304 	and.w	r3, r3, #4
 8004d16:	2b04      	cmp	r3, #4
 8004d18:	d122      	bne.n	8004d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d11b      	bne.n	8004d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f06f 0204 	mvn.w	r2, #4
 8004d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2202      	movs	r2, #2
 8004d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 fa50 	bl	80051ec <HAL_TIM_IC_CaptureCallback>
 8004d4c:	e005      	b.n	8004d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fa42 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f000 fa53 	bl	8005200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0308 	and.w	r3, r3, #8
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d122      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d11b      	bne.n	8004db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0208 	mvn.w	r2, #8
 8004d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2204      	movs	r2, #4
 8004d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fa26 	bl	80051ec <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 fa18 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fa29 	bl	8005200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	2b10      	cmp	r3, #16
 8004dc0:	d122      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f003 0310 	and.w	r3, r3, #16
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d11b      	bne.n	8004e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f06f 0210 	mvn.w	r2, #16
 8004dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2208      	movs	r2, #8
 8004dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69db      	ldr	r3, [r3, #28]
 8004de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9fc 	bl	80051ec <HAL_TIM_IC_CaptureCallback>
 8004df4:	e005      	b.n	8004e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f9ee 	bl	80051d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f9ff 	bl	8005200 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d10e      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d107      	bne.n	8004e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f06f 0201 	mvn.w	r2, #1
 8004e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f9c8 	bl	80051c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	691b      	ldr	r3, [r3, #16]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e3e:	2b80      	cmp	r3, #128	; 0x80
 8004e40:	d10e      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e4c:	2b80      	cmp	r3, #128	; 0x80
 8004e4e:	d107      	bne.n	8004e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 fd7a 	bl	8005954 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6a:	2b40      	cmp	r3, #64	; 0x40
 8004e6c:	d10e      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	d107      	bne.n	8004e8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f9c4 	bl	8005214 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	f003 0320 	and.w	r3, r3, #32
 8004e96:	2b20      	cmp	r3, #32
 8004e98:	d10e      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f003 0320 	and.w	r3, r3, #32
 8004ea4:	2b20      	cmp	r3, #32
 8004ea6:	d107      	bne.n	8004eb8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0220 	mvn.w	r2, #32
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fd44 	bl	8005940 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004eb8:	bf00      	nop
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e0ac      	b.n	8005034 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	f200 809f 	bhi.w	8005028 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f25 	.word	0x08004f25
 8004ef4:	08005029 	.word	0x08005029
 8004ef8:	08005029 	.word	0x08005029
 8004efc:	08005029 	.word	0x08005029
 8004f00:	08004f65 	.word	0x08004f65
 8004f04:	08005029 	.word	0x08005029
 8004f08:	08005029 	.word	0x08005029
 8004f0c:	08005029 	.word	0x08005029
 8004f10:	08004fa7 	.word	0x08004fa7
 8004f14:	08005029 	.word	0x08005029
 8004f18:	08005029 	.word	0x08005029
 8004f1c:	08005029 	.word	0x08005029
 8004f20:	08004fe7 	.word	0x08004fe7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f000 fa1c 	bl	8005368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699a      	ldr	r2, [r3, #24]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f042 0208 	orr.w	r2, r2, #8
 8004f3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f022 0204 	bic.w	r2, r2, #4
 8004f4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	6999      	ldr	r1, [r3, #24]
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	691a      	ldr	r2, [r3, #16]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	619a      	str	r2, [r3, #24]
      break;
 8004f62:	e062      	b.n	800502a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68b9      	ldr	r1, [r7, #8]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 fa6c 	bl	8005448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699a      	ldr	r2, [r3, #24]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	699a      	ldr	r2, [r3, #24]
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6999      	ldr	r1, [r3, #24]
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	021a      	lsls	r2, r3, #8
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	619a      	str	r2, [r3, #24]
      break;
 8004fa4:	e041      	b.n	800502a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68b9      	ldr	r1, [r7, #8]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fac1 	bl	8005534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	69da      	ldr	r2, [r3, #28]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f042 0208 	orr.w	r2, r2, #8
 8004fc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	69da      	ldr	r2, [r3, #28]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0204 	bic.w	r2, r2, #4
 8004fd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69d9      	ldr	r1, [r3, #28]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	430a      	orrs	r2, r1
 8004fe2:	61da      	str	r2, [r3, #28]
      break;
 8004fe4:	e021      	b.n	800502a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68b9      	ldr	r1, [r7, #8]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fb15 	bl	800561c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69da      	ldr	r2, [r3, #28]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69d9      	ldr	r1, [r3, #28]
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	021a      	lsls	r2, r3, #8
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	61da      	str	r2, [r3, #28]
      break;
 8005026:	e000      	b.n	800502a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIM_ConfigClockSource+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e0b3      	b.n	80051bc <HAL_TIM_ConfigClockSource+0x180>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005072:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800507a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800508c:	d03e      	beq.n	800510c <HAL_TIM_ConfigClockSource+0xd0>
 800508e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005092:	f200 8087 	bhi.w	80051a4 <HAL_TIM_ConfigClockSource+0x168>
 8005096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509a:	f000 8085 	beq.w	80051a8 <HAL_TIM_ConfigClockSource+0x16c>
 800509e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a2:	d87f      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x168>
 80050a4:	2b70      	cmp	r3, #112	; 0x70
 80050a6:	d01a      	beq.n	80050de <HAL_TIM_ConfigClockSource+0xa2>
 80050a8:	2b70      	cmp	r3, #112	; 0x70
 80050aa:	d87b      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x168>
 80050ac:	2b60      	cmp	r3, #96	; 0x60
 80050ae:	d050      	beq.n	8005152 <HAL_TIM_ConfigClockSource+0x116>
 80050b0:	2b60      	cmp	r3, #96	; 0x60
 80050b2:	d877      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x168>
 80050b4:	2b50      	cmp	r3, #80	; 0x50
 80050b6:	d03c      	beq.n	8005132 <HAL_TIM_ConfigClockSource+0xf6>
 80050b8:	2b50      	cmp	r3, #80	; 0x50
 80050ba:	d873      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x168>
 80050bc:	2b40      	cmp	r3, #64	; 0x40
 80050be:	d058      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x136>
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d86f      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x168>
 80050c4:	2b30      	cmp	r3, #48	; 0x30
 80050c6:	d064      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x156>
 80050c8:	2b30      	cmp	r3, #48	; 0x30
 80050ca:	d86b      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x168>
 80050cc:	2b20      	cmp	r3, #32
 80050ce:	d060      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x156>
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d867      	bhi.n	80051a4 <HAL_TIM_ConfigClockSource+0x168>
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d05c      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x156>
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d05a      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80050dc:	e062      	b.n	80051a4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	6899      	ldr	r1, [r3, #8]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f000 fb65 	bl	80057bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005100:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	609a      	str	r2, [r3, #8]
      break;
 800510a:	e04e      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	6899      	ldr	r1, [r3, #8]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	f000 fb4e 	bl	80057bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800512e:	609a      	str	r2, [r3, #8]
      break;
 8005130:	e03b      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	6859      	ldr	r1, [r3, #4]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	461a      	mov	r2, r3
 8005140:	f000 fac2 	bl	80056c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2150      	movs	r1, #80	; 0x50
 800514a:	4618      	mov	r0, r3
 800514c:	f000 fb1b 	bl	8005786 <TIM_ITRx_SetConfig>
      break;
 8005150:	e02b      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6818      	ldr	r0, [r3, #0]
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	6859      	ldr	r1, [r3, #4]
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	68db      	ldr	r3, [r3, #12]
 800515e:	461a      	mov	r2, r3
 8005160:	f000 fae1 	bl	8005726 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2160      	movs	r1, #96	; 0x60
 800516a:	4618      	mov	r0, r3
 800516c:	f000 fb0b 	bl	8005786 <TIM_ITRx_SetConfig>
      break;
 8005170:	e01b      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6859      	ldr	r1, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	461a      	mov	r2, r3
 8005180:	f000 faa2 	bl	80056c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2140      	movs	r1, #64	; 0x40
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fafb 	bl	8005786 <TIM_ITRx_SetConfig>
      break;
 8005190:	e00b      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681a      	ldr	r2, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4619      	mov	r1, r3
 800519c:	4610      	mov	r0, r2
 800519e:	f000 faf2 	bl	8005786 <TIM_ITRx_SetConfig>
        break;
 80051a2:	e002      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051a4:	bf00      	nop
 80051a6:	e000      	b.n	80051aa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80051a8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2201      	movs	r2, #1
 80051ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a40      	ldr	r2, [pc, #256]	; (800533c <TIM_Base_SetConfig+0x114>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d013      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005246:	d00f      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a3d      	ldr	r2, [pc, #244]	; (8005340 <TIM_Base_SetConfig+0x118>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d00b      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a3c      	ldr	r2, [pc, #240]	; (8005344 <TIM_Base_SetConfig+0x11c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d007      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a3b      	ldr	r2, [pc, #236]	; (8005348 <TIM_Base_SetConfig+0x120>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d003      	beq.n	8005268 <TIM_Base_SetConfig+0x40>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a3a      	ldr	r2, [pc, #232]	; (800534c <TIM_Base_SetConfig+0x124>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d108      	bne.n	800527a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2f      	ldr	r2, [pc, #188]	; (800533c <TIM_Base_SetConfig+0x114>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d02b      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005288:	d027      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a2c      	ldr	r2, [pc, #176]	; (8005340 <TIM_Base_SetConfig+0x118>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d023      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <TIM_Base_SetConfig+0x11c>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d01f      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <TIM_Base_SetConfig+0x120>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d01b      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a29      	ldr	r2, [pc, #164]	; (800534c <TIM_Base_SetConfig+0x124>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d017      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a28      	ldr	r2, [pc, #160]	; (8005350 <TIM_Base_SetConfig+0x128>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a27      	ldr	r2, [pc, #156]	; (8005354 <TIM_Base_SetConfig+0x12c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d00f      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a26      	ldr	r2, [pc, #152]	; (8005358 <TIM_Base_SetConfig+0x130>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00b      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a25      	ldr	r2, [pc, #148]	; (800535c <TIM_Base_SetConfig+0x134>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d007      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a24      	ldr	r2, [pc, #144]	; (8005360 <TIM_Base_SetConfig+0x138>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d003      	beq.n	80052da <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a23      	ldr	r2, [pc, #140]	; (8005364 <TIM_Base_SetConfig+0x13c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d108      	bne.n	80052ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a0a      	ldr	r2, [pc, #40]	; (800533c <TIM_Base_SetConfig+0x114>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0xf8>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a0c      	ldr	r2, [pc, #48]	; (800534c <TIM_Base_SetConfig+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d103      	bne.n	8005328 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	615a      	str	r2, [r3, #20]
}
 800532e:	bf00      	nop
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40010400 	.word	0x40010400
 8005350:	40014000 	.word	0x40014000
 8005354:	40014400 	.word	0x40014400
 8005358:	40014800 	.word	0x40014800
 800535c:	40001800 	.word	0x40001800
 8005360:	40001c00 	.word	0x40001c00
 8005364:	40002000 	.word	0x40002000

08005368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005368:	b480      	push	{r7}
 800536a:	b087      	sub	sp, #28
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a1b      	ldr	r3, [r3, #32]
 8005376:	f023 0201 	bic.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	f023 0303 	bic.w	r3, r3, #3
 800539e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f023 0302 	bic.w	r3, r3, #2
 80053b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a20      	ldr	r2, [pc, #128]	; (8005440 <TIM_OC1_SetConfig+0xd8>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_OC1_SetConfig+0x64>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <TIM_OC1_SetConfig+0xdc>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10c      	bne.n	80053e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f023 0308 	bic.w	r3, r3, #8
 80053d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	4313      	orrs	r3, r2
 80053dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a15      	ldr	r2, [pc, #84]	; (8005440 <TIM_OC1_SetConfig+0xd8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d003      	beq.n	80053f6 <TIM_OC1_SetConfig+0x8e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a14      	ldr	r2, [pc, #80]	; (8005444 <TIM_OC1_SetConfig+0xdc>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d111      	bne.n	800541a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	621a      	str	r2, [r3, #32]
}
 8005434:	bf00      	nop
 8005436:	371c      	adds	r7, #28
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	40010000 	.word	0x40010000
 8005444:	40010400 	.word	0x40010400

08005448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	f023 0210 	bic.w	r2, r3, #16
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800547e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	021b      	lsls	r3, r3, #8
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	4313      	orrs	r3, r2
 800548a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f023 0320 	bic.w	r3, r3, #32
 8005492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a22      	ldr	r2, [pc, #136]	; (800552c <TIM_OC2_SetConfig+0xe4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC2_SetConfig+0x68>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a21      	ldr	r2, [pc, #132]	; (8005530 <TIM_OC2_SetConfig+0xe8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10d      	bne.n	80054cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a17      	ldr	r2, [pc, #92]	; (800552c <TIM_OC2_SetConfig+0xe4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC2_SetConfig+0x94>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a16      	ldr	r2, [pc, #88]	; (8005530 <TIM_OC2_SetConfig+0xe8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d113      	bne.n	8005504 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	695b      	ldr	r3, [r3, #20]
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	4313      	orrs	r3, r2
 80054f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	621a      	str	r2, [r3, #32]
}
 800551e:	bf00      	nop
 8005520:	371c      	adds	r7, #28
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40010000 	.word	0x40010000
 8005530:	40010400 	.word	0x40010400

08005534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005534:	b480      	push	{r7}
 8005536:	b087      	sub	sp, #28
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	69db      	ldr	r3, [r3, #28]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f023 0303 	bic.w	r3, r3, #3
 800556a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800557c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	697a      	ldr	r2, [r7, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a21      	ldr	r2, [pc, #132]	; (8005614 <TIM_OC3_SetConfig+0xe0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_OC3_SetConfig+0x66>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a20      	ldr	r2, [pc, #128]	; (8005618 <TIM_OC3_SetConfig+0xe4>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d10d      	bne.n	80055b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	021b      	lsls	r3, r3, #8
 80055a8:	697a      	ldr	r2, [r7, #20]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a16      	ldr	r2, [pc, #88]	; (8005614 <TIM_OC3_SetConfig+0xe0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d003      	beq.n	80055c6 <TIM_OC3_SetConfig+0x92>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a15      	ldr	r2, [pc, #84]	; (8005618 <TIM_OC3_SetConfig+0xe4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d113      	bne.n	80055ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	4313      	orrs	r3, r2
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40010000 	.word	0x40010000
 8005618:	40010400 	.word	0x40010400

0800561c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	69db      	ldr	r3, [r3, #28]
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	021b      	lsls	r3, r3, #8
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	4313      	orrs	r3, r2
 800565e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	031b      	lsls	r3, r3, #12
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	4313      	orrs	r3, r2
 8005672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a12      	ldr	r2, [pc, #72]	; (80056c0 <TIM_OC4_SetConfig+0xa4>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC4_SetConfig+0x68>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a11      	ldr	r2, [pc, #68]	; (80056c4 <TIM_OC4_SetConfig+0xa8>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d109      	bne.n	8005698 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	019b      	lsls	r3, r3, #6
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40010400 	.word	0x40010400

080056c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b087      	sub	sp, #28
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	f023 0201 	bic.w	r2, r3, #1
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	699b      	ldr	r3, [r3, #24]
 80056ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	011b      	lsls	r3, r3, #4
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f023 030a 	bic.w	r3, r3, #10
 8005704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	621a      	str	r2, [r3, #32]
}
 800571a:	bf00      	nop
 800571c:	371c      	adds	r7, #28
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005726:	b480      	push	{r7}
 8005728:	b087      	sub	sp, #28
 800572a:	af00      	add	r7, sp, #0
 800572c:	60f8      	str	r0, [r7, #12]
 800572e:	60b9      	str	r1, [r7, #8]
 8005730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	f023 0210 	bic.w	r2, r3, #16
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	031b      	lsls	r3, r3, #12
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005762:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	621a      	str	r2, [r3, #32]
}
 800577a:	bf00      	nop
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005786:	b480      	push	{r7}
 8005788:	b085      	sub	sp, #20
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
 800578e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	f043 0307 	orr.w	r3, r3, #7
 80057a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	609a      	str	r2, [r3, #8]
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	021a      	lsls	r2, r3, #8
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	431a      	orrs	r2, r3
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	609a      	str	r2, [r3, #8]
}
 80057f0:	bf00      	nop
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f003 031f 	and.w	r3, r3, #31
 800580e:	2201      	movs	r2, #1
 8005810:	fa02 f303 	lsl.w	r3, r2, r3
 8005814:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	6a1a      	ldr	r2, [r3, #32]
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	43db      	mvns	r3, r3
 800581e:	401a      	ands	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6a1a      	ldr	r2, [r3, #32]
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	6879      	ldr	r1, [r7, #4]
 8005830:	fa01 f303 	lsl.w	r3, r1, r3
 8005834:	431a      	orrs	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	621a      	str	r2, [r3, #32]
}
 800583a:	bf00      	nop
 800583c:	371c      	adds	r7, #28
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
	...

08005848 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800585c:	2302      	movs	r3, #2
 800585e:	e05a      	b.n	8005916 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2202      	movs	r2, #2
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005886:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a21      	ldr	r2, [pc, #132]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d022      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ac:	d01d      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1d      	ldr	r2, [pc, #116]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d018      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a1b      	ldr	r2, [pc, #108]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d013      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a1a      	ldr	r2, [pc, #104]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d00e      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a18      	ldr	r2, [pc, #96]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d009      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a17      	ldr	r2, [pc, #92]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d004      	beq.n	80058ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a15      	ldr	r2, [pc, #84]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d10c      	bne.n	8005904 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	68ba      	ldr	r2, [r7, #8]
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	40010000 	.word	0x40010000
 8005928:	40000400 	.word	0x40000400
 800592c:	40000800 	.word	0x40000800
 8005930:	40000c00 	.word	0x40000c00
 8005934:	40010400 	.word	0x40010400
 8005938:	40014000 	.word	0x40014000
 800593c:	40001800 	.word	0x40001800

08005940 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005968:	b084      	sub	sp, #16
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
 8005972:	f107 001c 	add.w	r0, r7, #28
 8005976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	2b01      	cmp	r3, #1
 800597e:	d122      	bne.n	80059c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d105      	bne.n	80059ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f94a 	bl	8005c54 <USB_CoreReset>
 80059c0:	4603      	mov	r3, r0
 80059c2:	73fb      	strb	r3, [r7, #15]
 80059c4:	e01a      	b.n	80059fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f93e 	bl	8005c54 <USB_CoreReset>
 80059d8:	4603      	mov	r3, r0
 80059da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80059dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d106      	bne.n	80059f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	639a      	str	r2, [r3, #56]	; 0x38
 80059ee:	e005      	b.n	80059fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10b      	bne.n	8005a1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f043 0206 	orr.w	r2, r3, #6
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f043 0220 	orr.w	r2, r3, #32
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a26:	b004      	add	sp, #16
 8005a28:	4770      	bx	lr

08005a2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f043 0201 	orr.w	r2, r3, #1
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f023 0201 	bic.w	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr

08005a6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b082      	sub	sp, #8
 8005a72:	af00      	add	r7, sp, #0
 8005a74:	6078      	str	r0, [r7, #4]
 8005a76:	460b      	mov	r3, r1
 8005a78:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a86:	78fb      	ldrb	r3, [r7, #3]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d106      	bne.n	8005a9a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60da      	str	r2, [r3, #12]
 8005a98:	e00b      	b.n	8005ab2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d106      	bne.n	8005aae <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60da      	str	r2, [r3, #12]
 8005aac:	e001      	b.n	8005ab2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e003      	b.n	8005aba <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005ab2:	2032      	movs	r0, #50	; 0x32
 8005ab4:	f7fb faa4 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3708      	adds	r7, #8
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
	...

08005ac4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	019b      	lsls	r3, r3, #6
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	4a09      	ldr	r2, [pc, #36]	; (8005b0c <USB_FlushTxFifo+0x48>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d901      	bls.n	8005af0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e006      	b.n	8005afe <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b20      	cmp	r3, #32
 8005afa:	d0f0      	beq.n	8005ade <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	00030d40 	.word	0x00030d40

08005b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2210      	movs	r2, #16
 8005b20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	3301      	adds	r3, #1
 8005b26:	60fb      	str	r3, [r7, #12]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <USB_FlushRxFifo+0x40>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d901      	bls.n	8005b34 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e006      	b.n	8005b42 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d0f0      	beq.n	8005b22 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3714      	adds	r7, #20
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	00030d40 	.word	0x00030d40

08005b54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b089      	sub	sp, #36	; 0x24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	461a      	mov	r2, r3
 8005b62:	460b      	mov	r3, r1
 8005b64:	71fb      	strb	r3, [r7, #7]
 8005b66:	4613      	mov	r3, r2
 8005b68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005b72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11a      	bne.n	8005bb0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b7a:	88bb      	ldrh	r3, [r7, #4]
 8005b7c:	3303      	adds	r3, #3
 8005b7e:	089b      	lsrs	r3, r3, #2
 8005b80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b82:	2300      	movs	r3, #0
 8005b84:	61bb      	str	r3, [r7, #24]
 8005b86:	e00f      	b.n	8005ba8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	031a      	lsls	r2, r3, #12
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	4413      	add	r3, r2
 8005b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b94:	461a      	mov	r2, r3
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d3eb      	bcc.n	8005b88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3724      	adds	r7, #36	; 0x24
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b089      	sub	sp, #36	; 0x24
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	60f8      	str	r0, [r7, #12]
 8005bc6:	60b9      	str	r1, [r7, #8]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	3303      	adds	r3, #3
 8005bd8:	089b      	lsrs	r3, r3, #2
 8005bda:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005bdc:	2300      	movs	r3, #0
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e00b      	b.n	8005bfa <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	601a      	str	r2, [r3, #0]
    pDest++;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	69ba      	ldr	r2, [r7, #24]
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d3ef      	bcc.n	8005be2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005c02:	69fb      	ldr	r3, [r7, #28]
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3724      	adds	r7, #36	; 0x24
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	4013      	ands	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005c28:	68fb      	ldr	r3, [r7, #12]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	f003 0301 	and.w	r3, r3, #1
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
	...

08005c54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b085      	sub	sp, #20
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3301      	adds	r3, #1
 8005c64:	60fb      	str	r3, [r7, #12]
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4a13      	ldr	r2, [pc, #76]	; (8005cb8 <USB_CoreReset+0x64>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d901      	bls.n	8005c72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c6e:	2303      	movs	r3, #3
 8005c70:	e01b      	b.n	8005caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	daf2      	bge.n	8005c60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f043 0201 	orr.w	r2, r3, #1
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4a09      	ldr	r2, [pc, #36]	; (8005cb8 <USB_CoreReset+0x64>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d901      	bls.n	8005c9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e006      	b.n	8005caa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d0f0      	beq.n	8005c8a <USB_CoreReset+0x36>

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3714      	adds	r7, #20
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop
 8005cb8:	00030d40 	.word	0x00030d40

08005cbc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	f107 001c 	add.w	r0, r7, #28
 8005cca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cd8:	461a      	mov	r2, r3
 8005cda:	2300      	movs	r3, #0
 8005cdc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d018      	beq.n	8005d40 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d10a      	bne.n	8005d2a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d22:	f043 0304 	orr.w	r3, r3, #4
 8005d26:	6013      	str	r3, [r2, #0]
 8005d28:	e014      	b.n	8005d54 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68ba      	ldr	r2, [r7, #8]
 8005d34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d38:	f023 0304 	bic.w	r3, r3, #4
 8005d3c:	6013      	str	r3, [r2, #0]
 8005d3e:	e009      	b.n	8005d54 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d4e:	f023 0304 	bic.w	r3, r3, #4
 8005d52:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8005d54:	2110      	movs	r1, #16
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff feb4 	bl	8005ac4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff fed7 	bl	8005b10 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d62:	2300      	movs	r3, #0
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	e015      	b.n	8005d94 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	015a      	lsls	r2, r3, #5
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	4413      	add	r3, r2
 8005d70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d74:	461a      	mov	r2, r3
 8005d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d7a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	015a      	lsls	r2, r3, #5
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4413      	add	r3, r2
 8005d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d88:	461a      	mov	r2, r3
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d3e5      	bcc.n	8005d68 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8005d9c:	2101      	movs	r1, #1
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f8ac 	bl	8005efc <USB_DriveVbus>

  HAL_Delay(200U);
 8005da4:	20c8      	movs	r0, #200	; 0xc8
 8005da6:	f7fb f92b 	bl	8001000 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005db6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d00b      	beq.n	8005ddc <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005dca:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a14      	ldr	r2, [pc, #80]	; (8005e20 <USB_HostInit+0x164>)
 8005dd0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <USB_HostInit+0x168>)
 8005dd6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005dda:	e009      	b.n	8005df0 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2280      	movs	r2, #128	; 0x80
 8005de0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a10      	ldr	r2, [pc, #64]	; (8005e28 <USB_HostInit+0x16c>)
 8005de6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a10      	ldr	r2, [pc, #64]	; (8005e2c <USB_HostInit+0x170>)
 8005dec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d105      	bne.n	8005e02 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f043 0210 	orr.w	r2, r3, #16
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <USB_HostInit+0x174>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e1a:	b004      	add	sp, #16
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop
 8005e20:	01000200 	.word	0x01000200
 8005e24:	00e00300 	.word	0x00e00300
 8005e28:	00600080 	.word	0x00600080
 8005e2c:	004000e0 	.word	0x004000e0
 8005e30:	a3200008 	.word	0xa3200008

08005e34 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b085      	sub	sp, #20
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	78fb      	ldrb	r3, [r7, #3]
 8005e62:	f003 0303 	and.w	r3, r3, #3
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d107      	bne.n	8005e86 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005e82:	6053      	str	r3, [r2, #4]
 8005e84:	e009      	b.n	8005e9a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d106      	bne.n	8005e9a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005e92:	461a      	mov	r2, r3
 8005e94:	f241 7370 	movw	r3, #6000	; 0x1770
 8005e98:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005ec8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005ed8:	2064      	movs	r0, #100	; 0x64
 8005eda:	f7fb f891 	bl	8001000 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005ee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005eec:	200a      	movs	r0, #10
 8005eee:	f7fb f887 	bl	8001000 <HAL_Delay>

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3710      	adds	r7, #16
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005f20:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d109      	bne.n	8005f40 <USB_DriveVbus+0x44>
 8005f2c:	78fb      	ldrb	r3, [r7, #3]
 8005f2e:	2b01      	cmp	r3, #1
 8005f30:	d106      	bne.n	8005f40 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f3a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005f3e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4a:	d109      	bne.n	8005f60 <USB_DriveVbus+0x64>
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d106      	bne.n	8005f60 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f5e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b085      	sub	sp, #20
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	0c5b      	lsrs	r3, r3, #17
 8005f8c:	f003 0303 	and.w	r3, r3, #3
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3714      	adds	r7, #20
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	b29b      	uxth	r3, r3
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
	...

08005fc0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b088      	sub	sp, #32
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	4608      	mov	r0, r1
 8005fca:	4611      	mov	r1, r2
 8005fcc:	461a      	mov	r2, r3
 8005fce:	4603      	mov	r3, r0
 8005fd0:	70fb      	strb	r3, [r7, #3]
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	70bb      	strb	r3, [r7, #2]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005fe2:	78fb      	ldrb	r3, [r7, #3]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005ff6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005ffa:	2b03      	cmp	r3, #3
 8005ffc:	d87e      	bhi.n	80060fc <USB_HC_Init+0x13c>
 8005ffe:	a201      	add	r2, pc, #4	; (adr r2, 8006004 <USB_HC_Init+0x44>)
 8006000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006004:	08006015 	.word	0x08006015
 8006008:	080060bf 	.word	0x080060bf
 800600c:	08006015 	.word	0x08006015
 8006010:	08006081 	.word	0x08006081
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006014:	78fb      	ldrb	r3, [r7, #3]
 8006016:	015a      	lsls	r2, r3, #5
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006020:	461a      	mov	r2, r3
 8006022:	f240 439d 	movw	r3, #1181	; 0x49d
 8006026:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006028:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800602c:	2b00      	cmp	r3, #0
 800602e:	da10      	bge.n	8006052 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	4413      	add	r3, r2
 8006038:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800603c:	68db      	ldr	r3, [r3, #12]
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	0151      	lsls	r1, r2, #5
 8006042:	693a      	ldr	r2, [r7, #16]
 8006044:	440a      	add	r2, r1
 8006046:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800604a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800604e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006050:	e057      	b.n	8006102 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605a:	2b00      	cmp	r3, #0
 800605c:	d051      	beq.n	8006102 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	015a      	lsls	r2, r3, #5
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	4413      	add	r3, r2
 8006066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	78fa      	ldrb	r2, [r7, #3]
 800606e:	0151      	lsls	r1, r2, #5
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	440a      	add	r2, r1
 8006074:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006078:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800607c:	60d3      	str	r3, [r2, #12]
      break;
 800607e:	e040      	b.n	8006102 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	4413      	add	r3, r2
 8006088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800608c:	461a      	mov	r2, r3
 800608e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006092:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006094:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006098:	2b00      	cmp	r3, #0
 800609a:	da34      	bge.n	8006106 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	78fa      	ldrb	r2, [r7, #3]
 80060ac:	0151      	lsls	r1, r2, #5
 80060ae:	693a      	ldr	r2, [r7, #16]
 80060b0:	440a      	add	r2, r1
 80060b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80060bc:	e023      	b.n	8006106 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ca:	461a      	mov	r2, r3
 80060cc:	f240 2325 	movw	r3, #549	; 0x225
 80060d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80060d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	da17      	bge.n	800610a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80060da:	78fb      	ldrb	r3, [r7, #3]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	78fa      	ldrb	r2, [r7, #3]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	693a      	ldr	r2, [r7, #16]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80060f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80060fa:	e006      	b.n	800610a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	77fb      	strb	r3, [r7, #31]
      break;
 8006100:	e004      	b.n	800610c <USB_HC_Init+0x14c>
      break;
 8006102:	bf00      	nop
 8006104:	e002      	b.n	800610c <USB_HC_Init+0x14c>
      break;
 8006106:	bf00      	nop
 8006108:	e000      	b.n	800610c <USB_HC_Init+0x14c>
      break;
 800610a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	78fb      	ldrb	r3, [r7, #3]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	2101      	movs	r1, #1
 800611c:	fa01 f303 	lsl.w	r3, r1, r3
 8006120:	6939      	ldr	r1, [r7, #16]
 8006122:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006126:	4313      	orrs	r3, r2
 8006128:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006136:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800613a:	2b00      	cmp	r3, #0
 800613c:	da03      	bge.n	8006146 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800613e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e001      	b.n	800614a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff ff0f 	bl	8005f6e <USB_GetHostSpeed>
 8006150:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006152:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006156:	2b02      	cmp	r3, #2
 8006158:	d106      	bne.n	8006168 <USB_HC_Init+0x1a8>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b02      	cmp	r3, #2
 800615e:	d003      	beq.n	8006168 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006164:	617b      	str	r3, [r7, #20]
 8006166:	e001      	b.n	800616c <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800616c:	787b      	ldrb	r3, [r7, #1]
 800616e:	059b      	lsls	r3, r3, #22
 8006170:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006174:	78bb      	ldrb	r3, [r7, #2]
 8006176:	02db      	lsls	r3, r3, #11
 8006178:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800617c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800617e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006182:	049b      	lsls	r3, r3, #18
 8006184:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006188:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800618a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800618c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006190:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006196:	78fb      	ldrb	r3, [r7, #3]
 8006198:	0159      	lsls	r1, r3, #5
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	440b      	add	r3, r1
 800619e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061a2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80061a8:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80061aa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d10f      	bne.n	80061d2 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80061b2:	78fb      	ldrb	r3, [r7, #3]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	78fa      	ldrb	r2, [r7, #3]
 80061c2:	0151      	lsls	r1, r2, #5
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	440a      	add	r2, r1
 80061c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80061cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061d0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80061d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3720      	adds	r7, #32
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08c      	sub	sp, #48	; 0x30
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	785b      	ldrb	r3, [r3, #1]
 80061f2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80061f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061f8:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006202:	2b00      	cmp	r3, #0
 8006204:	d02d      	beq.n	8006262 <USB_HC_StartXfer+0x86>
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	791b      	ldrb	r3, [r3, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d129      	bne.n	8006262 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800620e:	79fb      	ldrb	r3, [r7, #7]
 8006210:	2b01      	cmp	r3, #1
 8006212:	d117      	bne.n	8006244 <USB_HC_StartXfer+0x68>
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	79db      	ldrb	r3, [r3, #7]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d003      	beq.n	8006224 <USB_HC_StartXfer+0x48>
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	79db      	ldrb	r3, [r3, #7]
 8006220:	2b02      	cmp	r3, #2
 8006222:	d10f      	bne.n	8006244 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	4413      	add	r3, r2
 800622c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	69fa      	ldr	r2, [r7, #28]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	6a3a      	ldr	r2, [r7, #32]
 8006238:	440a      	add	r2, r1
 800623a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800623e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006242:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <USB_HC_StartXfer+0x86>
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	795b      	ldrb	r3, [r3, #5]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d107      	bne.n	8006262 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	785b      	ldrb	r3, [r3, #1]
 8006256:	4619      	mov	r1, r3
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 fa2f 	bl	80066bc <USB_DoPing>
      return HAL_OK;
 800625e:	2300      	movs	r3, #0
 8006260:	e0f8      	b.n	8006454 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	695b      	ldr	r3, [r3, #20]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d018      	beq.n	800629c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	8912      	ldrh	r2, [r2, #8]
 8006272:	4413      	add	r3, r2
 8006274:	3b01      	subs	r3, #1
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	8912      	ldrh	r2, [r2, #8]
 800627a:	fbb3 f3f2 	udiv	r3, r3, r2
 800627e:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006280:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006282:	8b7b      	ldrh	r3, [r7, #26]
 8006284:	429a      	cmp	r2, r3
 8006286:	d90b      	bls.n	80062a0 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006288:	8b7b      	ldrh	r3, [r7, #26]
 800628a:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800628c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	8912      	ldrh	r2, [r2, #8]
 8006292:	fb02 f203 	mul.w	r2, r2, r3
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	611a      	str	r2, [r3, #16]
 800629a:	e001      	b.n	80062a0 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800629c:	2301      	movs	r3, #1
 800629e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	78db      	ldrb	r3, [r3, #3]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80062a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062aa:	68ba      	ldr	r2, [r7, #8]
 80062ac:	8912      	ldrh	r2, [r2, #8]
 80062ae:	fb02 f203 	mul.w	r2, r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	611a      	str	r2, [r3, #16]
 80062b6:	e003      	b.n	80062c0 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	695a      	ldr	r2, [r3, #20]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062ca:	04d9      	lsls	r1, r3, #19
 80062cc:	4b63      	ldr	r3, [pc, #396]	; (800645c <USB_HC_StartXfer+0x280>)
 80062ce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062d0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	7a9b      	ldrb	r3, [r3, #10]
 80062d6:	075b      	lsls	r3, r3, #29
 80062d8:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062dc:	69f9      	ldr	r1, [r7, #28]
 80062de:	0148      	lsls	r0, r1, #5
 80062e0:	6a39      	ldr	r1, [r7, #32]
 80062e2:	4401      	add	r1, r0
 80062e4:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80062e8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80062ea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80062ec:	79fb      	ldrb	r3, [r7, #7]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d009      	beq.n	8006306 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	68d9      	ldr	r1, [r3, #12]
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	015a      	lsls	r2, r3, #5
 80062fa:	6a3b      	ldr	r3, [r7, #32]
 80062fc:	4413      	add	r3, r2
 80062fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006302:	460a      	mov	r2, r1
 8006304:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b00      	cmp	r3, #0
 8006314:	bf0c      	ite	eq
 8006316:	2301      	moveq	r3, #1
 8006318:	2300      	movne	r3, #0
 800631a:	b2db      	uxtb	r3, r3
 800631c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	6a3a      	ldr	r2, [r7, #32]
 8006332:	440a      	add	r2, r1
 8006334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006338:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800633c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	6a3b      	ldr	r3, [r7, #32]
 8006344:	4413      	add	r3, r2
 8006346:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	7e7b      	ldrb	r3, [r7, #25]
 800634e:	075b      	lsls	r3, r3, #29
 8006350:	69f9      	ldr	r1, [r7, #28]
 8006352:	0148      	lsls	r0, r1, #5
 8006354:	6a39      	ldr	r1, [r7, #32]
 8006356:	4401      	add	r1, r0
 8006358:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800635c:	4313      	orrs	r3, r2
 800635e:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	4413      	add	r3, r2
 8006368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006376:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	78db      	ldrb	r3, [r3, #3]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006386:	613b      	str	r3, [r7, #16]
 8006388:	e003      	b.n	8006392 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006390:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006398:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a6:	461a      	mov	r2, r3
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80063ac:	79fb      	ldrb	r3, [r7, #7]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d001      	beq.n	80063b6 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e04e      	b.n	8006454 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	78db      	ldrb	r3, [r3, #3]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d149      	bne.n	8006452 <USB_HC_StartXfer+0x276>
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	695b      	ldr	r3, [r3, #20]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d045      	beq.n	8006452 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	79db      	ldrb	r3, [r3, #7]
 80063ca:	2b03      	cmp	r3, #3
 80063cc:	d830      	bhi.n	8006430 <USB_HC_StartXfer+0x254>
 80063ce:	a201      	add	r2, pc, #4	; (adr r2, 80063d4 <USB_HC_StartXfer+0x1f8>)
 80063d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063d4:	080063e5 	.word	0x080063e5
 80063d8:	08006409 	.word	0x08006409
 80063dc:	080063e5 	.word	0x080063e5
 80063e0:	08006409 	.word	0x08006409
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	3303      	adds	r3, #3
 80063ea:	089b      	lsrs	r3, r3, #2
 80063ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80063ee:	8afa      	ldrh	r2, [r7, #22]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d91c      	bls.n	8006434 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f043 0220 	orr.w	r2, r3, #32
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	619a      	str	r2, [r3, #24]
        }
        break;
 8006406:	e015      	b.n	8006434 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	3303      	adds	r3, #3
 800640e:	089b      	lsrs	r3, r3, #2
 8006410:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006412:	8afa      	ldrh	r2, [r7, #22]
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	b29b      	uxth	r3, r3
 800641e:	429a      	cmp	r2, r3
 8006420:	d90a      	bls.n	8006438 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	619a      	str	r2, [r3, #24]
        }
        break;
 800642e:	e003      	b.n	8006438 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006430:	bf00      	nop
 8006432:	e002      	b.n	800643a <USB_HC_StartXfer+0x25e>
        break;
 8006434:	bf00      	nop
 8006436:	e000      	b.n	800643a <USB_HC_StartXfer+0x25e>
        break;
 8006438:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	68d9      	ldr	r1, [r3, #12]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	785a      	ldrb	r2, [r3, #1]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	b29b      	uxth	r3, r3
 8006448:	2000      	movs	r0, #0
 800644a:	9000      	str	r0, [sp, #0]
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7ff fb81 	bl	8005b54 <USB_WritePacket>
  }

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3728      	adds	r7, #40	; 0x28
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	1ff80000 	.word	0x1ff80000

08006460 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	b29b      	uxth	r3, r3
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr

08006482 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006482:	b480      	push	{r7}
 8006484:	b089      	sub	sp, #36	; 0x24
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8006496:	2300      	movs	r3, #0
 8006498:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	0c9b      	lsrs	r3, r3, #18
 80064aa:	f003 0303 	and.w	r3, r3, #3
 80064ae:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	0fdb      	lsrs	r3, r3, #31
 80064c0:	f003 0301 	and.w	r3, r3, #1
 80064c4:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	689b      	ldr	r3, [r3, #8]
 80064ca:	f003 0320 	and.w	r3, r3, #32
 80064ce:	2b20      	cmp	r3, #32
 80064d0:	d104      	bne.n	80064dc <USB_HC_Halt+0x5a>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80064d8:	2300      	movs	r3, #0
 80064da:	e0e8      	b.n	80066ae <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <USB_HC_Halt+0x66>
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d173      	bne.n	80065d0 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006502:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006506:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f003 0320 	and.w	r3, r3, #32
 8006510:	2b00      	cmp	r3, #0
 8006512:	f040 80cb 	bne.w	80066ac <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800651e:	2b00      	cmp	r3, #0
 8006520:	d143      	bne.n	80065aa <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	4413      	add	r3, r2
 800652a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	0151      	lsls	r1, r2, #5
 8006534:	69ba      	ldr	r2, [r7, #24]
 8006536:	440a      	add	r2, r1
 8006538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800653c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006540:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	015a      	lsls	r2, r3, #5
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	4413      	add	r3, r2
 800654a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	697a      	ldr	r2, [r7, #20]
 8006552:	0151      	lsls	r1, r2, #5
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	440a      	add	r2, r1
 8006558:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800655c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006560:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	0151      	lsls	r1, r2, #5
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	440a      	add	r2, r1
 8006578:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800657c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006580:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	3301      	adds	r3, #1
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800658e:	d81d      	bhi.n	80065cc <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	4413      	add	r3, r2
 8006598:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065a6:	d0ec      	beq.n	8006582 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065a8:	e080      	b.n	80066ac <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	0151      	lsls	r1, r2, #5
 80065bc:	69ba      	ldr	r2, [r7, #24]
 80065be:	440a      	add	r2, r1
 80065c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80065c8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ca:	e06f      	b.n	80066ac <USB_HC_Halt+0x22a>
            break;
 80065cc:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80065ce:	e06d      	b.n	80066ac <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80065ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065ee:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d143      	bne.n	8006688 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	015a      	lsls	r2, r3, #5
 8006604:	69bb      	ldr	r3, [r7, #24]
 8006606:	4413      	add	r3, r2
 8006608:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	697a      	ldr	r2, [r7, #20]
 8006610:	0151      	lsls	r1, r2, #5
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	440a      	add	r2, r1
 8006616:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800661a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800661e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	015a      	lsls	r2, r3, #5
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	4413      	add	r3, r2
 8006628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	0151      	lsls	r1, r2, #5
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	440a      	add	r2, r1
 8006636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800663a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800663e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	015a      	lsls	r2, r3, #5
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	4413      	add	r3, r2
 8006648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	0151      	lsls	r1, r2, #5
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	440a      	add	r2, r1
 8006656:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800665a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800665e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	3301      	adds	r3, #1
 8006664:	61fb      	str	r3, [r7, #28]
 8006666:	69fb      	ldr	r3, [r7, #28]
 8006668:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800666c:	d81d      	bhi.n	80066aa <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	015a      	lsls	r2, r3, #5
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	4413      	add	r3, r2
 8006676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006684:	d0ec      	beq.n	8006660 <USB_HC_Halt+0x1de>
 8006686:	e011      	b.n	80066ac <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	4413      	add	r3, r2
 8006690:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	440a      	add	r2, r1
 800669e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066a6:	6013      	str	r3, [r2, #0]
 80066a8:	e000      	b.n	80066ac <USB_HC_Halt+0x22a>
          break;
 80066aa:	bf00      	nop
    }
  }

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3724      	adds	r7, #36	; 0x24
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80066d0:	2301      	movs	r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	04da      	lsls	r2, r3, #19
 80066d8:	4b15      	ldr	r3, [pc, #84]	; (8006730 <USB_DoPing+0x74>)
 80066da:	4013      	ands	r3, r2
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	0151      	lsls	r1, r2, #5
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	440a      	add	r2, r1
 80066e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80066ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006704:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800670c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	015a      	lsls	r2, r3, #5
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4413      	add	r3, r2
 8006716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800671a:	461a      	mov	r2, r3
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006720:	2300      	movs	r3, #0
}
 8006722:	4618      	mov	r0, r3
 8006724:	371c      	adds	r7, #28
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	1ff80000 	.word	0x1ff80000

08006734 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b086      	sub	sp, #24
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8006740:	2300      	movs	r3, #0
 8006742:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff f981 	bl	8005a4c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800674a:	2110      	movs	r1, #16
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff f9b9 	bl	8005ac4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f7ff f9dc 	bl	8005b10 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006758:	2300      	movs	r3, #0
 800675a:	613b      	str	r3, [r7, #16]
 800675c:	e01f      	b.n	800679e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	015a      	lsls	r2, r3, #5
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4413      	add	r3, r2
 8006766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006774:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800677c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006784:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	015a      	lsls	r2, r3, #5
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	4413      	add	r3, r2
 800678e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006792:	461a      	mov	r2, r3
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	3301      	adds	r3, #1
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	2b0f      	cmp	r3, #15
 80067a2:	d9dc      	bls.n	800675e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80067a4:	2300      	movs	r3, #0
 80067a6:	613b      	str	r3, [r7, #16]
 80067a8:	e034      	b.n	8006814 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067de:	461a      	mov	r2, r3
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	3301      	adds	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067f0:	d80c      	bhi.n	800680c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	015a      	lsls	r2, r3, #5
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006804:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006808:	d0ec      	beq.n	80067e4 <USB_StopHost+0xb0>
 800680a:	e000      	b.n	800680e <USB_StopHost+0xda>
        break;
 800680c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	3301      	adds	r3, #1
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b0f      	cmp	r3, #15
 8006818:	d9c7      	bls.n	80067aa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006820:	461a      	mov	r2, r3
 8006822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006826:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800682e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff f8fa 	bl	8005a2a <USB_EnableGlobalInt>

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006840:	b590      	push	{r4, r7, lr}
 8006842:	b089      	sub	sp, #36	; 0x24
 8006844:	af04      	add	r7, sp, #16
 8006846:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006848:	2301      	movs	r3, #1
 800684a:	2202      	movs	r2, #2
 800684c:	2102      	movs	r1, #2
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 fc66 	bl	8007120 <USBH_FindInterface>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2bff      	cmp	r3, #255	; 0xff
 800685c:	d002      	beq.n	8006864 <USBH_CDC_InterfaceInit+0x24>
 800685e:	7bfb      	ldrb	r3, [r7, #15]
 8006860:	2b01      	cmp	r3, #1
 8006862:	d901      	bls.n	8006868 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006864:	2302      	movs	r3, #2
 8006866:	e13d      	b.n	8006ae4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006868:	7bfb      	ldrb	r3, [r7, #15]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 fc3b 	bl	80070e8 <USBH_SelectInterface>
 8006872:	4603      	mov	r3, r0
 8006874:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800687c:	2302      	movs	r3, #2
 800687e:	e131      	b.n	8006ae4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006886:	2050      	movs	r0, #80	; 0x50
 8006888:	f002 fa00 	bl	8008c8c <malloc>
 800688c:	4603      	mov	r3, r0
 800688e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d101      	bne.n	80068a4 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80068a0:	2302      	movs	r3, #2
 80068a2:	e11f      	b.n	8006ae4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80068a4:	2250      	movs	r2, #80	; 0x50
 80068a6:	2100      	movs	r1, #0
 80068a8:	68b8      	ldr	r0, [r7, #8]
 80068aa:	f002 f9ff 	bl	8008cac <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	211a      	movs	r1, #26
 80068b4:	fb01 f303 	mul.w	r3, r1, r3
 80068b8:	4413      	add	r3, r2
 80068ba:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	b25b      	sxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	da15      	bge.n	80068f2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	211a      	movs	r1, #26
 80068cc:	fb01 f303 	mul.w	r3, r1, r3
 80068d0:	4413      	add	r3, r2
 80068d2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80068d6:	781a      	ldrb	r2, [r3, #0]
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	211a      	movs	r1, #26
 80068e2:	fb01 f303 	mul.w	r3, r1, r3
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80068ec:	881a      	ldrh	r2, [r3, #0]
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	4619      	mov	r1, r3
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fe32 	bl	8008562 <USBH_AllocPipe>
 80068fe:	4603      	mov	r3, r0
 8006900:	461a      	mov	r2, r3
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	7819      	ldrb	r1, [r3, #0]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	7858      	ldrb	r0, [r3, #1]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	8952      	ldrh	r2, [r2, #10]
 800691e:	9202      	str	r2, [sp, #8]
 8006920:	2203      	movs	r2, #3
 8006922:	9201      	str	r2, [sp, #4]
 8006924:	9300      	str	r3, [sp, #0]
 8006926:	4623      	mov	r3, r4
 8006928:	4602      	mov	r2, r0
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 fdea 	bl	8008504 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	2200      	movs	r2, #0
 8006936:	4619      	mov	r1, r3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f002 f8f9 	bl	8008b30 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800693e:	2300      	movs	r3, #0
 8006940:	2200      	movs	r2, #0
 8006942:	210a      	movs	r1, #10
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f000 fbeb 	bl	8007120 <USBH_FindInterface>
 800694a:	4603      	mov	r3, r0
 800694c:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800694e:	7bfb      	ldrb	r3, [r7, #15]
 8006950:	2bff      	cmp	r3, #255	; 0xff
 8006952:	d002      	beq.n	800695a <USBH_CDC_InterfaceInit+0x11a>
 8006954:	7bfb      	ldrb	r3, [r7, #15]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d901      	bls.n	800695e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800695a:	2302      	movs	r3, #2
 800695c:	e0c2      	b.n	8006ae4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800695e:	7bfb      	ldrb	r3, [r7, #15]
 8006960:	687a      	ldr	r2, [r7, #4]
 8006962:	211a      	movs	r1, #26
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	4413      	add	r3, r2
 800696a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	b25b      	sxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	da16      	bge.n	80069a4 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	211a      	movs	r1, #26
 800697c:	fb01 f303 	mul.w	r3, r1, r3
 8006980:	4413      	add	r3, r2
 8006982:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006986:	781a      	ldrb	r2, [r3, #0]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800698c:	7bfb      	ldrb	r3, [r7, #15]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	211a      	movs	r1, #26
 8006992:	fb01 f303 	mul.w	r3, r1, r3
 8006996:	4413      	add	r3, r2
 8006998:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800699c:	881a      	ldrh	r2, [r3, #0]
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	835a      	strh	r2, [r3, #26]
 80069a2:	e015      	b.n	80069d0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	211a      	movs	r1, #26
 80069aa:	fb01 f303 	mul.w	r3, r1, r3
 80069ae:	4413      	add	r3, r2
 80069b0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80069b4:	781a      	ldrb	r2, [r3, #0]
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80069ba:	7bfb      	ldrb	r3, [r7, #15]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	211a      	movs	r1, #26
 80069c0:	fb01 f303 	mul.w	r3, r1, r3
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80069ca:	881a      	ldrh	r2, [r3, #0]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	211a      	movs	r1, #26
 80069d6:	fb01 f303 	mul.w	r3, r1, r3
 80069da:	4413      	add	r3, r2
 80069dc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b25b      	sxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da16      	bge.n	8006a16 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80069e8:	7bfb      	ldrb	r3, [r7, #15]
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	211a      	movs	r1, #26
 80069ee:	fb01 f303 	mul.w	r3, r1, r3
 80069f2:	4413      	add	r3, r2
 80069f4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	211a      	movs	r1, #26
 8006a04:	fb01 f303 	mul.w	r3, r1, r3
 8006a08:	4413      	add	r3, r2
 8006a0a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a0e:	881a      	ldrh	r2, [r3, #0]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	835a      	strh	r2, [r3, #26]
 8006a14:	e015      	b.n	8006a42 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	211a      	movs	r1, #26
 8006a1c:	fb01 f303 	mul.w	r3, r1, r3
 8006a20:	4413      	add	r3, r2
 8006a22:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006a2c:	7bfb      	ldrb	r3, [r7, #15]
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	211a      	movs	r1, #26
 8006a32:	fb01 f303 	mul.w	r3, r1, r3
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006a3c:	881a      	ldrh	r2, [r3, #0]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	7b9b      	ldrb	r3, [r3, #14]
 8006a46:	4619      	mov	r1, r3
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f001 fd8a 	bl	8008562 <USBH_AllocPipe>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	461a      	mov	r2, r3
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	7bdb      	ldrb	r3, [r3, #15]
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f001 fd80 	bl	8008562 <USBH_AllocPipe>
 8006a62:	4603      	mov	r3, r0
 8006a64:	461a      	mov	r2, r3
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	7b59      	ldrb	r1, [r3, #13]
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	7b98      	ldrb	r0, [r3, #14]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	8b12      	ldrh	r2, [r2, #24]
 8006a82:	9202      	str	r2, [sp, #8]
 8006a84:	2202      	movs	r2, #2
 8006a86:	9201      	str	r2, [sp, #4]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f001 fd38 	bl	8008504 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	7b19      	ldrb	r1, [r3, #12]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	7bd8      	ldrb	r0, [r3, #15]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	8b52      	ldrh	r2, [r2, #26]
 8006aac:	9202      	str	r2, [sp, #8]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	9201      	str	r2, [sp, #4]
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	4623      	mov	r3, r4
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f001 fd23 	bl	8008504 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	7b5b      	ldrb	r3, [r3, #13]
 8006aca:	2200      	movs	r2, #0
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f002 f82e 	bl	8008b30 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	7b1b      	ldrb	r3, [r3, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	4619      	mov	r1, r3
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f002 f827 	bl	8008b30 <USBH_LL_SetToggle>

  return USBH_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd90      	pop	{r4, r7, pc}

08006aec <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 fd18 	bl	8008542 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fd43 	bl	80085a4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	7b1b      	ldrb	r3, [r3, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00e      	beq.n	8006b4a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	7b1b      	ldrb	r3, [r3, #12]
 8006b30:	4619      	mov	r1, r3
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f001 fd05 	bl	8008542 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	7b1b      	ldrb	r3, [r3, #12]
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f001 fd30 	bl	80085a4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2200      	movs	r2, #0
 8006b48:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	7b5b      	ldrb	r3, [r3, #13]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00e      	beq.n	8006b70 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	7b5b      	ldrb	r3, [r3, #13]
 8006b56:	4619      	mov	r1, r3
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 fcf2 	bl	8008542 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	7b5b      	ldrb	r3, [r3, #13]
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fd1d 	bl	80085a4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b76:	69db      	ldr	r3, [r3, #28]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b82:	69db      	ldr	r3, [r3, #28]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f002 f889 	bl	8008c9c <free>
    phost->pActiveClass->pData = 0U;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b90:	2200      	movs	r2, #0
 8006b92:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3710      	adds	r7, #16
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b084      	sub	sp, #16
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bac:	69db      	ldr	r3, [r3, #28]
 8006bae:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	3340      	adds	r3, #64	; 0x40
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f8b1 	bl	8006d1e <GetLineCoding>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006bc0:	7afb      	ldrb	r3, [r7, #11]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006bcc:	2102      	movs	r1, #2
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}

08006bdc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006be4:	2301      	movs	r3, #1
 8006be6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d877      	bhi.n	8006cf0 <USBH_CDC_Process+0x114>
 8006c00:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <USBH_CDC_Process+0x2c>)
 8006c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c06:	bf00      	nop
 8006c08:	08006c1d 	.word	0x08006c1d
 8006c0c:	08006c23 	.word	0x08006c23
 8006c10:	08006c53 	.word	0x08006c53
 8006c14:	08006cc7 	.word	0x08006cc7
 8006c18:	08006cd5 	.word	0x08006cd5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006c20:	e06d      	b.n	8006cfe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c26:	4619      	mov	r1, r3
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f897 	bl	8006d5c <SetLineCoding>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c32:	7bbb      	ldrb	r3, [r7, #14]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d104      	bne.n	8006c42 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006c40:	e058      	b.n	8006cf4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b01      	cmp	r3, #1
 8006c46:	d055      	beq.n	8006cf4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	2204      	movs	r2, #4
 8006c4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006c50:	e050      	b.n	8006cf4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	3340      	adds	r3, #64	; 0x40
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f860 	bl	8006d1e <GetLineCoding>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006c62:	7bbb      	ldrb	r3, [r7, #14]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d126      	bne.n	8006cb6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7a:	791b      	ldrb	r3, [r3, #4]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d13b      	bne.n	8006cf8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006c8c:	429a      	cmp	r2, r3
 8006c8e:	d133      	bne.n	8006cf8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c9a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d12b      	bne.n	8006cf8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ca8:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d124      	bne.n	8006cf8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f958 	bl	8006f64 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006cb4:	e020      	b.n	8006cf8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006cb6:	7bbb      	ldrb	r3, [r7, #14]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d01d      	beq.n	8006cf8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006cc4:	e018      	b.n	8006cf8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f867 	bl	8006d9a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f8da 	bl	8006e86 <CDC_ProcessReception>
      break;
 8006cd2:	e014      	b.n	8006cfe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 ffe3 	bl	8007ca2 <USBH_ClrFeature>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006cee:	e005      	b.n	8006cfc <USBH_CDC_Process+0x120>

    default:
      break;
 8006cf0:	bf00      	nop
 8006cf2:	e004      	b.n	8006cfe <USBH_CDC_Process+0x122>
      break;
 8006cf4:	bf00      	nop
 8006cf6:	e002      	b.n	8006cfe <USBH_CDC_Process+0x122>
      break;
 8006cf8:	bf00      	nop
 8006cfa:	e000      	b.n	8006cfe <USBH_CDC_Process+0x122>
      break;
 8006cfc:	bf00      	nop

  }

  return status;
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b083      	sub	sp, #12
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006d1e:	b580      	push	{r7, lr}
 8006d20:	b082      	sub	sp, #8
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	22a1      	movs	r2, #161	; 0xa1
 8006d2c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2221      	movs	r2, #33	; 0x21
 8006d32:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2207      	movs	r2, #7
 8006d44:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2207      	movs	r2, #7
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 f988 	bl	8008062 <USBH_CtlReq>
 8006d52:	4603      	mov	r3, r0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2221      	movs	r2, #33	; 0x21
 8006d6a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2207      	movs	r2, #7
 8006d82:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2207      	movs	r2, #7
 8006d88:	4619      	mov	r1, r3
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f001 f969 	bl	8008062 <USBH_CtlReq>
 8006d90:	4603      	mov	r3, r0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b086      	sub	sp, #24
 8006d9e:	af02      	add	r7, sp, #8
 8006da0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006da8:	69db      	ldr	r3, [r3, #28]
 8006daa:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006dac:	2300      	movs	r3, #0
 8006dae:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d002      	beq.n	8006dc0 <CDC_ProcessTransmission+0x26>
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d023      	beq.n	8006e06 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8006dbe:	e05e      	b.n	8006e7e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	8b12      	ldrh	r2, [r2, #24]
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d90b      	bls.n	8006de4 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	69d9      	ldr	r1, [r3, #28]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8b1a      	ldrh	r2, [r3, #24]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	7b5b      	ldrb	r3, [r3, #13]
 8006dd8:	2001      	movs	r0, #1
 8006dda:	9000      	str	r0, [sp, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f001 fb4e 	bl	800847e <USBH_BulkSendData>
 8006de2:	e00b      	b.n	8006dfc <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8006dec:	b29a      	uxth	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	7b5b      	ldrb	r3, [r3, #13]
 8006df2:	2001      	movs	r0, #1
 8006df4:	9000      	str	r0, [sp, #0]
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f001 fb41 	bl	800847e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e04:	e03b      	b.n	8006e7e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	7b5b      	ldrb	r3, [r3, #13]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f001 fe65 	bl	8008adc <USBH_LL_GetURBState>
 8006e12:	4603      	mov	r3, r0
 8006e14:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006e16:	7afb      	ldrb	r3, [r7, #11]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d128      	bne.n	8006e6e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	8b12      	ldrh	r2, [r2, #24]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d90e      	bls.n	8006e46 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2c:	68fa      	ldr	r2, [r7, #12]
 8006e2e:	8b12      	ldrh	r2, [r2, #24]
 8006e30:	1a9a      	subs	r2, r3, r2
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	8b12      	ldrh	r2, [r2, #24]
 8006e3e:	441a      	add	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	61da      	str	r2, [r3, #28]
 8006e44:	e002      	b.n	8006e4c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d004      	beq.n	8006e5e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e5c:	e00e      	b.n	8006e7c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f868 	bl	8006f3c <USBH_CDC_TransmitCallback>
      break;
 8006e6c:	e006      	b.n	8006e7c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8006e6e:	7afb      	ldrb	r3, [r7, #11]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d103      	bne.n	8006e7c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006e7c:	bf00      	nop
  }
}
 8006e7e:	bf00      	nop
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006e86:	b580      	push	{r7, lr}
 8006e88:	b086      	sub	sp, #24
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d002      	beq.n	8006eac <CDC_ProcessReception+0x26>
 8006ea6:	2b04      	cmp	r3, #4
 8006ea8:	d00e      	beq.n	8006ec8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006eaa:	e043      	b.n	8006f34 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	6a19      	ldr	r1, [r3, #32]
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	8b5a      	ldrh	r2, [r3, #26]
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	7b1b      	ldrb	r3, [r3, #12]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f001 fb05 	bl	80084c8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	2204      	movs	r2, #4
 8006ec2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006ec6:	e035      	b.n	8006f34 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	7b1b      	ldrb	r3, [r3, #12]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f001 fe04 	bl	8008adc <USBH_LL_GetURBState>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006ed8:	7cfb      	ldrb	r3, [r7, #19]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d129      	bne.n	8006f32 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	7b1b      	ldrb	r3, [r3, #12]
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f001 fd67 	bl	80089b8 <USBH_LL_GetLastXferSize>
 8006eea:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d016      	beq.n	8006f24 <CDC_ProcessReception+0x9e>
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	8b5b      	ldrh	r3, [r3, #26]
 8006efa:	461a      	mov	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d910      	bls.n	8006f24 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	1ad2      	subs	r2, r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	6a1a      	ldr	r2, [r3, #32]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	441a      	add	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2203      	movs	r2, #3
 8006f1e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006f22:	e006      	b.n	8006f32 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f80f 	bl	8006f50 <USBH_CDC_ReceiveCallback>
      break;
 8006f32:	bf00      	nop
  }
}
 8006f34:	bf00      	nop
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f44:	bf00      	nop
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f58:	bf00      	nop
 8006f5a:	370c      	adds	r7, #12
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr

08006f64 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006f6c:	bf00      	nop
 8006f6e:	370c      	adds	r7, #12
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	4613      	mov	r3, r2
 8006f84:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d101      	bne.n	8006f90 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e029      	b.n	8006fe4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	79fa      	ldrb	r2, [r7, #7]
 8006f94:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f81f 	bl	8006fec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d003      	beq.n	8006fdc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	68ba      	ldr	r2, [r7, #8]
 8006fd8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f001 fc37 	bl	8008850 <USBH_LL_Init>

  return USBH_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b085      	sub	sp, #20
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]
 8006ffc:	e009      	b.n	8007012 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	33e0      	adds	r3, #224	; 0xe0
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4413      	add	r3, r2
 8007008:	2200      	movs	r2, #0
 800700a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	3301      	adds	r3, #1
 8007010:	60fb      	str	r3, [r7, #12]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2b0e      	cmp	r3, #14
 8007016:	d9f2      	bls.n	8006ffe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007018:	2300      	movs	r3, #0
 800701a:	60fb      	str	r3, [r7, #12]
 800701c:	e009      	b.n	8007032 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007028:	2200      	movs	r2, #0
 800702a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	3301      	adds	r3, #1
 8007030:	60fb      	str	r3, [r7, #12]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007038:	d3f1      	bcc.n	800701e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2240      	movs	r2, #64	; 0x40
 800705e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d016      	beq.n	80070d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d10e      	bne.n	80070d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80070b8:	1c59      	adds	r1, r3, #1
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80070c0:	687a      	ldr	r2, [r7, #4]
 80070c2:	33de      	adds	r3, #222	; 0xde
 80070c4:	6839      	ldr	r1, [r7, #0]
 80070c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80070ca:	2300      	movs	r3, #0
 80070cc:	73fb      	strb	r3, [r7, #15]
 80070ce:	e004      	b.n	80070da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80070d0:	2302      	movs	r3, #2
 80070d2:	73fb      	strb	r3, [r7, #15]
 80070d4:	e001      	b.n	80070da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80070d6:	2302      	movs	r3, #2
 80070d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3714      	adds	r7, #20
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b085      	sub	sp, #20
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80070fe:	78fa      	ldrb	r2, [r7, #3]
 8007100:	429a      	cmp	r2, r3
 8007102:	d204      	bcs.n	800710e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800710c:	e001      	b.n	8007112 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800710e:	2302      	movs	r3, #2
 8007110:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007112:	7bfb      	ldrb	r3, [r7, #15]
}
 8007114:	4618      	mov	r0, r3
 8007116:	3714      	adds	r7, #20
 8007118:	46bd      	mov	sp, r7
 800711a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711e:	4770      	bx	lr

08007120 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	4608      	mov	r0, r1
 800712a:	4611      	mov	r1, r2
 800712c:	461a      	mov	r2, r3
 800712e:	4603      	mov	r3, r0
 8007130:	70fb      	strb	r3, [r7, #3]
 8007132:	460b      	mov	r3, r1
 8007134:	70bb      	strb	r3, [r7, #2]
 8007136:	4613      	mov	r3, r2
 8007138:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800713e:	2300      	movs	r3, #0
 8007140:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007148:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800714a:	e025      	b.n	8007198 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	221a      	movs	r2, #26
 8007150:	fb02 f303 	mul.w	r3, r2, r3
 8007154:	3308      	adds	r3, #8
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	4413      	add	r3, r2
 800715a:	3302      	adds	r3, #2
 800715c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	795b      	ldrb	r3, [r3, #5]
 8007162:	78fa      	ldrb	r2, [r7, #3]
 8007164:	429a      	cmp	r2, r3
 8007166:	d002      	beq.n	800716e <USBH_FindInterface+0x4e>
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	2bff      	cmp	r3, #255	; 0xff
 800716c:	d111      	bne.n	8007192 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007172:	78ba      	ldrb	r2, [r7, #2]
 8007174:	429a      	cmp	r2, r3
 8007176:	d002      	beq.n	800717e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007178:	78bb      	ldrb	r3, [r7, #2]
 800717a:	2bff      	cmp	r3, #255	; 0xff
 800717c:	d109      	bne.n	8007192 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007182:	787a      	ldrb	r2, [r7, #1]
 8007184:	429a      	cmp	r2, r3
 8007186:	d002      	beq.n	800718e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007188:	787b      	ldrb	r3, [r7, #1]
 800718a:	2bff      	cmp	r3, #255	; 0xff
 800718c:	d101      	bne.n	8007192 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	e006      	b.n	80071a0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007192:	7dfb      	ldrb	r3, [r7, #23]
 8007194:	3301      	adds	r3, #1
 8007196:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007198:	7dfb      	ldrb	r3, [r7, #23]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d9d6      	bls.n	800714c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800719e:	23ff      	movs	r3, #255	; 0xff
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	371c      	adds	r7, #28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fb87 	bl	80088c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80071ba:	2101      	movs	r1, #1
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f001 fca0 	bl	8008b02 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af04      	add	r7, sp, #16
 80071d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80071d4:	2302      	movs	r3, #2
 80071d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80071d8:	2300      	movs	r3, #0
 80071da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d102      	bne.n	80071ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2203      	movs	r2, #3
 80071ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b0b      	cmp	r3, #11
 80071f6:	f200 81b3 	bhi.w	8007560 <USBH_Process+0x394>
 80071fa:	a201      	add	r2, pc, #4	; (adr r2, 8007200 <USBH_Process+0x34>)
 80071fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007200:	08007231 	.word	0x08007231
 8007204:	08007263 	.word	0x08007263
 8007208:	080072cb 	.word	0x080072cb
 800720c:	080074fb 	.word	0x080074fb
 8007210:	08007561 	.word	0x08007561
 8007214:	0800736f 	.word	0x0800736f
 8007218:	080074a1 	.word	0x080074a1
 800721c:	080073a5 	.word	0x080073a5
 8007220:	080073c5 	.word	0x080073c5
 8007224:	080073e5 	.word	0x080073e5
 8007228:	08007413 	.word	0x08007413
 800722c:	080074e3 	.word	0x080074e3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007236:	b2db      	uxtb	r3, r3
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 8193 	beq.w	8007564 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2201      	movs	r2, #1
 8007242:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007244:	20c8      	movs	r0, #200	; 0xc8
 8007246:	f001 fca3 	bl	8008b90 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f001 fb99 	bl	8008982 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007260:	e180      	b.n	8007564 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007268:	2b01      	cmp	r3, #1
 800726a:	d107      	bne.n	800727c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800727a:	e182      	b.n	8007582 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007286:	d914      	bls.n	80072b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800728e:	3301      	adds	r3, #1
 8007290:	b2da      	uxtb	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800729e:	2b03      	cmp	r3, #3
 80072a0:	d903      	bls.n	80072aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	220d      	movs	r2, #13
 80072a6:	701a      	strb	r2, [r3, #0]
      break;
 80072a8:	e16b      	b.n	8007582 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
      break;
 80072b0:	e167      	b.n	8007582 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80072b8:	f103 020a 	add.w	r2, r3, #10
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80072c2:	200a      	movs	r0, #10
 80072c4:	f001 fc64 	bl	8008b90 <USBH_Delay>
      break;
 80072c8:	e15b      	b.n	8007582 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80072da:	2104      	movs	r1, #4
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80072e0:	2064      	movs	r0, #100	; 0x64
 80072e2:	f001 fc55 	bl	8008b90 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f001 fb24 	bl	8008934 <USBH_LL_GetSpeed>
 80072ec:	4603      	mov	r3, r0
 80072ee:	461a      	mov	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2205      	movs	r2, #5
 80072fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80072fc:	2100      	movs	r1, #0
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f001 f92f 	bl	8008562 <USBH_AllocPipe>
 8007304:	4603      	mov	r3, r0
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800730c:	2180      	movs	r1, #128	; 0x80
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f927 	bl	8008562 <USBH_AllocPipe>
 8007314:	4603      	mov	r3, r0
 8007316:	461a      	mov	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7919      	ldrb	r1, [r3, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007330:	b292      	uxth	r2, r2
 8007332:	9202      	str	r2, [sp, #8]
 8007334:	2200      	movs	r2, #0
 8007336:	9201      	str	r2, [sp, #4]
 8007338:	9300      	str	r3, [sp, #0]
 800733a:	4603      	mov	r3, r0
 800733c:	2280      	movs	r2, #128	; 0x80
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f001 f8e0 	bl	8008504 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	7959      	ldrb	r1, [r3, #5]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007358:	b292      	uxth	r2, r2
 800735a:	9202      	str	r2, [sp, #8]
 800735c:	2200      	movs	r2, #0
 800735e:	9201      	str	r2, [sp, #4]
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	4603      	mov	r3, r0
 8007364:	2200      	movs	r2, #0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f001 f8cc 	bl	8008504 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800736c:	e109      	b.n	8007582 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 f90c 	bl	800758c <USBH_HandleEnum>
 8007374:	4603      	mov	r3, r0
 8007376:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007378:	7bbb      	ldrb	r3, [r7, #14]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 80f3 	bne.w	8007568 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007390:	2b01      	cmp	r3, #1
 8007392:	d103      	bne.n	800739c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2208      	movs	r2, #8
 8007398:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800739a:	e0e5      	b.n	8007568 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2207      	movs	r2, #7
 80073a0:	701a      	strb	r2, [r3, #0]
      break;
 80073a2:	e0e1      	b.n	8007568 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 80de 	beq.w	800756c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80073b6:	2101      	movs	r1, #1
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2208      	movs	r2, #8
 80073c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80073c2:	e0d3      	b.n	800756c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fc20 	bl	8007c14 <USBH_SetCfg>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f040 80ca 	bne.w	8007570 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2209      	movs	r2, #9
 80073e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80073e2:	e0c5      	b.n	8007570 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00b      	beq.n	800740a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80073f2:	2101      	movs	r1, #1
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fc30 	bl	8007c5a <USBH_SetFeature>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f040 80b9 	bne.w	8007574 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	220a      	movs	r2, #10
 8007406:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007408:	e0b4      	b.n	8007574 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	220a      	movs	r2, #10
 800740e:	701a      	strb	r2, [r3, #0]
      break;
 8007410:	e0b0      	b.n	8007574 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007418:	2b00      	cmp	r3, #0
 800741a:	f000 80ad 	beq.w	8007578 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007426:	2300      	movs	r3, #0
 8007428:	73fb      	strb	r3, [r7, #15]
 800742a:	e016      	b.n	800745a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800742c:	7bfa      	ldrb	r2, [r7, #15]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32de      	adds	r2, #222	; 0xde
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	791a      	ldrb	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800743e:	429a      	cmp	r2, r3
 8007440:	d108      	bne.n	8007454 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007442:	7bfa      	ldrb	r2, [r7, #15]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	32de      	adds	r2, #222	; 0xde
 8007448:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007452:	e005      	b.n	8007460 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007454:	7bfb      	ldrb	r3, [r7, #15]
 8007456:	3301      	adds	r3, #1
 8007458:	73fb      	strb	r3, [r7, #15]
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d0e5      	beq.n	800742c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007466:	2b00      	cmp	r3, #0
 8007468:	d016      	beq.n	8007498 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	4798      	blx	r3
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d109      	bne.n	8007490 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2206      	movs	r2, #6
 8007480:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007488:	2103      	movs	r1, #3
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800748e:	e073      	b.n	8007578 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	220d      	movs	r2, #13
 8007494:	701a      	strb	r2, [r3, #0]
      break;
 8007496:	e06f      	b.n	8007578 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	220d      	movs	r2, #13
 800749c:	701a      	strb	r2, [r3, #0]
      break;
 800749e:	e06b      	b.n	8007578 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d017      	beq.n	80074da <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	4798      	blx	r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80074ba:	7bbb      	ldrb	r3, [r7, #14]
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d103      	bne.n	80074ca <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	220b      	movs	r2, #11
 80074c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80074c8:	e058      	b.n	800757c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80074ca:	7bbb      	ldrb	r3, [r7, #14]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b02      	cmp	r3, #2
 80074d0:	d154      	bne.n	800757c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	220d      	movs	r2, #13
 80074d6:	701a      	strb	r2, [r3, #0]
      break;
 80074d8:	e050      	b.n	800757c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	220d      	movs	r2, #13
 80074de:	701a      	strb	r2, [r3, #0]
      break;
 80074e0:	e04c      	b.n	800757c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d049      	beq.n	8007580 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	4798      	blx	r3
      }
      break;
 80074f8:	e042      	b.n	8007580 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7ff fd72 	bl	8006fec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800750e:	2b00      	cmp	r3, #0
 8007510:	d009      	beq.n	8007526 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007518:	68db      	ldr	r3, [r3, #12]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d005      	beq.n	800753c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007536:	2105      	movs	r1, #5
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007542:	b2db      	uxtb	r3, r3
 8007544:	2b01      	cmp	r3, #1
 8007546:	d107      	bne.n	8007558 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2200      	movs	r2, #0
 800754c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f7ff fe2b 	bl	80071ac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007556:	e014      	b.n	8007582 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f9b5 	bl	80088c8 <USBH_LL_Start>
      break;
 800755e:	e010      	b.n	8007582 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007560:	bf00      	nop
 8007562:	e00e      	b.n	8007582 <USBH_Process+0x3b6>
      break;
 8007564:	bf00      	nop
 8007566:	e00c      	b.n	8007582 <USBH_Process+0x3b6>
      break;
 8007568:	bf00      	nop
 800756a:	e00a      	b.n	8007582 <USBH_Process+0x3b6>
    break;
 800756c:	bf00      	nop
 800756e:	e008      	b.n	8007582 <USBH_Process+0x3b6>
      break;
 8007570:	bf00      	nop
 8007572:	e006      	b.n	8007582 <USBH_Process+0x3b6>
      break;
 8007574:	bf00      	nop
 8007576:	e004      	b.n	8007582 <USBH_Process+0x3b6>
      break;
 8007578:	bf00      	nop
 800757a:	e002      	b.n	8007582 <USBH_Process+0x3b6>
      break;
 800757c:	bf00      	nop
 800757e:	e000      	b.n	8007582 <USBH_Process+0x3b6>
      break;
 8007580:	bf00      	nop
  }
  return USBH_OK;
 8007582:	2300      	movs	r3, #0
}
 8007584:	4618      	mov	r0, r3
 8007586:	3710      	adds	r7, #16
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}

0800758c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af04      	add	r7, sp, #16
 8007592:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007594:	2301      	movs	r3, #1
 8007596:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007598:	2301      	movs	r3, #1
 800759a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	785b      	ldrb	r3, [r3, #1]
 80075a0:	2b07      	cmp	r3, #7
 80075a2:	f200 81c1 	bhi.w	8007928 <USBH_HandleEnum+0x39c>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <USBH_HandleEnum+0x20>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075cd 	.word	0x080075cd
 80075b0:	0800768b 	.word	0x0800768b
 80075b4:	080076f5 	.word	0x080076f5
 80075b8:	08007783 	.word	0x08007783
 80075bc:	080077ed 	.word	0x080077ed
 80075c0:	0800785d 	.word	0x0800785d
 80075c4:	080078a3 	.word	0x080078a3
 80075c8:	080078e9 	.word	0x080078e9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80075cc:	2108      	movs	r1, #8
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 fa50 	bl	8007a74 <USBH_Get_DevDesc>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80075d8:	7bbb      	ldrb	r3, [r7, #14]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d130      	bne.n	8007640 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	7919      	ldrb	r1, [r3, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007602:	b292      	uxth	r2, r2
 8007604:	9202      	str	r2, [sp, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	9201      	str	r2, [sp, #4]
 800760a:	9300      	str	r3, [sp, #0]
 800760c:	4603      	mov	r3, r0
 800760e:	2280      	movs	r2, #128	; 0x80
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 ff77 	bl	8008504 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	7959      	ldrb	r1, [r3, #5]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007626:	687a      	ldr	r2, [r7, #4]
 8007628:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800762a:	b292      	uxth	r2, r2
 800762c:	9202      	str	r2, [sp, #8]
 800762e:	2200      	movs	r2, #0
 8007630:	9201      	str	r2, [sp, #4]
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	4603      	mov	r3, r0
 8007636:	2200      	movs	r2, #0
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f000 ff63 	bl	8008504 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800763e:	e175      	b.n	800792c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007640:	7bbb      	ldrb	r3, [r7, #14]
 8007642:	2b03      	cmp	r3, #3
 8007644:	f040 8172 	bne.w	800792c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800764e:	3301      	adds	r3, #1
 8007650:	b2da      	uxtb	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800765e:	2b03      	cmp	r3, #3
 8007660:	d903      	bls.n	800766a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	220d      	movs	r2, #13
 8007666:	701a      	strb	r2, [r3, #0]
      break;
 8007668:	e160      	b.n	800792c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	795b      	ldrb	r3, [r3, #5]
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 ff97 	bl	80085a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	791b      	ldrb	r3, [r3, #4]
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 ff91 	bl	80085a4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]
      break;
 8007688:	e150      	b.n	800792c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800768a:	2112      	movs	r1, #18
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f9f1 	bl	8007a74 <USBH_Get_DevDesc>
 8007692:	4603      	mov	r3, r0
 8007694:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2202      	movs	r2, #2
 80076a0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80076a2:	e145      	b.n	8007930 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
 80076a6:	2b03      	cmp	r3, #3
 80076a8:	f040 8142 	bne.w	8007930 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076b2:	3301      	adds	r3, #1
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80076c2:	2b03      	cmp	r3, #3
 80076c4:	d903      	bls.n	80076ce <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	220d      	movs	r2, #13
 80076ca:	701a      	strb	r2, [r3, #0]
      break;
 80076cc:	e130      	b.n	8007930 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	795b      	ldrb	r3, [r3, #5]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f000 ff65 	bl	80085a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	791b      	ldrb	r3, [r3, #4]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 ff5f 	bl	80085a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	701a      	strb	r2, [r3, #0]
      break;
 80076f2:	e11d      	b.n	8007930 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80076f4:	2101      	movs	r1, #1
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fa68 	bl	8007bcc <USBH_SetAddress>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007700:	7bbb      	ldrb	r3, [r7, #14]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d132      	bne.n	800776c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007706:	2002      	movs	r0, #2
 8007708:	f001 fa42 	bl	8008b90 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2203      	movs	r2, #3
 8007718:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	7919      	ldrb	r1, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800772a:	687a      	ldr	r2, [r7, #4]
 800772c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800772e:	b292      	uxth	r2, r2
 8007730:	9202      	str	r2, [sp, #8]
 8007732:	2200      	movs	r2, #0
 8007734:	9201      	str	r2, [sp, #4]
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	4603      	mov	r3, r0
 800773a:	2280      	movs	r2, #128	; 0x80
 800773c:	6878      	ldr	r0, [r7, #4]
 800773e:	f000 fee1 	bl	8008504 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	7959      	ldrb	r1, [r3, #5]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007756:	b292      	uxth	r2, r2
 8007758:	9202      	str	r2, [sp, #8]
 800775a:	2200      	movs	r2, #0
 800775c:	9201      	str	r2, [sp, #4]
 800775e:	9300      	str	r3, [sp, #0]
 8007760:	4603      	mov	r3, r0
 8007762:	2200      	movs	r2, #0
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fecd 	bl	8008504 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800776a:	e0e3      	b.n	8007934 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800776c:	7bbb      	ldrb	r3, [r7, #14]
 800776e:	2b03      	cmp	r3, #3
 8007770:	f040 80e0 	bne.w	8007934 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	220d      	movs	r2, #13
 8007778:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	705a      	strb	r2, [r3, #1]
      break;
 8007780:	e0d8      	b.n	8007934 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007782:	2109      	movs	r1, #9
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f99d 	bl	8007ac4 <USBH_Get_CfgDesc>
 800778a:	4603      	mov	r3, r0
 800778c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800778e:	7bbb      	ldrb	r3, [r7, #14]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d103      	bne.n	800779c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2204      	movs	r2, #4
 8007798:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800779a:	e0cd      	b.n	8007938 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800779c:	7bbb      	ldrb	r3, [r7, #14]
 800779e:	2b03      	cmp	r3, #3
 80077a0:	f040 80ca 	bne.w	8007938 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077aa:	3301      	adds	r3, #1
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80077ba:	2b03      	cmp	r3, #3
 80077bc:	d903      	bls.n	80077c6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	220d      	movs	r2, #13
 80077c2:	701a      	strb	r2, [r3, #0]
      break;
 80077c4:	e0b8      	b.n	8007938 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	795b      	ldrb	r3, [r3, #5]
 80077ca:	4619      	mov	r1, r3
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fee9 	bl	80085a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	791b      	ldrb	r3, [r3, #4]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fee3 	bl	80085a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2200      	movs	r2, #0
 80077e2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	701a      	strb	r2, [r3, #0]
      break;
 80077ea:	e0a5      	b.n	8007938 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f965 	bl	8007ac4 <USBH_Get_CfgDesc>
 80077fa:	4603      	mov	r3, r0
 80077fc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80077fe:	7bbb      	ldrb	r3, [r7, #14]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d103      	bne.n	800780c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2205      	movs	r2, #5
 8007808:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800780a:	e097      	b.n	800793c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	2b03      	cmp	r3, #3
 8007810:	f040 8094 	bne.w	800793c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800781a:	3301      	adds	r3, #1
 800781c:	b2da      	uxtb	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800782a:	2b03      	cmp	r3, #3
 800782c:	d903      	bls.n	8007836 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	220d      	movs	r2, #13
 8007832:	701a      	strb	r2, [r3, #0]
      break;
 8007834:	e082      	b.n	800793c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	795b      	ldrb	r3, [r3, #5]
 800783a:	4619      	mov	r1, r3
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 feb1 	bl	80085a4 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	791b      	ldrb	r3, [r3, #4]
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 feab 	bl	80085a4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2200      	movs	r2, #0
 8007852:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	701a      	strb	r2, [r3, #0]
      break;
 800785a:	e06f      	b.n	800793c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007862:	2b00      	cmp	r3, #0
 8007864:	d019      	beq.n	800789a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007872:	23ff      	movs	r3, #255	; 0xff
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 f949 	bl	8007b0c <USBH_Get_StringDesc>
 800787a:	4603      	mov	r3, r0
 800787c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800787e:	7bbb      	ldrb	r3, [r7, #14]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d103      	bne.n	800788c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2206      	movs	r2, #6
 8007888:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800788a:	e059      	b.n	8007940 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800788c:	7bbb      	ldrb	r3, [r7, #14]
 800788e:	2b03      	cmp	r3, #3
 8007890:	d156      	bne.n	8007940 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2206      	movs	r2, #6
 8007896:	705a      	strb	r2, [r3, #1]
      break;
 8007898:	e052      	b.n	8007940 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2206      	movs	r2, #6
 800789e:	705a      	strb	r2, [r3, #1]
      break;
 80078a0:	e04e      	b.n	8007940 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d019      	beq.n	80078e0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80078b8:	23ff      	movs	r3, #255	; 0xff
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f926 	bl	8007b0c <USBH_Get_StringDesc>
 80078c0:	4603      	mov	r3, r0
 80078c2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d103      	bne.n	80078d2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2207      	movs	r2, #7
 80078ce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80078d0:	e038      	b.n	8007944 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d135      	bne.n	8007944 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2207      	movs	r2, #7
 80078dc:	705a      	strb	r2, [r3, #1]
      break;
 80078de:	e031      	b.n	8007944 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2207      	movs	r2, #7
 80078e4:	705a      	strb	r2, [r3, #1]
      break;
 80078e6:	e02d      	b.n	8007944 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d017      	beq.n	8007922 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80078fe:	23ff      	movs	r3, #255	; 0xff
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f903 	bl	8007b0c <USBH_Get_StringDesc>
 8007906:	4603      	mov	r3, r0
 8007908:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007914:	e018      	b.n	8007948 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	2b03      	cmp	r3, #3
 800791a:	d115      	bne.n	8007948 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	73fb      	strb	r3, [r7, #15]
      break;
 8007920:	e012      	b.n	8007948 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007922:	2300      	movs	r3, #0
 8007924:	73fb      	strb	r3, [r7, #15]
      break;
 8007926:	e00f      	b.n	8007948 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007928:	bf00      	nop
 800792a:	e00e      	b.n	800794a <USBH_HandleEnum+0x3be>
      break;
 800792c:	bf00      	nop
 800792e:	e00c      	b.n	800794a <USBH_HandleEnum+0x3be>
      break;
 8007930:	bf00      	nop
 8007932:	e00a      	b.n	800794a <USBH_HandleEnum+0x3be>
      break;
 8007934:	bf00      	nop
 8007936:	e008      	b.n	800794a <USBH_HandleEnum+0x3be>
      break;
 8007938:	bf00      	nop
 800793a:	e006      	b.n	800794a <USBH_HandleEnum+0x3be>
      break;
 800793c:	bf00      	nop
 800793e:	e004      	b.n	800794a <USBH_HandleEnum+0x3be>
      break;
 8007940:	bf00      	nop
 8007942:	e002      	b.n	800794a <USBH_HandleEnum+0x3be>
      break;
 8007944:	bf00      	nop
 8007946:	e000      	b.n	800794a <USBH_HandleEnum+0x3be>
      break;
 8007948:	bf00      	nop
  }
  return Status;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	683a      	ldr	r2, [r7, #0]
 8007962:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007980:	1c5a      	adds	r2, r3, #1
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f804 	bl	8007996 <USBH_HandleSof>
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b0b      	cmp	r3, #11
 80079a6:	d10a      	bne.n	80079be <USBH_HandleSof+0x28>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d005      	beq.n	80079be <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	4798      	blx	r3
  }
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}

080079c6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80079c6:	b480      	push	{r7}
 80079c8:	b083      	sub	sp, #12
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2201      	movs	r2, #1
 80079d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 80079d6:	bf00      	nop
}
 80079d8:	370c      	adds	r7, #12
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr

080079e2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80079e2:	b480      	push	{r7}
 80079e4:	b083      	sub	sp, #12
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80079f2:	bf00      	nop
}
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr

080079fe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80079fe:	b480      	push	{r7}
 8007a00:	b083      	sub	sp, #12
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 ff56 	bl	80088fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	791b      	ldrb	r3, [r3, #4]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 fda3 	bl	80085a4 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	795b      	ldrb	r3, [r3, #5]
 8007a62:	4619      	mov	r1, r3
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	f000 fd9d 	bl	80085a4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3708      	adds	r7, #8
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af02      	add	r7, sp, #8
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a92:	2100      	movs	r1, #0
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 f864 	bl	8007b62 <USBH_GetDescriptor>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007ab0:	78fa      	ldrb	r2, [r7, #3]
 8007ab2:	b292      	uxth	r2, r2
 8007ab4:	4619      	mov	r1, r3
 8007ab6:	f000 f918 	bl	8007cea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	460b      	mov	r3, r1
 8007ace:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	331c      	adds	r3, #28
 8007ad4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ad6:	887b      	ldrh	r3, [r7, #2]
 8007ad8:	9300      	str	r3, [sp, #0]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f83d 	bl	8007b62 <USBH_GetDescriptor>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	72fb      	strb	r3, [r7, #11]
 8007aec:	7afb      	ldrb	r3, [r7, #11]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d107      	bne.n	8007b02 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007af8:	887a      	ldrh	r2, [r7, #2]
 8007afa:	68f9      	ldr	r1, [r7, #12]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f000 f964 	bl	8007dca <USBH_ParseCfgDesc>
  }

  return status;
 8007b02:	7afb      	ldrb	r3, [r7, #11]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af02      	add	r7, sp, #8
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	607a      	str	r2, [r7, #4]
 8007b16:	461a      	mov	r2, r3
 8007b18:	460b      	mov	r3, r1
 8007b1a:	72fb      	strb	r3, [r7, #11]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007b28:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007b30:	893b      	ldrh	r3, [r7, #8]
 8007b32:	9300      	str	r3, [sp, #0]
 8007b34:	460b      	mov	r3, r1
 8007b36:	2100      	movs	r1, #0
 8007b38:	68f8      	ldr	r0, [r7, #12]
 8007b3a:	f000 f812 	bl	8007b62 <USBH_GetDescriptor>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	75fb      	strb	r3, [r7, #23]
 8007b42:	7dfb      	ldrb	r3, [r7, #23]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d107      	bne.n	8007b58 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007b4e:	893a      	ldrh	r2, [r7, #8]
 8007b50:	6879      	ldr	r1, [r7, #4]
 8007b52:	4618      	mov	r0, r3
 8007b54:	f000 fa37 	bl	8007fc6 <USBH_ParseStringDesc>
  }

  return status;
 8007b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3718      	adds	r7, #24
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	607b      	str	r3, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	72fb      	strb	r3, [r7, #11]
 8007b70:	4613      	mov	r3, r2
 8007b72:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	789b      	ldrb	r3, [r3, #2]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d11c      	bne.n	8007bb6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007b7c:	7afb      	ldrb	r3, [r7, #11]
 8007b7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007b82:	b2da      	uxtb	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2206      	movs	r2, #6
 8007b8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	893a      	ldrh	r2, [r7, #8]
 8007b92:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007b94:	893b      	ldrh	r3, [r7, #8]
 8007b96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b9e:	d104      	bne.n	8007baa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f240 4209 	movw	r2, #1033	; 0x409
 8007ba6:	829a      	strh	r2, [r3, #20]
 8007ba8:	e002      	b.n	8007bb0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2200      	movs	r2, #0
 8007bae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8b3a      	ldrh	r2, [r7, #24]
 8007bb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007bb6:	8b3b      	ldrh	r3, [r7, #24]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	6879      	ldr	r1, [r7, #4]
 8007bbc:	68f8      	ldr	r0, [r7, #12]
 8007bbe:	f000 fa50 	bl	8008062 <USBH_CtlReq>
 8007bc2:	4603      	mov	r3, r0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	789b      	ldrb	r3, [r3, #2]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d10f      	bne.n	8007c00 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2205      	movs	r2, #5
 8007bea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007bec:	78fb      	ldrb	r3, [r7, #3]
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c00:	2200      	movs	r2, #0
 8007c02:	2100      	movs	r1, #0
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa2c 	bl	8008062 <USBH_CtlReq>
 8007c0a:	4603      	mov	r3, r0
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b082      	sub	sp, #8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	789b      	ldrb	r3, [r3, #2]
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d10e      	bne.n	8007c46 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2209      	movs	r2, #9
 8007c32:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	887a      	ldrh	r2, [r7, #2]
 8007c38:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c46:	2200      	movs	r2, #0
 8007c48:	2100      	movs	r1, #0
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fa09 	bl	8008062 <USBH_CtlReq>
 8007c50:	4603      	mov	r3, r0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3708      	adds	r7, #8
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}

08007c5a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007c5a:	b580      	push	{r7, lr}
 8007c5c:	b082      	sub	sp, #8
 8007c5e:	af00      	add	r7, sp, #0
 8007c60:	6078      	str	r0, [r7, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	789b      	ldrb	r3, [r3, #2]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d10f      	bne.n	8007c8e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2203      	movs	r2, #3
 8007c78:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007c7a:	78fb      	ldrb	r3, [r7, #3]
 8007c7c:	b29a      	uxth	r2, r3
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8007c8e:	2200      	movs	r2, #0
 8007c90:	2100      	movs	r1, #0
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 f9e5 	bl	8008062 <USBH_CtlReq>
 8007c98:	4603      	mov	r3, r0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	789b      	ldrb	r3, [r3, #2]
 8007cb2:	2b01      	cmp	r3, #1
 8007cb4:	d10f      	bne.n	8007cd6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2202      	movs	r2, #2
 8007cba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	2100      	movs	r1, #0
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f9c1 	bl	8008062 <USBH_CtlReq>
 8007ce0:	4603      	mov	r3, r0
}
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	3708      	adds	r7, #8
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b085      	sub	sp, #20
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	60f8      	str	r0, [r7, #12]
 8007cf2:	60b9      	str	r1, [r7, #8]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	781a      	ldrb	r2, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	785a      	ldrb	r2, [r3, #1]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	3302      	adds	r3, #2
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	b29a      	uxth	r2, r3
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	3303      	adds	r3, #3
 8007d14:	781b      	ldrb	r3, [r3, #0]
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	021b      	lsls	r3, r3, #8
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	791a      	ldrb	r2, [r3, #4]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	795a      	ldrb	r2, [r3, #5]
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	799a      	ldrb	r2, [r3, #6]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	79da      	ldrb	r2, [r3, #7]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d939      	bls.n	8007dbe <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	3308      	adds	r3, #8
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	3309      	adds	r3, #9
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8007d66:	68bb      	ldr	r3, [r7, #8]
 8007d68:	330a      	adds	r3, #10
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	330b      	adds	r3, #11
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	021b      	lsls	r3, r3, #8
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	330c      	adds	r3, #12
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	330d      	adds	r3, #13
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	021b      	lsls	r3, r3, #8
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	4313      	orrs	r3, r2
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	7b9a      	ldrb	r2, [r3, #14]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	7bda      	ldrb	r2, [r3, #15]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	7c1a      	ldrb	r2, [r3, #16]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	7c5a      	ldrb	r2, [r3, #17]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	745a      	strb	r2, [r3, #17]
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr

08007dca <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b08a      	sub	sp, #40	; 0x28
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	60b9      	str	r1, [r7, #8]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	781a      	ldrb	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	785a      	ldrb	r2, [r3, #1]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	3302      	adds	r3, #2
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	b29a      	uxth	r2, r3
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	3303      	adds	r3, #3
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	021b      	lsls	r3, r3, #8
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	4313      	orrs	r3, r2
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	791a      	ldrb	r2, [r3, #4]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	795a      	ldrb	r2, [r3, #5]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	799a      	ldrb	r2, [r3, #6]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	79da      	ldrb	r2, [r3, #7]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	7a1a      	ldrb	r2, [r3, #8]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8007e40:	88fb      	ldrh	r3, [r7, #6]
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	d95f      	bls.n	8007f06 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8007e46:	2309      	movs	r3, #9
 8007e48:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007e4e:	e051      	b.n	8007ef4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e50:	f107 0316 	add.w	r3, r7, #22
 8007e54:	4619      	mov	r1, r3
 8007e56:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e58:	f000 f8e8 	bl	800802c <USBH_GetNextDesc>
 8007e5c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e60:	785b      	ldrb	r3, [r3, #1]
 8007e62:	2b04      	cmp	r3, #4
 8007e64:	d146      	bne.n	8007ef4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8007e66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007e6a:	221a      	movs	r2, #26
 8007e6c:	fb02 f303 	mul.w	r3, r2, r3
 8007e70:	3308      	adds	r3, #8
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	4413      	add	r3, r2
 8007e76:	3302      	adds	r3, #2
 8007e78:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007e7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007e7c:	69f8      	ldr	r0, [r7, #28]
 8007e7e:	f000 f846 	bl	8007f0e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007e8c:	e022      	b.n	8007ed4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007e8e:	f107 0316 	add.w	r3, r7, #22
 8007e92:	4619      	mov	r1, r3
 8007e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e96:	f000 f8c9 	bl	800802c <USBH_GetNextDesc>
 8007e9a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8007e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b05      	cmp	r3, #5
 8007ea2:	d117      	bne.n	8007ed4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007ea4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ea8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007eac:	3201      	adds	r2, #1
 8007eae:	00d2      	lsls	r2, r2, #3
 8007eb0:	211a      	movs	r1, #26
 8007eb2:	fb01 f303 	mul.w	r3, r1, r3
 8007eb6:	4413      	add	r3, r2
 8007eb8:	3308      	adds	r3, #8
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 8007ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ec4:	69b8      	ldr	r0, [r7, #24]
 8007ec6:	f000 f851 	bl	8007f6c <USBH_ParseEPDesc>
            ep_ix++;
 8007eca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8007ece:	3301      	adds	r3, #1
 8007ed0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	791b      	ldrb	r3, [r3, #4]
 8007ed8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d204      	bcs.n	8007eea <USBH_ParseCfgDesc+0x120>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	885a      	ldrh	r2, [r3, #2]
 8007ee4:	8afb      	ldrh	r3, [r7, #22]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d8d1      	bhi.n	8007e8e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8007eea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eee:	3301      	adds	r3, #1
 8007ef0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d804      	bhi.n	8007f06 <USBH_ParseCfgDesc+0x13c>
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	885a      	ldrh	r2, [r3, #2]
 8007f00:	8afb      	ldrh	r3, [r7, #22]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d8a4      	bhi.n	8007e50 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8007f06:	bf00      	nop
 8007f08:	3728      	adds	r7, #40	; 0x28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007f0e:	b480      	push	{r7}
 8007f10:	b083      	sub	sp, #12
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
 8007f16:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781a      	ldrb	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	785a      	ldrb	r2, [r3, #1]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	789a      	ldrb	r2, [r3, #2]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	78da      	ldrb	r2, [r3, #3]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	791a      	ldrb	r2, [r3, #4]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	795a      	ldrb	r2, [r3, #5]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	799a      	ldrb	r2, [r3, #6]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	79da      	ldrb	r2, [r3, #7]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	7a1a      	ldrb	r2, [r3, #8]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	721a      	strb	r2, [r3, #8]
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	785a      	ldrb	r2, [r3, #1]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	789a      	ldrb	r2, [r3, #2]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	78da      	ldrb	r2, [r3, #3]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	3305      	adds	r3, #5
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	b29b      	uxth	r3, r3
 8007fa6:	021b      	lsls	r3, r3, #8
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	4313      	orrs	r3, r2
 8007fac:	b29a      	uxth	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	799a      	ldrb	r2, [r3, #6]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	719a      	strb	r2, [r3, #6]
}
 8007fba:	bf00      	nop
 8007fbc:	370c      	adds	r7, #12
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b087      	sub	sp, #28
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	4613      	mov	r3, r2
 8007fd2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	781b      	ldrb	r3, [r3, #0]
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d120      	bne.n	8008020 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	1e9a      	subs	r2, r3, #2
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	bf28      	it	cs
 8007fea:	4613      	movcs	r3, r2
 8007fec:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	82fb      	strh	r3, [r7, #22]
 8007ff8:	e00b      	b.n	8008012 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007ffa:	8afb      	ldrh	r3, [r7, #22]
 8007ffc:	68fa      	ldr	r2, [r7, #12]
 8007ffe:	4413      	add	r3, r2
 8008000:	781a      	ldrb	r2, [r3, #0]
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	3301      	adds	r3, #1
 800800a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800800c:	8afb      	ldrh	r3, [r7, #22]
 800800e:	3302      	adds	r3, #2
 8008010:	82fb      	strh	r3, [r7, #22]
 8008012:	8afa      	ldrh	r2, [r7, #22]
 8008014:	8abb      	ldrh	r3, [r7, #20]
 8008016:	429a      	cmp	r2, r3
 8008018:	d3ef      	bcc.n	8007ffa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2200      	movs	r2, #0
 800801e:	701a      	strb	r2, [r3, #0]
  }
}
 8008020:	bf00      	nop
 8008022:	371c      	adds	r7, #28
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	881a      	ldrh	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	781b      	ldrb	r3, [r3, #0]
 800803e:	b29b      	uxth	r3, r3
 8008040:	4413      	add	r3, r2
 8008042:	b29a      	uxth	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4413      	add	r3, r2
 8008052:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008054:	68fb      	ldr	r3, [r7, #12]
}
 8008056:	4618      	mov	r0, r3
 8008058:	3714      	adds	r7, #20
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr

08008062 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b086      	sub	sp, #24
 8008066:	af00      	add	r7, sp, #0
 8008068:	60f8      	str	r0, [r7, #12]
 800806a:	60b9      	str	r1, [r7, #8]
 800806c:	4613      	mov	r3, r2
 800806e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008070:	2301      	movs	r3, #1
 8008072:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	789b      	ldrb	r3, [r3, #2]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d002      	beq.n	8008082 <USBH_CtlReq+0x20>
 800807c:	2b02      	cmp	r3, #2
 800807e:	d00f      	beq.n	80080a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008080:	e027      	b.n	80080d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	68ba      	ldr	r2, [r7, #8]
 8008086:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	88fa      	ldrh	r2, [r7, #6]
 800808c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2201      	movs	r2, #1
 8008092:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2202      	movs	r2, #2
 8008098:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800809a:	2301      	movs	r3, #1
 800809c:	75fb      	strb	r3, [r7, #23]
      break;
 800809e:	e018      	b.n	80080d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f81b 	bl	80080dc <USBH_HandleControl>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80080aa:	7dfb      	ldrb	r3, [r7, #23]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d002      	beq.n	80080b6 <USBH_CtlReq+0x54>
 80080b0:	7dfb      	ldrb	r3, [r7, #23]
 80080b2:	2b03      	cmp	r3, #3
 80080b4:	d106      	bne.n	80080c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2201      	movs	r2, #1
 80080ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	2200      	movs	r2, #0
 80080c0:	761a      	strb	r2, [r3, #24]
      break;
 80080c2:	e005      	b.n	80080d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80080c4:	7dfb      	ldrb	r3, [r7, #23]
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d102      	bne.n	80080d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2201      	movs	r2, #1
 80080ce:	709a      	strb	r2, [r3, #2]
      break;
 80080d0:	bf00      	nop
  }
  return status;
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}

080080dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af02      	add	r7, sp, #8
 80080e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80080e4:	2301      	movs	r3, #1
 80080e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80080e8:	2300      	movs	r3, #0
 80080ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	7e1b      	ldrb	r3, [r3, #24]
 80080f0:	3b01      	subs	r3, #1
 80080f2:	2b0a      	cmp	r3, #10
 80080f4:	f200 8156 	bhi.w	80083a4 <USBH_HandleControl+0x2c8>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <USBH_HandleControl+0x24>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	0800812d 	.word	0x0800812d
 8008104:	08008147 	.word	0x08008147
 8008108:	080081b1 	.word	0x080081b1
 800810c:	080081d7 	.word	0x080081d7
 8008110:	0800820f 	.word	0x0800820f
 8008114:	08008239 	.word	0x08008239
 8008118:	0800828b 	.word	0x0800828b
 800811c:	080082ad 	.word	0x080082ad
 8008120:	080082e9 	.word	0x080082e9
 8008124:	0800830f 	.word	0x0800830f
 8008128:	0800834d 	.word	0x0800834d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f103 0110 	add.w	r1, r3, #16
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	795b      	ldrb	r3, [r3, #5]
 8008136:	461a      	mov	r2, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 f943 	bl	80083c4 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	761a      	strb	r2, [r3, #24]
      break;
 8008144:	e139      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	795b      	ldrb	r3, [r3, #5]
 800814a:	4619      	mov	r1, r3
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fcc5 	bl	8008adc <USBH_LL_GetURBState>
 8008152:	4603      	mov	r3, r0
 8008154:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d11e      	bne.n	800819a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	7c1b      	ldrb	r3, [r3, #16]
 8008160:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008164:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	8adb      	ldrh	r3, [r3, #22]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00a      	beq.n	8008184 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800816e:	7b7b      	ldrb	r3, [r7, #13]
 8008170:	2b80      	cmp	r3, #128	; 0x80
 8008172:	d103      	bne.n	800817c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2203      	movs	r2, #3
 8008178:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800817a:	e115      	b.n	80083a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2205      	movs	r2, #5
 8008180:	761a      	strb	r2, [r3, #24]
      break;
 8008182:	e111      	b.n	80083a8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008184:	7b7b      	ldrb	r3, [r7, #13]
 8008186:	2b80      	cmp	r3, #128	; 0x80
 8008188:	d103      	bne.n	8008192 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2209      	movs	r2, #9
 800818e:	761a      	strb	r2, [r3, #24]
      break;
 8008190:	e10a      	b.n	80083a8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2207      	movs	r2, #7
 8008196:	761a      	strb	r2, [r3, #24]
      break;
 8008198:	e106      	b.n	80083a8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800819a:	7bbb      	ldrb	r3, [r7, #14]
 800819c:	2b04      	cmp	r3, #4
 800819e:	d003      	beq.n	80081a8 <USBH_HandleControl+0xcc>
 80081a0:	7bbb      	ldrb	r3, [r7, #14]
 80081a2:	2b02      	cmp	r3, #2
 80081a4:	f040 8100 	bne.w	80083a8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	220b      	movs	r2, #11
 80081ac:	761a      	strb	r2, [r3, #24]
      break;
 80081ae:	e0fb      	b.n	80083a8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6899      	ldr	r1, [r3, #8]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	899a      	ldrh	r2, [r3, #12]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	791b      	ldrb	r3, [r3, #4]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f93a 	bl	8008442 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2204      	movs	r2, #4
 80081d2:	761a      	strb	r2, [r3, #24]
      break;
 80081d4:	e0f1      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	791b      	ldrb	r3, [r3, #4]
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fc7d 	bl	8008adc <USBH_LL_GetURBState>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80081e6:	7bbb      	ldrb	r3, [r7, #14]
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d102      	bne.n	80081f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2209      	movs	r2, #9
 80081f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b05      	cmp	r3, #5
 80081f6:	d102      	bne.n	80081fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80081f8:	2303      	movs	r3, #3
 80081fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081fc:	e0d6      	b.n	80083ac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80081fe:	7bbb      	ldrb	r3, [r7, #14]
 8008200:	2b04      	cmp	r3, #4
 8008202:	f040 80d3 	bne.w	80083ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	220b      	movs	r2, #11
 800820a:	761a      	strb	r2, [r3, #24]
      break;
 800820c:	e0ce      	b.n	80083ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6899      	ldr	r1, [r3, #8]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	899a      	ldrh	r2, [r3, #12]
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	795b      	ldrb	r3, [r3, #5]
 800821a:	2001      	movs	r0, #1
 800821c:	9000      	str	r0, [sp, #0]
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f8ea 	bl	80083f8 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800822a:	b29a      	uxth	r2, r3
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2206      	movs	r2, #6
 8008234:	761a      	strb	r2, [r3, #24]
      break;
 8008236:	e0c0      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	795b      	ldrb	r3, [r3, #5]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 fc4c 	bl	8008adc <USBH_LL_GetURBState>
 8008244:	4603      	mov	r3, r0
 8008246:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008248:	7bbb      	ldrb	r3, [r7, #14]
 800824a:	2b01      	cmp	r3, #1
 800824c:	d103      	bne.n	8008256 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2207      	movs	r2, #7
 8008252:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008254:	e0ac      	b.n	80083b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008256:	7bbb      	ldrb	r3, [r7, #14]
 8008258:	2b05      	cmp	r3, #5
 800825a:	d105      	bne.n	8008268 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	220c      	movs	r2, #12
 8008260:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008262:	2303      	movs	r3, #3
 8008264:	73fb      	strb	r3, [r7, #15]
      break;
 8008266:	e0a3      	b.n	80083b0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008268:	7bbb      	ldrb	r3, [r7, #14]
 800826a:	2b02      	cmp	r3, #2
 800826c:	d103      	bne.n	8008276 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2205      	movs	r2, #5
 8008272:	761a      	strb	r2, [r3, #24]
      break;
 8008274:	e09c      	b.n	80083b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008276:	7bbb      	ldrb	r3, [r7, #14]
 8008278:	2b04      	cmp	r3, #4
 800827a:	f040 8099 	bne.w	80083b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	220b      	movs	r2, #11
 8008282:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008284:	2302      	movs	r3, #2
 8008286:	73fb      	strb	r3, [r7, #15]
      break;
 8008288:	e092      	b.n	80083b0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	2100      	movs	r1, #0
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f8d5 	bl	8008442 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800829e:	b29a      	uxth	r2, r3
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2208      	movs	r2, #8
 80082a8:	761a      	strb	r2, [r3, #24]

      break;
 80082aa:	e086      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	791b      	ldrb	r3, [r3, #4]
 80082b0:	4619      	mov	r1, r3
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fc12 	bl	8008adc <USBH_LL_GetURBState>
 80082b8:	4603      	mov	r3, r0
 80082ba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80082bc:	7bbb      	ldrb	r3, [r7, #14]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d105      	bne.n	80082ce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	220d      	movs	r2, #13
 80082c6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80082c8:	2300      	movs	r3, #0
 80082ca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082cc:	e072      	b.n	80083b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d103      	bne.n	80082dc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	220b      	movs	r2, #11
 80082d8:	761a      	strb	r2, [r3, #24]
      break;
 80082da:	e06b      	b.n	80083b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80082dc:	7bbb      	ldrb	r3, [r7, #14]
 80082de:	2b05      	cmp	r3, #5
 80082e0:	d168      	bne.n	80083b4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80082e2:	2303      	movs	r3, #3
 80082e4:	73fb      	strb	r3, [r7, #15]
      break;
 80082e6:	e065      	b.n	80083b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	795b      	ldrb	r3, [r3, #5]
 80082ec:	2201      	movs	r2, #1
 80082ee:	9200      	str	r2, [sp, #0]
 80082f0:	2200      	movs	r2, #0
 80082f2:	2100      	movs	r1, #0
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f87f 	bl	80083f8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008300:	b29a      	uxth	r2, r3
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	220a      	movs	r2, #10
 800830a:	761a      	strb	r2, [r3, #24]
      break;
 800830c:	e055      	b.n	80083ba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	795b      	ldrb	r3, [r3, #5]
 8008312:	4619      	mov	r1, r3
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	f000 fbe1 	bl	8008adc <USBH_LL_GetURBState>
 800831a:	4603      	mov	r3, r0
 800831c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800831e:	7bbb      	ldrb	r3, [r7, #14]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d105      	bne.n	8008330 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008324:	2300      	movs	r3, #0
 8008326:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	220d      	movs	r2, #13
 800832c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800832e:	e043      	b.n	80083b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008330:	7bbb      	ldrb	r3, [r7, #14]
 8008332:	2b02      	cmp	r3, #2
 8008334:	d103      	bne.n	800833e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2209      	movs	r2, #9
 800833a:	761a      	strb	r2, [r3, #24]
      break;
 800833c:	e03c      	b.n	80083b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	2b04      	cmp	r3, #4
 8008342:	d139      	bne.n	80083b8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	220b      	movs	r2, #11
 8008348:	761a      	strb	r2, [r3, #24]
      break;
 800834a:	e035      	b.n	80083b8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	7e5b      	ldrb	r3, [r3, #25]
 8008350:	3301      	adds	r3, #1
 8008352:	b2da      	uxtb	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	765a      	strb	r2, [r3, #25]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7e5b      	ldrb	r3, [r3, #25]
 800835c:	2b02      	cmp	r3, #2
 800835e:	d806      	bhi.n	800836e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800836c:	e025      	b.n	80083ba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008374:	2106      	movs	r1, #6
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	795b      	ldrb	r3, [r3, #5]
 8008384:	4619      	mov	r1, r3
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 f90c 	bl	80085a4 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	791b      	ldrb	r3, [r3, #4]
 8008390:	4619      	mov	r1, r3
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 f906 	bl	80085a4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800839e:	2302      	movs	r3, #2
 80083a0:	73fb      	strb	r3, [r7, #15]
      break;
 80083a2:	e00a      	b.n	80083ba <USBH_HandleControl+0x2de>

    default:
      break;
 80083a4:	bf00      	nop
 80083a6:	e008      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083a8:	bf00      	nop
 80083aa:	e006      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083ac:	bf00      	nop
 80083ae:	e004      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083b0:	bf00      	nop
 80083b2:	e002      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083b4:	bf00      	nop
 80083b6:	e000      	b.n	80083ba <USBH_HandleControl+0x2de>
      break;
 80083b8:	bf00      	nop
  }

  return status;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af04      	add	r7, sp, #16
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	4613      	mov	r3, r2
 80083d0:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80083d2:	79f9      	ldrb	r1, [r7, #7]
 80083d4:	2300      	movs	r3, #0
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	2308      	movs	r3, #8
 80083da:	9302      	str	r3, [sp, #8]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	2300      	movs	r3, #0
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	2300      	movs	r3, #0
 80083e6:	2200      	movs	r2, #0
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 fb46 	bl	8008a7a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b088      	sub	sp, #32
 80083fc:	af04      	add	r7, sp, #16
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	4611      	mov	r1, r2
 8008404:	461a      	mov	r2, r3
 8008406:	460b      	mov	r3, r1
 8008408:	80fb      	strh	r3, [r7, #6]
 800840a:	4613      	mov	r3, r2
 800840c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008414:	2b00      	cmp	r3, #0
 8008416:	d001      	beq.n	800841c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800841c:	7979      	ldrb	r1, [r7, #5]
 800841e:	7e3b      	ldrb	r3, [r7, #24]
 8008420:	9303      	str	r3, [sp, #12]
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	9302      	str	r3, [sp, #8]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	9301      	str	r3, [sp, #4]
 800842a:	2301      	movs	r3, #1
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	2300      	movs	r3, #0
 8008430:	2200      	movs	r2, #0
 8008432:	68f8      	ldr	r0, [r7, #12]
 8008434:	f000 fb21 	bl	8008a7a <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008442:	b580      	push	{r7, lr}
 8008444:	b088      	sub	sp, #32
 8008446:	af04      	add	r7, sp, #16
 8008448:	60f8      	str	r0, [r7, #12]
 800844a:	60b9      	str	r1, [r7, #8]
 800844c:	4611      	mov	r1, r2
 800844e:	461a      	mov	r2, r3
 8008450:	460b      	mov	r3, r1
 8008452:	80fb      	strh	r3, [r7, #6]
 8008454:	4613      	mov	r3, r2
 8008456:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008458:	7979      	ldrb	r1, [r7, #5]
 800845a:	2300      	movs	r3, #0
 800845c:	9303      	str	r3, [sp, #12]
 800845e:	88fb      	ldrh	r3, [r7, #6]
 8008460:	9302      	str	r3, [sp, #8]
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	9301      	str	r3, [sp, #4]
 8008466:	2301      	movs	r3, #1
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	2300      	movs	r3, #0
 800846c:	2201      	movs	r2, #1
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 fb03 	bl	8008a7a <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008474:	2300      	movs	r3, #0

}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b088      	sub	sp, #32
 8008482:	af04      	add	r7, sp, #16
 8008484:	60f8      	str	r0, [r7, #12]
 8008486:	60b9      	str	r1, [r7, #8]
 8008488:	4611      	mov	r1, r2
 800848a:	461a      	mov	r2, r3
 800848c:	460b      	mov	r3, r1
 800848e:	80fb      	strh	r3, [r7, #6]
 8008490:	4613      	mov	r3, r2
 8008492:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800849e:	2300      	movs	r3, #0
 80084a0:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084a2:	7979      	ldrb	r1, [r7, #5]
 80084a4:	7e3b      	ldrb	r3, [r7, #24]
 80084a6:	9303      	str	r3, [sp, #12]
 80084a8:	88fb      	ldrh	r3, [r7, #6]
 80084aa:	9302      	str	r3, [sp, #8]
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	2301      	movs	r3, #1
 80084b2:	9300      	str	r3, [sp, #0]
 80084b4:	2302      	movs	r3, #2
 80084b6:	2200      	movs	r2, #0
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fade 	bl	8008a7a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80084be:	2300      	movs	r3, #0
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3710      	adds	r7, #16
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af04      	add	r7, sp, #16
 80084ce:	60f8      	str	r0, [r7, #12]
 80084d0:	60b9      	str	r1, [r7, #8]
 80084d2:	4611      	mov	r1, r2
 80084d4:	461a      	mov	r2, r3
 80084d6:	460b      	mov	r3, r1
 80084d8:	80fb      	strh	r3, [r7, #6]
 80084da:	4613      	mov	r3, r2
 80084dc:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80084de:	7979      	ldrb	r1, [r7, #5]
 80084e0:	2300      	movs	r3, #0
 80084e2:	9303      	str	r3, [sp, #12]
 80084e4:	88fb      	ldrh	r3, [r7, #6]
 80084e6:	9302      	str	r3, [sp, #8]
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	9301      	str	r3, [sp, #4]
 80084ec:	2301      	movs	r3, #1
 80084ee:	9300      	str	r3, [sp, #0]
 80084f0:	2302      	movs	r3, #2
 80084f2:	2201      	movs	r2, #1
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 fac0 	bl	8008a7a <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af04      	add	r7, sp, #16
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	4608      	mov	r0, r1
 800850e:	4611      	mov	r1, r2
 8008510:	461a      	mov	r2, r3
 8008512:	4603      	mov	r3, r0
 8008514:	70fb      	strb	r3, [r7, #3]
 8008516:	460b      	mov	r3, r1
 8008518:	70bb      	strb	r3, [r7, #2]
 800851a:	4613      	mov	r3, r2
 800851c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800851e:	7878      	ldrb	r0, [r7, #1]
 8008520:	78ba      	ldrb	r2, [r7, #2]
 8008522:	78f9      	ldrb	r1, [r7, #3]
 8008524:	8b3b      	ldrh	r3, [r7, #24]
 8008526:	9302      	str	r3, [sp, #8]
 8008528:	7d3b      	ldrb	r3, [r7, #20]
 800852a:	9301      	str	r3, [sp, #4]
 800852c:	7c3b      	ldrb	r3, [r7, #16]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	4603      	mov	r3, r0
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fa53 	bl	80089de <USBH_LL_OpenPipe>

  return USBH_OK;
 8008538:	2300      	movs	r3, #0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}

08008542 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008542:	b580      	push	{r7, lr}
 8008544:	b082      	sub	sp, #8
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800854e:	78fb      	ldrb	r3, [r7, #3]
 8008550:	4619      	mov	r1, r3
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fa72 	bl	8008a3c <USBH_LL_ClosePipe>

  return USBH_OK;
 8008558:	2300      	movs	r3, #0
}
 800855a:	4618      	mov	r0, r3
 800855c:	3708      	adds	r7, #8
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008562:	b580      	push	{r7, lr}
 8008564:	b084      	sub	sp, #16
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	460b      	mov	r3, r1
 800856c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 f836 	bl	80085e0 <USBH_GetFreePipe>
 8008574:	4603      	mov	r3, r0
 8008576:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008578:	89fb      	ldrh	r3, [r7, #14]
 800857a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800857e:	4293      	cmp	r3, r2
 8008580:	d00a      	beq.n	8008598 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008582:	78fa      	ldrb	r2, [r7, #3]
 8008584:	89fb      	ldrh	r3, [r7, #14]
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	33e0      	adds	r3, #224	; 0xe0
 8008592:	009b      	lsls	r3, r3, #2
 8008594:	440b      	add	r3, r1
 8008596:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008598:	89fb      	ldrh	r3, [r7, #14]
 800859a:	b2db      	uxtb	r3, r3
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80085b0:	78fb      	ldrb	r3, [r7, #3]
 80085b2:	2b0a      	cmp	r3, #10
 80085b4:	d80d      	bhi.n	80085d2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80085b6:	78fb      	ldrb	r3, [r7, #3]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	33e0      	adds	r3, #224	; 0xe0
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80085c8:	6879      	ldr	r1, [r7, #4]
 80085ca:	33e0      	adds	r3, #224	; 0xe0
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	440b      	add	r3, r1
 80085d0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	370c      	adds	r7, #12
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e00f      	b.n	8008612 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	33e0      	adds	r3, #224	; 0xe0
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008602:	2b00      	cmp	r3, #0
 8008604:	d102      	bne.n	800860c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	b29b      	uxth	r3, r3
 800860a:	e007      	b.n	800861c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	3301      	adds	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	2b0a      	cmp	r3, #10
 8008616:	d9ec      	bls.n	80085f2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008618:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800861c:	4618      	mov	r0, r3
 800861e:	3714      	adds	r7, #20
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr

08008628 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800862c:	2201      	movs	r2, #1
 800862e:	490e      	ldr	r1, [pc, #56]	; (8008668 <MX_USB_HOST_Init+0x40>)
 8008630:	480e      	ldr	r0, [pc, #56]	; (800866c <MX_USB_HOST_Init+0x44>)
 8008632:	f7fe fca1 	bl	8006f78 <USBH_Init>
 8008636:	4603      	mov	r3, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800863c:	f7f8 f9f6 	bl	8000a2c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008640:	490b      	ldr	r1, [pc, #44]	; (8008670 <MX_USB_HOST_Init+0x48>)
 8008642:	480a      	ldr	r0, [pc, #40]	; (800866c <MX_USB_HOST_Init+0x44>)
 8008644:	f7fe fd26 	bl	8007094 <USBH_RegisterClass>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800864e:	f7f8 f9ed 	bl	8000a2c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008652:	4806      	ldr	r0, [pc, #24]	; (800866c <MX_USB_HOST_Init+0x44>)
 8008654:	f7fe fdaa 	bl	80071ac <USBH_Start>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800865e:	f7f8 f9e5 	bl	8000a2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008662:	bf00      	nop
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	08008689 	.word	0x08008689
 800866c:	20000204 	.word	0x20000204
 8008670:	2000000c 	.word	0x2000000c

08008674 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008678:	4802      	ldr	r0, [pc, #8]	; (8008684 <MX_USB_HOST_Process+0x10>)
 800867a:	f7fe fda7 	bl	80071cc <USBH_Process>
}
 800867e:	bf00      	nop
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000204 	.word	0x20000204

08008688 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
 8008690:	460b      	mov	r3, r1
 8008692:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008694:	78fb      	ldrb	r3, [r7, #3]
 8008696:	3b01      	subs	r3, #1
 8008698:	2b04      	cmp	r3, #4
 800869a:	d819      	bhi.n	80086d0 <USBH_UserProcess+0x48>
 800869c:	a201      	add	r2, pc, #4	; (adr r2, 80086a4 <USBH_UserProcess+0x1c>)
 800869e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086a2:	bf00      	nop
 80086a4:	080086d1 	.word	0x080086d1
 80086a8:	080086c1 	.word	0x080086c1
 80086ac:	080086d1 	.word	0x080086d1
 80086b0:	080086c9 	.word	0x080086c9
 80086b4:	080086b9 	.word	0x080086b9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80086b8:	4b09      	ldr	r3, [pc, #36]	; (80086e0 <USBH_UserProcess+0x58>)
 80086ba:	2203      	movs	r2, #3
 80086bc:	701a      	strb	r2, [r3, #0]
  break;
 80086be:	e008      	b.n	80086d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80086c0:	4b07      	ldr	r3, [pc, #28]	; (80086e0 <USBH_UserProcess+0x58>)
 80086c2:	2202      	movs	r2, #2
 80086c4:	701a      	strb	r2, [r3, #0]
  break;
 80086c6:	e004      	b.n	80086d2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80086c8:	4b05      	ldr	r3, [pc, #20]	; (80086e0 <USBH_UserProcess+0x58>)
 80086ca:	2201      	movs	r2, #1
 80086cc:	701a      	strb	r2, [r3, #0]
  break;
 80086ce:	e000      	b.n	80086d2 <USBH_UserProcess+0x4a>

  default:
  break;
 80086d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80086d2:	bf00      	nop
 80086d4:	370c      	adds	r7, #12
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	200000b8 	.word	0x200000b8

080086e4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b08a      	sub	sp, #40	; 0x28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086ec:	f107 0314 	add.w	r3, r7, #20
 80086f0:	2200      	movs	r2, #0
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	605a      	str	r2, [r3, #4]
 80086f6:	609a      	str	r2, [r3, #8]
 80086f8:	60da      	str	r2, [r3, #12]
 80086fa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008704:	d147      	bne.n	8008796 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008706:	2300      	movs	r3, #0
 8008708:	613b      	str	r3, [r7, #16]
 800870a:	4b25      	ldr	r3, [pc, #148]	; (80087a0 <HAL_HCD_MspInit+0xbc>)
 800870c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800870e:	4a24      	ldr	r2, [pc, #144]	; (80087a0 <HAL_HCD_MspInit+0xbc>)
 8008710:	f043 0301 	orr.w	r3, r3, #1
 8008714:	6313      	str	r3, [r2, #48]	; 0x30
 8008716:	4b22      	ldr	r3, [pc, #136]	; (80087a0 <HAL_HCD_MspInit+0xbc>)
 8008718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	613b      	str	r3, [r7, #16]
 8008720:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008722:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008726:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008728:	2300      	movs	r3, #0
 800872a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800872c:	2300      	movs	r3, #0
 800872e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008730:	f107 0314 	add.w	r3, r7, #20
 8008734:	4619      	mov	r1, r3
 8008736:	481b      	ldr	r0, [pc, #108]	; (80087a4 <HAL_HCD_MspInit+0xc0>)
 8008738:	f7f8 fd98 	bl	800126c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800873c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008742:	2302      	movs	r3, #2
 8008744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008746:	2300      	movs	r3, #0
 8008748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800874a:	2300      	movs	r3, #0
 800874c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800874e:	230a      	movs	r3, #10
 8008750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008752:	f107 0314 	add.w	r3, r7, #20
 8008756:	4619      	mov	r1, r3
 8008758:	4812      	ldr	r0, [pc, #72]	; (80087a4 <HAL_HCD_MspInit+0xc0>)
 800875a:	f7f8 fd87 	bl	800126c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800875e:	4b10      	ldr	r3, [pc, #64]	; (80087a0 <HAL_HCD_MspInit+0xbc>)
 8008760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008762:	4a0f      	ldr	r2, [pc, #60]	; (80087a0 <HAL_HCD_MspInit+0xbc>)
 8008764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008768:	6353      	str	r3, [r2, #52]	; 0x34
 800876a:	2300      	movs	r3, #0
 800876c:	60fb      	str	r3, [r7, #12]
 800876e:	4b0c      	ldr	r3, [pc, #48]	; (80087a0 <HAL_HCD_MspInit+0xbc>)
 8008770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008772:	4a0b      	ldr	r2, [pc, #44]	; (80087a0 <HAL_HCD_MspInit+0xbc>)
 8008774:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008778:	6453      	str	r3, [r2, #68]	; 0x44
 800877a:	4b09      	ldr	r3, [pc, #36]	; (80087a0 <HAL_HCD_MspInit+0xbc>)
 800877c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800877e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008786:	2200      	movs	r2, #0
 8008788:	2100      	movs	r1, #0
 800878a:	2043      	movs	r0, #67	; 0x43
 800878c:	f7f8 fd37 	bl	80011fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008790:	2043      	movs	r0, #67	; 0x43
 8008792:	f7f8 fd50 	bl	8001236 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008796:	bf00      	nop
 8008798:	3728      	adds	r7, #40	; 0x28
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	40023800 	.word	0x40023800
 80087a4:	40020000 	.word	0x40020000

080087a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff f8db 	bl	8007972 <USBH_LL_IncTimer>
}
 80087bc:	bf00      	nop
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff f913 	bl	80079fe <USBH_LL_Connect>
}
 80087d8:	bf00      	nop
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}

080087e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff f91c 	bl	8007a2c <USBH_LL_Disconnect>
}
 80087f4:	bf00      	nop
 80087f6:	3708      	adds	r7, #8
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	460b      	mov	r3, r1
 8008806:	70fb      	strb	r3, [r7, #3]
 8008808:	4613      	mov	r3, r2
 800880a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800880c:	bf00      	nop
 800880e:	370c      	adds	r7, #12
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b082      	sub	sp, #8
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008826:	4618      	mov	r0, r3
 8008828:	f7ff f8cd 	bl	80079c6 <USBH_LL_PortEnabled>
}
 800882c:	bf00      	nop
 800882e:	3708      	adds	r7, #8
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008842:	4618      	mov	r0, r3
 8008844:	f7ff f8cd 	bl	80079e2 <USBH_LL_PortDisabled>
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800885e:	2b01      	cmp	r3, #1
 8008860:	d12a      	bne.n	80088b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008862:	4a18      	ldr	r2, [pc, #96]	; (80088c4 <USBH_LL_Init+0x74>)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4a15      	ldr	r2, [pc, #84]	; (80088c4 <USBH_LL_Init+0x74>)
 800886e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008872:	4b14      	ldr	r3, [pc, #80]	; (80088c4 <USBH_LL_Init+0x74>)
 8008874:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008878:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800887a:	4b12      	ldr	r3, [pc, #72]	; (80088c4 <USBH_LL_Init+0x74>)
 800887c:	2208      	movs	r2, #8
 800887e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008880:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <USBH_LL_Init+0x74>)
 8008882:	2201      	movs	r2, #1
 8008884:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008886:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <USBH_LL_Init+0x74>)
 8008888:	2200      	movs	r2, #0
 800888a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800888c:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <USBH_LL_Init+0x74>)
 800888e:	2202      	movs	r2, #2
 8008890:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008892:	4b0c      	ldr	r3, [pc, #48]	; (80088c4 <USBH_LL_Init+0x74>)
 8008894:	2200      	movs	r2, #0
 8008896:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008898:	480a      	ldr	r0, [pc, #40]	; (80088c4 <USBH_LL_Init+0x74>)
 800889a:	f7f8 feb6 	bl	800160a <HAL_HCD_Init>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80088a4:	f7f8 f8c2 	bl	8000a2c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80088a8:	4806      	ldr	r0, [pc, #24]	; (80088c4 <USBH_LL_Init+0x74>)
 80088aa:	f7f9 fa93 	bl	8001dd4 <HAL_HCD_GetCurrentFrame>
 80088ae:	4603      	mov	r3, r0
 80088b0:	4619      	mov	r1, r3
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7ff f84e 	bl	8007954 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3708      	adds	r7, #8
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	200005dc 	.word	0x200005dc

080088c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088d0:	2300      	movs	r3, #0
 80088d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088de:	4618      	mov	r0, r3
 80088e0:	f7f9 fa02 	bl	8001ce8 <HAL_HCD_Start>
 80088e4:	4603      	mov	r3, r0
 80088e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 f95c 	bl	8008ba8 <USBH_Get_USB_Status>
 80088f0:	4603      	mov	r3, r0
 80088f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b084      	sub	sp, #16
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008906:	2300      	movs	r3, #0
 8008908:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800890a:	2300      	movs	r3, #0
 800890c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008914:	4618      	mov	r0, r3
 8008916:	f7f9 fa0a 	bl	8001d2e <HAL_HCD_Stop>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800891e:	7bfb      	ldrb	r3, [r7, #15]
 8008920:	4618      	mov	r0, r3
 8008922:	f000 f941 	bl	8008ba8 <USBH_Get_USB_Status>
 8008926:	4603      	mov	r3, r0
 8008928:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800892a:	7bbb      	ldrb	r3, [r7, #14]
}
 800892c:	4618      	mov	r0, r3
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b084      	sub	sp, #16
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800893c:	2301      	movs	r3, #1
 800893e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008946:	4618      	mov	r0, r3
 8008948:	f7f9 fa52 	bl	8001df0 <HAL_HCD_GetCurrentSpeed>
 800894c:	4603      	mov	r3, r0
 800894e:	2b02      	cmp	r3, #2
 8008950:	d00c      	beq.n	800896c <USBH_LL_GetSpeed+0x38>
 8008952:	2b02      	cmp	r3, #2
 8008954:	d80d      	bhi.n	8008972 <USBH_LL_GetSpeed+0x3e>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d002      	beq.n	8008960 <USBH_LL_GetSpeed+0x2c>
 800895a:	2b01      	cmp	r3, #1
 800895c:	d003      	beq.n	8008966 <USBH_LL_GetSpeed+0x32>
 800895e:	e008      	b.n	8008972 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]
    break;
 8008964:	e008      	b.n	8008978 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008966:	2301      	movs	r3, #1
 8008968:	73fb      	strb	r3, [r7, #15]
    break;
 800896a:	e005      	b.n	8008978 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800896c:	2302      	movs	r3, #2
 800896e:	73fb      	strb	r3, [r7, #15]
    break;
 8008970:	e002      	b.n	8008978 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008972:	2301      	movs	r3, #1
 8008974:	73fb      	strb	r3, [r7, #15]
    break;
 8008976:	bf00      	nop
  }
  return  speed;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008998:	4618      	mov	r0, r3
 800899a:	f7f9 f9e5 	bl	8001d68 <HAL_HCD_ResetPort>
 800899e:	4603      	mov	r3, r0
 80089a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	4618      	mov	r0, r3
 80089a6:	f000 f8ff 	bl	8008ba8 <USBH_Get_USB_Status>
 80089aa:	4603      	mov	r3, r0
 80089ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	4611      	mov	r1, r2
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7f9 f9ec 	bl	8001dac <HAL_HCD_HC_GetXferCount>
 80089d4:	4603      	mov	r3, r0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3708      	adds	r7, #8
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80089de:	b590      	push	{r4, r7, lr}
 80089e0:	b089      	sub	sp, #36	; 0x24
 80089e2:	af04      	add	r7, sp, #16
 80089e4:	6078      	str	r0, [r7, #4]
 80089e6:	4608      	mov	r0, r1
 80089e8:	4611      	mov	r1, r2
 80089ea:	461a      	mov	r2, r3
 80089ec:	4603      	mov	r3, r0
 80089ee:	70fb      	strb	r3, [r7, #3]
 80089f0:	460b      	mov	r3, r1
 80089f2:	70bb      	strb	r3, [r7, #2]
 80089f4:	4613      	mov	r3, r2
 80089f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089f8:	2300      	movs	r3, #0
 80089fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008a06:	787c      	ldrb	r4, [r7, #1]
 8008a08:	78ba      	ldrb	r2, [r7, #2]
 8008a0a:	78f9      	ldrb	r1, [r7, #3]
 8008a0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008a0e:	9302      	str	r3, [sp, #8]
 8008a10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a14:	9301      	str	r3, [sp, #4]
 8008a16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008a1a:	9300      	str	r3, [sp, #0]
 8008a1c:	4623      	mov	r3, r4
 8008a1e:	f7f8 fe56 	bl	80016ce <HAL_HCD_HC_Init>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a26:	7bfb      	ldrb	r3, [r7, #15]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f000 f8bd 	bl	8008ba8 <USBH_Get_USB_Status>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a32:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3714      	adds	r7, #20
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd90      	pop	{r4, r7, pc}

08008a3c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a56:	78fa      	ldrb	r2, [r7, #3]
 8008a58:	4611      	mov	r1, r2
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7f8 fec6 	bl	80017ec <HAL_HCD_HC_Halt>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008a64:	7bfb      	ldrb	r3, [r7, #15]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 f89e 	bl	8008ba8 <USBH_Get_USB_Status>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a70:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008a7a:	b590      	push	{r4, r7, lr}
 8008a7c:	b089      	sub	sp, #36	; 0x24
 8008a7e:	af04      	add	r7, sp, #16
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	4608      	mov	r0, r1
 8008a84:	4611      	mov	r1, r2
 8008a86:	461a      	mov	r2, r3
 8008a88:	4603      	mov	r3, r0
 8008a8a:	70fb      	strb	r3, [r7, #3]
 8008a8c:	460b      	mov	r3, r1
 8008a8e:	70bb      	strb	r3, [r7, #2]
 8008a90:	4613      	mov	r3, r2
 8008a92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008aa2:	787c      	ldrb	r4, [r7, #1]
 8008aa4:	78ba      	ldrb	r2, [r7, #2]
 8008aa6:	78f9      	ldrb	r1, [r7, #3]
 8008aa8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008aac:	9303      	str	r3, [sp, #12]
 8008aae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008ab0:	9302      	str	r3, [sp, #8]
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab4:	9301      	str	r3, [sp, #4]
 8008ab6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	4623      	mov	r3, r4
 8008abe:	f7f8 feb9 	bl	8001834 <HAL_HCD_HC_SubmitRequest>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 f86d 	bl	8008ba8 <USBH_Get_USB_Status>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3714      	adds	r7, #20
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd90      	pop	{r4, r7, pc}

08008adc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b082      	sub	sp, #8
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008aee:	78fa      	ldrb	r2, [r7, #3]
 8008af0:	4611      	mov	r1, r2
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7f9 f946 	bl	8001d84 <HAL_HCD_HC_GetURBState>
 8008af8:	4603      	mov	r3, r0
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008b02:	b580      	push	{r7, lr}
 8008b04:	b082      	sub	sp, #8
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d103      	bne.n	8008b20 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f000 f870 	bl	8008c00 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008b20:	20c8      	movs	r0, #200	; 0xc8
 8008b22:	f7f8 fa6d 	bl	8001000 <HAL_Delay>
  return USBH_OK;
 8008b26:	2300      	movs	r3, #0
}
 8008b28:	4618      	mov	r0, r3
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008b30:	b480      	push	{r7}
 8008b32:	b085      	sub	sp, #20
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	70fb      	strb	r3, [r7, #3]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008b46:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	212c      	movs	r1, #44	; 0x2c
 8008b4e:	fb01 f303 	mul.w	r3, r1, r3
 8008b52:	4413      	add	r3, r2
 8008b54:	333b      	adds	r3, #59	; 0x3b
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008b5c:	78fb      	ldrb	r3, [r7, #3]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	212c      	movs	r1, #44	; 0x2c
 8008b62:	fb01 f303 	mul.w	r3, r1, r3
 8008b66:	4413      	add	r3, r2
 8008b68:	3354      	adds	r3, #84	; 0x54
 8008b6a:	78ba      	ldrb	r2, [r7, #2]
 8008b6c:	701a      	strb	r2, [r3, #0]
 8008b6e:	e008      	b.n	8008b82 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	212c      	movs	r1, #44	; 0x2c
 8008b76:	fb01 f303 	mul.w	r3, r1, r3
 8008b7a:	4413      	add	r3, r2
 8008b7c:	3355      	adds	r3, #85	; 0x55
 8008b7e:	78ba      	ldrb	r2, [r7, #2]
 8008b80:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008b82:	2300      	movs	r3, #0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3714      	adds	r7, #20
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr

08008b90 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b082      	sub	sp, #8
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7f8 fa31 	bl	8001000 <HAL_Delay>
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
	...

08008ba8 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	4603      	mov	r3, r0
 8008bb0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d817      	bhi.n	8008bec <USBH_Get_USB_Status+0x44>
 8008bbc:	a201      	add	r2, pc, #4	; (adr r2, 8008bc4 <USBH_Get_USB_Status+0x1c>)
 8008bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bc2:	bf00      	nop
 8008bc4:	08008bd5 	.word	0x08008bd5
 8008bc8:	08008bdb 	.word	0x08008bdb
 8008bcc:	08008be1 	.word	0x08008be1
 8008bd0:	08008be7 	.word	0x08008be7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008bd8:	e00b      	b.n	8008bf2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008bda:	2302      	movs	r3, #2
 8008bdc:	73fb      	strb	r3, [r7, #15]
    break;
 8008bde:	e008      	b.n	8008bf2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008be0:	2301      	movs	r3, #1
 8008be2:	73fb      	strb	r3, [r7, #15]
    break;
 8008be4:	e005      	b.n	8008bf2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008be6:	2302      	movs	r3, #2
 8008be8:	73fb      	strb	r3, [r7, #15]
    break;
 8008bea:	e002      	b.n	8008bf2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008bec:	2302      	movs	r3, #2
 8008bee:	73fb      	strb	r3, [r7, #15]
    break;
 8008bf0:	bf00      	nop
  }
  return usb_status;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	4603      	mov	r3, r0
 8008c08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008c0a:	79fb      	ldrb	r3, [r7, #7]
 8008c0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008c0e:	79fb      	ldrb	r3, [r7, #7]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d102      	bne.n	8008c1a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8008c14:	2301      	movs	r3, #1
 8008c16:	73fb      	strb	r3, [r7, #15]
 8008c18:	e001      	b.n	8008c1e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	461a      	mov	r2, r3
 8008c22:	2101      	movs	r1, #1
 8008c24:	4803      	ldr	r0, [pc, #12]	; (8008c34 <MX_DriverVbusFS+0x34>)
 8008c26:	f7f8 fcbd 	bl	80015a4 <HAL_GPIO_WritePin>
}
 8008c2a:	bf00      	nop
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	40020800 	.word	0x40020800

08008c38 <__errno>:
 8008c38:	4b01      	ldr	r3, [pc, #4]	; (8008c40 <__errno+0x8>)
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	2000002c 	.word	0x2000002c

08008c44 <__libc_init_array>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	4d0d      	ldr	r5, [pc, #52]	; (8008c7c <__libc_init_array+0x38>)
 8008c48:	4c0d      	ldr	r4, [pc, #52]	; (8008c80 <__libc_init_array+0x3c>)
 8008c4a:	1b64      	subs	r4, r4, r5
 8008c4c:	10a4      	asrs	r4, r4, #2
 8008c4e:	2600      	movs	r6, #0
 8008c50:	42a6      	cmp	r6, r4
 8008c52:	d109      	bne.n	8008c68 <__libc_init_array+0x24>
 8008c54:	4d0b      	ldr	r5, [pc, #44]	; (8008c84 <__libc_init_array+0x40>)
 8008c56:	4c0c      	ldr	r4, [pc, #48]	; (8008c88 <__libc_init_array+0x44>)
 8008c58:	f000 f8f8 	bl	8008e4c <_init>
 8008c5c:	1b64      	subs	r4, r4, r5
 8008c5e:	10a4      	asrs	r4, r4, #2
 8008c60:	2600      	movs	r6, #0
 8008c62:	42a6      	cmp	r6, r4
 8008c64:	d105      	bne.n	8008c72 <__libc_init_array+0x2e>
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c6c:	4798      	blx	r3
 8008c6e:	3601      	adds	r6, #1
 8008c70:	e7ee      	b.n	8008c50 <__libc_init_array+0xc>
 8008c72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c76:	4798      	blx	r3
 8008c78:	3601      	adds	r6, #1
 8008c7a:	e7f2      	b.n	8008c62 <__libc_init_array+0x1e>
 8008c7c:	08008e88 	.word	0x08008e88
 8008c80:	08008e88 	.word	0x08008e88
 8008c84:	08008e88 	.word	0x08008e88
 8008c88:	08008e8c 	.word	0x08008e8c

08008c8c <malloc>:
 8008c8c:	4b02      	ldr	r3, [pc, #8]	; (8008c98 <malloc+0xc>)
 8008c8e:	4601      	mov	r1, r0
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	f000 b863 	b.w	8008d5c <_malloc_r>
 8008c96:	bf00      	nop
 8008c98:	2000002c 	.word	0x2000002c

08008c9c <free>:
 8008c9c:	4b02      	ldr	r3, [pc, #8]	; (8008ca8 <free+0xc>)
 8008c9e:	4601      	mov	r1, r0
 8008ca0:	6818      	ldr	r0, [r3, #0]
 8008ca2:	f000 b80b 	b.w	8008cbc <_free_r>
 8008ca6:	bf00      	nop
 8008ca8:	2000002c 	.word	0x2000002c

08008cac <memset>:
 8008cac:	4402      	add	r2, r0
 8008cae:	4603      	mov	r3, r0
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d100      	bne.n	8008cb6 <memset+0xa>
 8008cb4:	4770      	bx	lr
 8008cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cba:	e7f9      	b.n	8008cb0 <memset+0x4>

08008cbc <_free_r>:
 8008cbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cbe:	2900      	cmp	r1, #0
 8008cc0:	d048      	beq.n	8008d54 <_free_r+0x98>
 8008cc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cc6:	9001      	str	r0, [sp, #4]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	f1a1 0404 	sub.w	r4, r1, #4
 8008cce:	bfb8      	it	lt
 8008cd0:	18e4      	addlt	r4, r4, r3
 8008cd2:	f000 f8ad 	bl	8008e30 <__malloc_lock>
 8008cd6:	4a20      	ldr	r2, [pc, #128]	; (8008d58 <_free_r+0x9c>)
 8008cd8:	9801      	ldr	r0, [sp, #4]
 8008cda:	6813      	ldr	r3, [r2, #0]
 8008cdc:	4615      	mov	r5, r2
 8008cde:	b933      	cbnz	r3, 8008cee <_free_r+0x32>
 8008ce0:	6063      	str	r3, [r4, #4]
 8008ce2:	6014      	str	r4, [r2, #0]
 8008ce4:	b003      	add	sp, #12
 8008ce6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008cea:	f000 b8a7 	b.w	8008e3c <__malloc_unlock>
 8008cee:	42a3      	cmp	r3, r4
 8008cf0:	d90b      	bls.n	8008d0a <_free_r+0x4e>
 8008cf2:	6821      	ldr	r1, [r4, #0]
 8008cf4:	1862      	adds	r2, r4, r1
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	bf04      	itt	eq
 8008cfa:	681a      	ldreq	r2, [r3, #0]
 8008cfc:	685b      	ldreq	r3, [r3, #4]
 8008cfe:	6063      	str	r3, [r4, #4]
 8008d00:	bf04      	itt	eq
 8008d02:	1852      	addeq	r2, r2, r1
 8008d04:	6022      	streq	r2, [r4, #0]
 8008d06:	602c      	str	r4, [r5, #0]
 8008d08:	e7ec      	b.n	8008ce4 <_free_r+0x28>
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	b10b      	cbz	r3, 8008d14 <_free_r+0x58>
 8008d10:	42a3      	cmp	r3, r4
 8008d12:	d9fa      	bls.n	8008d0a <_free_r+0x4e>
 8008d14:	6811      	ldr	r1, [r2, #0]
 8008d16:	1855      	adds	r5, r2, r1
 8008d18:	42a5      	cmp	r5, r4
 8008d1a:	d10b      	bne.n	8008d34 <_free_r+0x78>
 8008d1c:	6824      	ldr	r4, [r4, #0]
 8008d1e:	4421      	add	r1, r4
 8008d20:	1854      	adds	r4, r2, r1
 8008d22:	42a3      	cmp	r3, r4
 8008d24:	6011      	str	r1, [r2, #0]
 8008d26:	d1dd      	bne.n	8008ce4 <_free_r+0x28>
 8008d28:	681c      	ldr	r4, [r3, #0]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	6053      	str	r3, [r2, #4]
 8008d2e:	4421      	add	r1, r4
 8008d30:	6011      	str	r1, [r2, #0]
 8008d32:	e7d7      	b.n	8008ce4 <_free_r+0x28>
 8008d34:	d902      	bls.n	8008d3c <_free_r+0x80>
 8008d36:	230c      	movs	r3, #12
 8008d38:	6003      	str	r3, [r0, #0]
 8008d3a:	e7d3      	b.n	8008ce4 <_free_r+0x28>
 8008d3c:	6825      	ldr	r5, [r4, #0]
 8008d3e:	1961      	adds	r1, r4, r5
 8008d40:	428b      	cmp	r3, r1
 8008d42:	bf04      	itt	eq
 8008d44:	6819      	ldreq	r1, [r3, #0]
 8008d46:	685b      	ldreq	r3, [r3, #4]
 8008d48:	6063      	str	r3, [r4, #4]
 8008d4a:	bf04      	itt	eq
 8008d4c:	1949      	addeq	r1, r1, r5
 8008d4e:	6021      	streq	r1, [r4, #0]
 8008d50:	6054      	str	r4, [r2, #4]
 8008d52:	e7c7      	b.n	8008ce4 <_free_r+0x28>
 8008d54:	b003      	add	sp, #12
 8008d56:	bd30      	pop	{r4, r5, pc}
 8008d58:	200000bc 	.word	0x200000bc

08008d5c <_malloc_r>:
 8008d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d5e:	1ccd      	adds	r5, r1, #3
 8008d60:	f025 0503 	bic.w	r5, r5, #3
 8008d64:	3508      	adds	r5, #8
 8008d66:	2d0c      	cmp	r5, #12
 8008d68:	bf38      	it	cc
 8008d6a:	250c      	movcc	r5, #12
 8008d6c:	2d00      	cmp	r5, #0
 8008d6e:	4606      	mov	r6, r0
 8008d70:	db01      	blt.n	8008d76 <_malloc_r+0x1a>
 8008d72:	42a9      	cmp	r1, r5
 8008d74:	d903      	bls.n	8008d7e <_malloc_r+0x22>
 8008d76:	230c      	movs	r3, #12
 8008d78:	6033      	str	r3, [r6, #0]
 8008d7a:	2000      	movs	r0, #0
 8008d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d7e:	f000 f857 	bl	8008e30 <__malloc_lock>
 8008d82:	4921      	ldr	r1, [pc, #132]	; (8008e08 <_malloc_r+0xac>)
 8008d84:	680a      	ldr	r2, [r1, #0]
 8008d86:	4614      	mov	r4, r2
 8008d88:	b99c      	cbnz	r4, 8008db2 <_malloc_r+0x56>
 8008d8a:	4f20      	ldr	r7, [pc, #128]	; (8008e0c <_malloc_r+0xb0>)
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	b923      	cbnz	r3, 8008d9a <_malloc_r+0x3e>
 8008d90:	4621      	mov	r1, r4
 8008d92:	4630      	mov	r0, r6
 8008d94:	f000 f83c 	bl	8008e10 <_sbrk_r>
 8008d98:	6038      	str	r0, [r7, #0]
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	f000 f837 	bl	8008e10 <_sbrk_r>
 8008da2:	1c43      	adds	r3, r0, #1
 8008da4:	d123      	bne.n	8008dee <_malloc_r+0x92>
 8008da6:	230c      	movs	r3, #12
 8008da8:	6033      	str	r3, [r6, #0]
 8008daa:	4630      	mov	r0, r6
 8008dac:	f000 f846 	bl	8008e3c <__malloc_unlock>
 8008db0:	e7e3      	b.n	8008d7a <_malloc_r+0x1e>
 8008db2:	6823      	ldr	r3, [r4, #0]
 8008db4:	1b5b      	subs	r3, r3, r5
 8008db6:	d417      	bmi.n	8008de8 <_malloc_r+0x8c>
 8008db8:	2b0b      	cmp	r3, #11
 8008dba:	d903      	bls.n	8008dc4 <_malloc_r+0x68>
 8008dbc:	6023      	str	r3, [r4, #0]
 8008dbe:	441c      	add	r4, r3
 8008dc0:	6025      	str	r5, [r4, #0]
 8008dc2:	e004      	b.n	8008dce <_malloc_r+0x72>
 8008dc4:	6863      	ldr	r3, [r4, #4]
 8008dc6:	42a2      	cmp	r2, r4
 8008dc8:	bf0c      	ite	eq
 8008dca:	600b      	streq	r3, [r1, #0]
 8008dcc:	6053      	strne	r3, [r2, #4]
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f000 f834 	bl	8008e3c <__malloc_unlock>
 8008dd4:	f104 000b 	add.w	r0, r4, #11
 8008dd8:	1d23      	adds	r3, r4, #4
 8008dda:	f020 0007 	bic.w	r0, r0, #7
 8008dde:	1ac2      	subs	r2, r0, r3
 8008de0:	d0cc      	beq.n	8008d7c <_malloc_r+0x20>
 8008de2:	1a1b      	subs	r3, r3, r0
 8008de4:	50a3      	str	r3, [r4, r2]
 8008de6:	e7c9      	b.n	8008d7c <_malloc_r+0x20>
 8008de8:	4622      	mov	r2, r4
 8008dea:	6864      	ldr	r4, [r4, #4]
 8008dec:	e7cc      	b.n	8008d88 <_malloc_r+0x2c>
 8008dee:	1cc4      	adds	r4, r0, #3
 8008df0:	f024 0403 	bic.w	r4, r4, #3
 8008df4:	42a0      	cmp	r0, r4
 8008df6:	d0e3      	beq.n	8008dc0 <_malloc_r+0x64>
 8008df8:	1a21      	subs	r1, r4, r0
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	f000 f808 	bl	8008e10 <_sbrk_r>
 8008e00:	3001      	adds	r0, #1
 8008e02:	d1dd      	bne.n	8008dc0 <_malloc_r+0x64>
 8008e04:	e7cf      	b.n	8008da6 <_malloc_r+0x4a>
 8008e06:	bf00      	nop
 8008e08:	200000bc 	.word	0x200000bc
 8008e0c:	200000c0 	.word	0x200000c0

08008e10 <_sbrk_r>:
 8008e10:	b538      	push	{r3, r4, r5, lr}
 8008e12:	4d06      	ldr	r5, [pc, #24]	; (8008e2c <_sbrk_r+0x1c>)
 8008e14:	2300      	movs	r3, #0
 8008e16:	4604      	mov	r4, r0
 8008e18:	4608      	mov	r0, r1
 8008e1a:	602b      	str	r3, [r5, #0]
 8008e1c:	f7f8 f80c 	bl	8000e38 <_sbrk>
 8008e20:	1c43      	adds	r3, r0, #1
 8008e22:	d102      	bne.n	8008e2a <_sbrk_r+0x1a>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	b103      	cbz	r3, 8008e2a <_sbrk_r+0x1a>
 8008e28:	6023      	str	r3, [r4, #0]
 8008e2a:	bd38      	pop	{r3, r4, r5, pc}
 8008e2c:	200008e0 	.word	0x200008e0

08008e30 <__malloc_lock>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__malloc_lock+0x8>)
 8008e32:	f000 b809 	b.w	8008e48 <__retarget_lock_acquire_recursive>
 8008e36:	bf00      	nop
 8008e38:	200008e8 	.word	0x200008e8

08008e3c <__malloc_unlock>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__malloc_unlock+0x8>)
 8008e3e:	f000 b804 	b.w	8008e4a <__retarget_lock_release_recursive>
 8008e42:	bf00      	nop
 8008e44:	200008e8 	.word	0x200008e8

08008e48 <__retarget_lock_acquire_recursive>:
 8008e48:	4770      	bx	lr

08008e4a <__retarget_lock_release_recursive>:
 8008e4a:	4770      	bx	lr

08008e4c <_init>:
 8008e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4e:	bf00      	nop
 8008e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e52:	bc08      	pop	{r3}
 8008e54:	469e      	mov	lr, r3
 8008e56:	4770      	bx	lr

08008e58 <_fini>:
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	bf00      	nop
 8008e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e5e:	bc08      	pop	{r3}
 8008e60:	469e      	mov	lr, r3
 8008e62:	4770      	bx	lr
