
STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b04c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800b1d4  0800b1d4  0001b1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1f0  0800b1f0  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1f0  0800b1f0  0001b1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1f8  0800b1f8  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1f8  0800b1f8  0001b1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1fc  0800b1fc  0001b1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  0800b200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000984  200000a0  0800b2a0  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a24  0800b2a0  00020a24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024cb5  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004de9  00000000  00000000  00044d85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018f0  00000000  00000000  00049b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001710  00000000  00000000  0004b460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026895  00000000  00000000  0004cb70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023756  00000000  00000000  00073405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5a4f  00000000  00000000  00096b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016c5aa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a6c  00000000  00000000  0016c600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000a0 	.word	0x200000a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b1bc 	.word	0x0800b1bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000a4 	.word	0x200000a4
 80001c4:	0800b1bc 	.word	0x0800b1bc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80004c0:	b590      	push	{r4, r7, lr}
 80004c2:	b08b      	sub	sp, #44	; 0x2c
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	4604      	mov	r4, r0
 80004c8:	4608      	mov	r0, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	461a      	mov	r2, r3
 80004ce:	4623      	mov	r3, r4
 80004d0:	80fb      	strh	r3, [r7, #6]
 80004d2:	4603      	mov	r3, r0
 80004d4:	80bb      	strh	r3, [r7, #4]
 80004d6:	460b      	mov	r3, r1
 80004d8:	807b      	strh	r3, [r7, #2]
 80004da:	4613      	mov	r3, r2
 80004dc:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80004de:	887b      	ldrh	r3, [r7, #2]
 80004e0:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80004e2:	2300      	movs	r3, #0
 80004e4:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80004e6:	887b      	ldrh	r3, [r7, #2]
 80004e8:	005b      	lsls	r3, r3, #1
 80004ea:	f1c3 0301 	rsb	r3, r3, #1
 80004ee:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80004f4:	2300      	movs	r3, #0
 80004f6:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80004f8:	e061      	b.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80004fa:	88fa      	ldrh	r2, [r7, #6]
 80004fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004fe:	1ad3      	subs	r3, r2, r3
 8000500:	613b      	str	r3, [r7, #16]
 8000502:	e018      	b.n	8000536 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8000504:	693b      	ldr	r3, [r7, #16]
 8000506:	b298      	uxth	r0, r3
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	b29a      	uxth	r2, r3
 800050c:	88bb      	ldrh	r3, [r7, #4]
 800050e:	4413      	add	r3, r2
 8000510:	b29b      	uxth	r3, r3
 8000512:	883a      	ldrh	r2, [r7, #0]
 8000514:	4619      	mov	r1, r3
 8000516:	f000 fb47 	bl	8000ba8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800051a:	693b      	ldr	r3, [r7, #16]
 800051c:	b298      	uxth	r0, r3
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	b29b      	uxth	r3, r3
 8000522:	88ba      	ldrh	r2, [r7, #4]
 8000524:	1ad3      	subs	r3, r2, r3
 8000526:	b29b      	uxth	r3, r3
 8000528:	883a      	ldrh	r2, [r7, #0]
 800052a:	4619      	mov	r1, r3
 800052c:	f000 fb3c 	bl	8000ba8 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8000530:	693b      	ldr	r3, [r7, #16]
 8000532:	3301      	adds	r3, #1
 8000534:	613b      	str	r3, [r7, #16]
 8000536:	88fa      	ldrh	r2, [r7, #6]
 8000538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800053a:	4413      	add	r3, r2
 800053c:	693a      	ldr	r2, [r7, #16]
 800053e:	429a      	cmp	r2, r3
 8000540:	dde0      	ble.n	8000504 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8000542:	88fa      	ldrh	r2, [r7, #6]
 8000544:	6a3b      	ldr	r3, [r7, #32]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	60fb      	str	r3, [r7, #12]
 800054a:	e018      	b.n	800057e <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	b298      	uxth	r0, r3
 8000550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000552:	b29a      	uxth	r2, r3
 8000554:	88bb      	ldrh	r3, [r7, #4]
 8000556:	4413      	add	r3, r2
 8000558:	b29b      	uxth	r3, r3
 800055a:	883a      	ldrh	r2, [r7, #0]
 800055c:	4619      	mov	r1, r3
 800055e:	f000 fb23 	bl	8000ba8 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	b298      	uxth	r0, r3
 8000566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000568:	b29b      	uxth	r3, r3
 800056a:	88ba      	ldrh	r2, [r7, #4]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	b29b      	uxth	r3, r3
 8000570:	883a      	ldrh	r2, [r7, #0]
 8000572:	4619      	mov	r1, r3
 8000574:	f000 fb18 	bl	8000ba8 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	88fa      	ldrh	r2, [r7, #6]
 8000580:	6a3b      	ldr	r3, [r7, #32]
 8000582:	4413      	add	r3, r2
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	429a      	cmp	r2, r3
 8000588:	dde0      	ble.n	800054c <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800058a:	6a3b      	ldr	r3, [r7, #32]
 800058c:	3301      	adds	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8000590:	697a      	ldr	r2, [r7, #20]
 8000592:	69bb      	ldr	r3, [r7, #24]
 8000594:	4413      	add	r3, r2
 8000596:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8000598:	69bb      	ldr	r3, [r7, #24]
 800059a:	3302      	adds	r3, #2
 800059c:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	005a      	lsls	r2, r3, #1
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	4413      	add	r3, r2
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	dd09      	ble.n	80005be <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	3b01      	subs	r3, #1
 80005ae:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	69fb      	ldr	r3, [r7, #28]
 80005b4:	4413      	add	r3, r2
 80005b6:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80005b8:	69fb      	ldr	r3, [r7, #28]
 80005ba:	3302      	adds	r3, #2
 80005bc:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80005be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80005c0:	6a3b      	ldr	r3, [r7, #32]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	da99      	bge.n	80004fa <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	372c      	adds	r7, #44	; 0x2c
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd90      	pop	{r4, r7, pc}

080005d0 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	4802      	ldr	r0, [pc, #8]	; (80005e4 <ILI9341_SPI_Init+0x14>)
 80005da:	f002 f96f 	bl	80028bc <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000

080005e8 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	2301      	movs	r3, #1
 80005f6:	2201      	movs	r2, #1
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <ILI9341_SPI_Send+0x20>)
 80005fa:	f006 f83c 	bl	8006676 <HAL_SPI_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000154 	.word	0x20000154

0800060c <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000616:	2200      	movs	r2, #0
 8000618:	2110      	movs	r1, #16
 800061a:	480a      	ldr	r0, [pc, #40]	; (8000644 <ILI9341_Write_Command+0x38>)
 800061c:	f002 f94e 	bl	80028bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000620:	2200      	movs	r2, #0
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	4807      	ldr	r0, [pc, #28]	; (8000644 <ILI9341_Write_Command+0x38>)
 8000626:	f002 f949 	bl	80028bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4618      	mov	r0, r3
 800062e:	f7ff ffdb 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	4803      	ldr	r0, [pc, #12]	; (8000644 <ILI9341_Write_Command+0x38>)
 8000638:	f002 f940 	bl	80028bc <HAL_GPIO_WritePin>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000652:	2201      	movs	r2, #1
 8000654:	2140      	movs	r1, #64	; 0x40
 8000656:	480a      	ldr	r0, [pc, #40]	; (8000680 <ILI9341_Write_Data+0x38>)
 8000658:	f002 f930 	bl	80028bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	2110      	movs	r1, #16
 8000660:	4807      	ldr	r0, [pc, #28]	; (8000680 <ILI9341_Write_Data+0x38>)
 8000662:	f002 f92b 	bl	80028bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffbd 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	2110      	movs	r1, #16
 8000672:	4803      	ldr	r0, [pc, #12]	; (8000680 <ILI9341_Write_Data+0x38>)
 8000674:	f002 f922 	bl	80028bc <HAL_GPIO_WritePin>
}
 8000678:	bf00      	nop
 800067a:	3708      	adds	r7, #8
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000

08000684 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	4604      	mov	r4, r0
 800068c:	4608      	mov	r0, r1
 800068e:	4611      	mov	r1, r2
 8000690:	461a      	mov	r2, r3
 8000692:	4623      	mov	r3, r4
 8000694:	80fb      	strh	r3, [r7, #6]
 8000696:	4603      	mov	r3, r0
 8000698:	80bb      	strh	r3, [r7, #4]
 800069a:	460b      	mov	r3, r1
 800069c:	807b      	strh	r3, [r7, #2]
 800069e:	4613      	mov	r3, r2
 80006a0:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80006a2:	202a      	movs	r0, #42	; 0x2a
 80006a4:	f7ff ffb2 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80006a8:	88fb      	ldrh	r3, [r7, #6]
 80006aa:	0a1b      	lsrs	r3, r3, #8
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f7ff ffc9 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80006b6:	88fb      	ldrh	r3, [r7, #6]
 80006b8:	b2db      	uxtb	r3, r3
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffc4 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	0a1b      	lsrs	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	b2db      	uxtb	r3, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	f7ff ffbd 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80006ce:	887b      	ldrh	r3, [r7, #2]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ffb8 	bl	8000648 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80006d8:	202b      	movs	r0, #43	; 0x2b
 80006da:	f7ff ff97 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80006de:	88bb      	ldrh	r3, [r7, #4]
 80006e0:	0a1b      	lsrs	r3, r3, #8
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	b2db      	uxtb	r3, r3
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffae 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ffa9 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80006f6:	883b      	ldrh	r3, [r7, #0]
 80006f8:	0a1b      	lsrs	r3, r3, #8
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4618      	mov	r0, r3
 8000700:	f7ff ffa2 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000704:	883b      	ldrh	r3, [r7, #0]
 8000706:	b2db      	uxtb	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff9d 	bl	8000648 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800070e:	202c      	movs	r0, #44	; 0x2c
 8000710:	f7ff ff7c 	bl	800060c <ILI9341_Write_Command>
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	bd90      	pop	{r4, r7, pc}

0800071c <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	2120      	movs	r1, #32
 8000724:	480a      	ldr	r0, [pc, #40]	; (8000750 <ILI9341_Reset+0x34>)
 8000726:	f002 f8c9 	bl	80028bc <HAL_GPIO_WritePin>
HAL_Delay(200);
 800072a:	20c8      	movs	r0, #200	; 0xc8
 800072c:	f001 fddc 	bl	80022e8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2110      	movs	r1, #16
 8000734:	4806      	ldr	r0, [pc, #24]	; (8000750 <ILI9341_Reset+0x34>)
 8000736:	f002 f8c1 	bl	80028bc <HAL_GPIO_WritePin>
HAL_Delay(200);
 800073a:	20c8      	movs	r0, #200	; 0xc8
 800073c:	f001 fdd4 	bl	80022e8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000740:	2201      	movs	r2, #1
 8000742:	2120      	movs	r1, #32
 8000744:	4802      	ldr	r0, [pc, #8]	; (8000750 <ILI9341_Reset+0x34>)
 8000746:	f002 f8b9 	bl	80028bc <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40021000 	.word	0x40021000

08000754 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000762:	2036      	movs	r0, #54	; 0x36
 8000764:	f7ff ff52 	bl	800060c <ILI9341_Write_Command>
HAL_Delay(1);
 8000768:	2001      	movs	r0, #1
 800076a:	f001 fdbd 	bl	80022e8 <HAL_Delay>
	
switch(screen_rotation) 
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d837      	bhi.n	80007e4 <ILI9341_Set_Rotation+0x90>
 8000774:	a201      	add	r2, pc, #4	; (adr r2, 800077c <ILI9341_Set_Rotation+0x28>)
 8000776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077a:	bf00      	nop
 800077c:	0800078d 	.word	0x0800078d
 8000780:	080007a3 	.word	0x080007a3
 8000784:	080007b9 	.word	0x080007b9
 8000788:	080007cf 	.word	0x080007cf
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 800078c:	2048      	movs	r0, #72	; 0x48
 800078e:	f7ff ff5b 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000792:	4b17      	ldr	r3, [pc, #92]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 8000794:	22f0      	movs	r2, #240	; 0xf0
 8000796:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 800079a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800079e:	801a      	strh	r2, [r3, #0]
			break;
 80007a0:	e021      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80007a2:	2028      	movs	r0, #40	; 0x28
 80007a4:	f7ff ff50 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80007a8:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 80007aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 80007b2:	22f0      	movs	r2, #240	; 0xf0
 80007b4:	801a      	strh	r2, [r3, #0]
			break;
 80007b6:	e016      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80007b8:	2088      	movs	r0, #136	; 0x88
 80007ba:	f7ff ff45 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 80007c0:	22f0      	movs	r2, #240	; 0xf0
 80007c2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 80007c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007ca:	801a      	strh	r2, [r3, #0]
			break;
 80007cc:	e00b      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80007ce:	20e8      	movs	r0, #232	; 0xe8
 80007d0:	f7ff ff3a 	bl	8000648 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <ILI9341_Set_Rotation+0x9c>)
 80007d6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007da:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <ILI9341_Set_Rotation+0xa0>)
 80007de:	22f0      	movs	r2, #240	; 0xf0
 80007e0:	801a      	strh	r2, [r3, #0]
			break;
 80007e2:	e000      	b.n	80007e6 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80007e4:	bf00      	nop
	}
}
 80007e6:	bf00      	nop
 80007e8:	3710      	adds	r7, #16
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000002 	.word	0x20000002
 80007f4:	20000000 	.word	0x20000000

080007f8 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2120      	movs	r1, #32
 8000800:	4802      	ldr	r0, [pc, #8]	; (800080c <ILI9341_Enable+0x14>)
 8000802:	f002 f85b 	bl	80028bc <HAL_GPIO_WritePin>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40021000 	.word	0x40021000

08000810 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000814:	f7ff fff0 	bl	80007f8 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000818:	f7ff feda 	bl	80005d0 <ILI9341_SPI_Init>
ILI9341_Reset();
 800081c:	f7ff ff7e 	bl	800071c <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000820:	2001      	movs	r0, #1
 8000822:	f7ff fef3 	bl	800060c <ILI9341_Write_Command>
HAL_Delay(1000);
 8000826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800082a:	f001 fd5d 	bl	80022e8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800082e:	20cb      	movs	r0, #203	; 0xcb
 8000830:	f7ff feec 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000834:	2039      	movs	r0, #57	; 0x39
 8000836:	f7ff ff07 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800083a:	202c      	movs	r0, #44	; 0x2c
 800083c:	f7ff ff04 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000840:	2000      	movs	r0, #0
 8000842:	f7ff ff01 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000846:	2034      	movs	r0, #52	; 0x34
 8000848:	f7ff fefe 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800084c:	2002      	movs	r0, #2
 800084e:	f7ff fefb 	bl	8000648 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000852:	20cf      	movs	r0, #207	; 0xcf
 8000854:	f7ff feda 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000858:	2000      	movs	r0, #0
 800085a:	f7ff fef5 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800085e:	20c1      	movs	r0, #193	; 0xc1
 8000860:	f7ff fef2 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000864:	2030      	movs	r0, #48	; 0x30
 8000866:	f7ff feef 	bl	8000648 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800086a:	20e8      	movs	r0, #232	; 0xe8
 800086c:	f7ff fece 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000870:	2085      	movs	r0, #133	; 0x85
 8000872:	f7ff fee9 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff fee6 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800087c:	2078      	movs	r0, #120	; 0x78
 800087e:	f7ff fee3 	bl	8000648 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000882:	20ea      	movs	r0, #234	; 0xea
 8000884:	f7ff fec2 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fedd 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff feda 	bl	8000648 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000894:	20ed      	movs	r0, #237	; 0xed
 8000896:	f7ff feb9 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 800089a:	2064      	movs	r0, #100	; 0x64
 800089c:	f7ff fed4 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f7ff fed1 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80008a6:	2012      	movs	r0, #18
 80008a8:	f7ff fece 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80008ac:	2081      	movs	r0, #129	; 0x81
 80008ae:	f7ff fecb 	bl	8000648 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80008b2:	20f7      	movs	r0, #247	; 0xf7
 80008b4:	f7ff feaa 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80008b8:	2020      	movs	r0, #32
 80008ba:	f7ff fec5 	bl	8000648 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80008be:	20c0      	movs	r0, #192	; 0xc0
 80008c0:	f7ff fea4 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80008c4:	2023      	movs	r0, #35	; 0x23
 80008c6:	f7ff febf 	bl	8000648 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80008ca:	20c1      	movs	r0, #193	; 0xc1
 80008cc:	f7ff fe9e 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80008d0:	2010      	movs	r0, #16
 80008d2:	f7ff feb9 	bl	8000648 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80008d6:	20c5      	movs	r0, #197	; 0xc5
 80008d8:	f7ff fe98 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80008dc:	203e      	movs	r0, #62	; 0x3e
 80008de:	f7ff feb3 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80008e2:	2028      	movs	r0, #40	; 0x28
 80008e4:	f7ff feb0 	bl	8000648 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80008e8:	20c7      	movs	r0, #199	; 0xc7
 80008ea:	f7ff fe8f 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80008ee:	2086      	movs	r0, #134	; 0x86
 80008f0:	f7ff feaa 	bl	8000648 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80008f4:	2036      	movs	r0, #54	; 0x36
 80008f6:	f7ff fe89 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80008fa:	2048      	movs	r0, #72	; 0x48
 80008fc:	f7ff fea4 	bl	8000648 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000900:	203a      	movs	r0, #58	; 0x3a
 8000902:	f7ff fe83 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000906:	2055      	movs	r0, #85	; 0x55
 8000908:	f7ff fe9e 	bl	8000648 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800090c:	20b1      	movs	r0, #177	; 0xb1
 800090e:	f7ff fe7d 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000912:	2000      	movs	r0, #0
 8000914:	f7ff fe98 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000918:	2018      	movs	r0, #24
 800091a:	f7ff fe95 	bl	8000648 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800091e:	20b6      	movs	r0, #182	; 0xb6
 8000920:	f7ff fe74 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000924:	2008      	movs	r0, #8
 8000926:	f7ff fe8f 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800092a:	2082      	movs	r0, #130	; 0x82
 800092c:	f7ff fe8c 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000930:	2027      	movs	r0, #39	; 0x27
 8000932:	f7ff fe89 	bl	8000648 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000936:	20f2      	movs	r0, #242	; 0xf2
 8000938:	f7ff fe68 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800093c:	2000      	movs	r0, #0
 800093e:	f7ff fe83 	bl	8000648 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000942:	2026      	movs	r0, #38	; 0x26
 8000944:	f7ff fe62 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000948:	2001      	movs	r0, #1
 800094a:	f7ff fe7d 	bl	8000648 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800094e:	20e0      	movs	r0, #224	; 0xe0
 8000950:	f7ff fe5c 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000954:	200f      	movs	r0, #15
 8000956:	f7ff fe77 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800095a:	2031      	movs	r0, #49	; 0x31
 800095c:	f7ff fe74 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000960:	202b      	movs	r0, #43	; 0x2b
 8000962:	f7ff fe71 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000966:	200c      	movs	r0, #12
 8000968:	f7ff fe6e 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800096c:	200e      	movs	r0, #14
 800096e:	f7ff fe6b 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000972:	2008      	movs	r0, #8
 8000974:	f7ff fe68 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000978:	204e      	movs	r0, #78	; 0x4e
 800097a:	f7ff fe65 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800097e:	20f1      	movs	r0, #241	; 0xf1
 8000980:	f7ff fe62 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000984:	2037      	movs	r0, #55	; 0x37
 8000986:	f7ff fe5f 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800098a:	2007      	movs	r0, #7
 800098c:	f7ff fe5c 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000990:	2010      	movs	r0, #16
 8000992:	f7ff fe59 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000996:	2003      	movs	r0, #3
 8000998:	f7ff fe56 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800099c:	200e      	movs	r0, #14
 800099e:	f7ff fe53 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80009a2:	2009      	movs	r0, #9
 80009a4:	f7ff fe50 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80009a8:	2000      	movs	r0, #0
 80009aa:	f7ff fe4d 	bl	8000648 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80009ae:	20e1      	movs	r0, #225	; 0xe1
 80009b0:	f7ff fe2c 	bl	800060c <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff fe47 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80009ba:	200e      	movs	r0, #14
 80009bc:	f7ff fe44 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80009c0:	2014      	movs	r0, #20
 80009c2:	f7ff fe41 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f7ff fe3e 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80009cc:	2011      	movs	r0, #17
 80009ce:	f7ff fe3b 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80009d2:	2007      	movs	r0, #7
 80009d4:	f7ff fe38 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009d8:	2031      	movs	r0, #49	; 0x31
 80009da:	f7ff fe35 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80009de:	20c1      	movs	r0, #193	; 0xc1
 80009e0:	f7ff fe32 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80009e4:	2048      	movs	r0, #72	; 0x48
 80009e6:	f7ff fe2f 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80009ea:	2008      	movs	r0, #8
 80009ec:	f7ff fe2c 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80009f0:	200f      	movs	r0, #15
 80009f2:	f7ff fe29 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80009f6:	200c      	movs	r0, #12
 80009f8:	f7ff fe26 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80009fc:	2031      	movs	r0, #49	; 0x31
 80009fe:	f7ff fe23 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000a02:	2036      	movs	r0, #54	; 0x36
 8000a04:	f7ff fe20 	bl	8000648 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000a08:	200f      	movs	r0, #15
 8000a0a:	f7ff fe1d 	bl	8000648 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000a0e:	2011      	movs	r0, #17
 8000a10:	f7ff fdfc 	bl	800060c <ILI9341_Write_Command>
HAL_Delay(120);
 8000a14:	2078      	movs	r0, #120	; 0x78
 8000a16:	f001 fc67 	bl	80022e8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000a1a:	2029      	movs	r0, #41	; 0x29
 8000a1c:	f7ff fdf6 	bl	800060c <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000a20:	2003      	movs	r0, #3
 8000a22:	f7ff fe97 	bl	8000754 <ILI9341_Set_Rotation>

HAL_Delay(10);
 8000a26:	200a      	movs	r0, #10
 8000a28:	f001 fc5e 	bl	80022e8 <HAL_Delay>
//
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000a30:	b5b0      	push	{r4, r5, r7, lr}
 8000a32:	b08c      	sub	sp, #48	; 0x30
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	6039      	str	r1, [r7, #0]
 8000a3a:	80fb      	strh	r3, [r7, #6]
 8000a3c:	466b      	mov	r3, sp
 8000a3e:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000a4c:	d202      	bcs.n	8000a54 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
 8000a52:	e002      	b.n	8000a5a <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000a54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	2140      	movs	r1, #64	; 0x40
 8000a5e:	483d      	ldr	r0, [pc, #244]	; (8000b54 <ILI9341_Draw_Colour_Burst+0x124>)
 8000a60:	f001 ff2c 	bl	80028bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000a64:	2200      	movs	r2, #0
 8000a66:	2110      	movs	r1, #16
 8000a68:	483a      	ldr	r0, [pc, #232]	; (8000b54 <ILI9341_Draw_Colour_Burst+0x124>)
 8000a6a:	f001 ff27 	bl	80028bc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8000a6e:	88fb      	ldrh	r3, [r7, #6]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8000a78:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
 8000a80:	4620      	mov	r0, r4
 8000a82:	f04f 0100 	mov.w	r1, #0
 8000a86:	f04f 0200 	mov.w	r2, #0
 8000a8a:	f04f 0300 	mov.w	r3, #0
 8000a8e:	00cb      	lsls	r3, r1, #3
 8000a90:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a94:	00c2      	lsls	r2, r0, #3
 8000a96:	4620      	mov	r0, r4
 8000a98:	f04f 0100 	mov.w	r1, #0
 8000a9c:	f04f 0200 	mov.w	r2, #0
 8000aa0:	f04f 0300 	mov.w	r3, #0
 8000aa4:	00cb      	lsls	r3, r1, #3
 8000aa6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000aaa:	00c2      	lsls	r2, r0, #3
 8000aac:	1de3      	adds	r3, r4, #7
 8000aae:	08db      	lsrs	r3, r3, #3
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	ebad 0d03 	sub.w	sp, sp, r3
 8000ab6:	466b      	mov	r3, sp
 8000ab8:	3300      	adds	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000abc:	2300      	movs	r3, #0
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac0:	e00e      	b.n	8000ae0 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8000ac2:	69ba      	ldr	r2, [r7, #24]
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	4413      	add	r3, r2
 8000ac8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8000acc:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8000ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad0:	3301      	adds	r3, #1
 8000ad2:	88fa      	ldrh	r2, [r7, #6]
 8000ad4:	b2d1      	uxtb	r1, r2
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8000ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000adc:	3302      	adds	r3, #2
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d3ec      	bcc.n	8000ac2 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8000aee:	697a      	ldr	r2, [r7, #20]
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8000af8:	697b      	ldr	r3, [r7, #20]
 8000afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000afc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000b02:	fb01 f202 	mul.w	r2, r1, r2
 8000b06:	1a9b      	subs	r3, r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d010      	beq.n	8000b32 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b14:	e009      	b.n	8000b2a <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8000b16:	69b9      	ldr	r1, [r7, #24]
 8000b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	230a      	movs	r3, #10
 8000b1e:	480e      	ldr	r0, [pc, #56]	; (8000b58 <ILI9341_Draw_Colour_Burst+0x128>)
 8000b20:	f005 fda9 	bl	8006676 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8000b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b26:	3301      	adds	r3, #1
 8000b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d3f1      	bcc.n	8000b16 <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8000b32:	69b9      	ldr	r1, [r7, #24]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	230a      	movs	r3, #10
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <ILI9341_Draw_Colour_Burst+0x128>)
 8000b3c:	f005 fd9b 	bl	8006676 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	2110      	movs	r1, #16
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <ILI9341_Draw_Colour_Burst+0x124>)
 8000b46:	f001 feb9 	bl	80028bc <HAL_GPIO_WritePin>
 8000b4a:	46ad      	mov	sp, r5
}
 8000b4c:	bf00      	nop
 8000b4e:	3730      	adds	r7, #48	; 0x30
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bdb0      	pop	{r4, r5, r7, pc}
 8000b54:	40021000 	.word	0x40021000
 8000b58:	20000154 	.word	0x20000154

08000b5c <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <ILI9341_Fill_Screen+0x44>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <ILI9341_Fill_Screen+0x48>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	2100      	movs	r1, #0
 8000b74:	2000      	movs	r0, #0
 8000b76:	f7ff fd85 	bl	8000684 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <ILI9341_Fill_Screen+0x44>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <ILI9341_Fill_Screen+0x48>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	fb03 f302 	mul.w	r3, r3, r2
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	88fb      	ldrh	r3, [r7, #6]
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff4c 	bl	8000a30 <ILI9341_Draw_Colour_Burst>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000002 	.word	0x20000002
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	80fb      	strh	r3, [r7, #6]
 8000bb2:	460b      	mov	r3, r1
 8000bb4:	80bb      	strh	r3, [r7, #4]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000bba:	4b5b      	ldr	r3, [pc, #364]	; (8000d28 <ILI9341_Draw_Pixel+0x180>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	88fa      	ldrh	r2, [r7, #6]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	f080 80ac 	bcs.w	8000d20 <ILI9341_Draw_Pixel+0x178>
 8000bc8:	4b58      	ldr	r3, [pc, #352]	; (8000d2c <ILI9341_Draw_Pixel+0x184>)
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	88ba      	ldrh	r2, [r7, #4]
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	f080 80a5 	bcs.w	8000d20 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	4855      	ldr	r0, [pc, #340]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000bdc:	f001 fe6e 	bl	80028bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2110      	movs	r1, #16
 8000be4:	4852      	ldr	r0, [pc, #328]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000be6:	f001 fe69 	bl	80028bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8000bea:	202a      	movs	r0, #42	; 0x2a
 8000bec:	f7ff fcfc 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2140      	movs	r1, #64	; 0x40
 8000bf4:	484e      	ldr	r0, [pc, #312]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000bf6:	f001 fe61 	bl	80028bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2110      	movs	r1, #16
 8000bfe:	484c      	ldr	r0, [pc, #304]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c00:	f001 fe5c 	bl	80028bc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c04:	2200      	movs	r2, #0
 8000c06:	2110      	movs	r1, #16
 8000c08:	4849      	ldr	r0, [pc, #292]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c0a:	f001 fe57 	bl	80028bc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	753b      	strb	r3, [r7, #20]
 8000c18:	88fb      	ldrh	r3, [r7, #6]
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	757b      	strb	r3, [r7, #21]
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	3301      	adds	r3, #1
 8000c22:	121b      	asrs	r3, r3, #8
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	75bb      	strb	r3, [r7, #22]
 8000c28:	88fb      	ldrh	r3, [r7, #6]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8000c32:	f107 0114 	add.w	r1, r7, #20
 8000c36:	2301      	movs	r3, #1
 8000c38:	2204      	movs	r2, #4
 8000c3a:	483e      	ldr	r0, [pc, #248]	; (8000d34 <ILI9341_Draw_Pixel+0x18c>)
 8000c3c:	f005 fd1b 	bl	8006676 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	483a      	ldr	r0, [pc, #232]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c46:	f001 fe39 	bl	80028bc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2140      	movs	r1, #64	; 0x40
 8000c4e:	4838      	ldr	r0, [pc, #224]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c50:	f001 fe34 	bl	80028bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000c54:	2200      	movs	r2, #0
 8000c56:	2110      	movs	r1, #16
 8000c58:	4835      	ldr	r0, [pc, #212]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c5a:	f001 fe2f 	bl	80028bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8000c5e:	202b      	movs	r0, #43	; 0x2b
 8000c60:	f7ff fcc2 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000c64:	2201      	movs	r2, #1
 8000c66:	2140      	movs	r1, #64	; 0x40
 8000c68:	4831      	ldr	r0, [pc, #196]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c6a:	f001 fe27 	bl	80028bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2110      	movs	r1, #16
 8000c72:	482f      	ldr	r0, [pc, #188]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c74:	f001 fe22 	bl	80028bc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2110      	movs	r1, #16
 8000c7c:	482c      	ldr	r0, [pc, #176]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000c7e:	f001 fe1d 	bl	80028bc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	743b      	strb	r3, [r7, #16]
 8000c8c:	88bb      	ldrh	r3, [r7, #4]
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	747b      	strb	r3, [r7, #17]
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	121b      	asrs	r3, r3, #8
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	74bb      	strb	r3, [r7, #18]
 8000c9c:	88bb      	ldrh	r3, [r7, #4]
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8000ca6:	f107 0110 	add.w	r1, r7, #16
 8000caa:	2301      	movs	r3, #1
 8000cac:	2204      	movs	r2, #4
 8000cae:	4821      	ldr	r0, [pc, #132]	; (8000d34 <ILI9341_Draw_Pixel+0x18c>)
 8000cb0:	f005 fce1 	bl	8006676 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	2110      	movs	r1, #16
 8000cb8:	481d      	ldr	r0, [pc, #116]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cba:	f001 fdff 	bl	80028bc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2140      	movs	r1, #64	; 0x40
 8000cc2:	481b      	ldr	r0, [pc, #108]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cc4:	f001 fdfa 	bl	80028bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8000cc8:	2200      	movs	r2, #0
 8000cca:	2110      	movs	r1, #16
 8000ccc:	4818      	ldr	r0, [pc, #96]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cce:	f001 fdf5 	bl	80028bc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8000cd2:	202c      	movs	r0, #44	; 0x2c
 8000cd4:	f7ff fc88 	bl	80005e8 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8000cd8:	2201      	movs	r2, #1
 8000cda:	2140      	movs	r1, #64	; 0x40
 8000cdc:	4814      	ldr	r0, [pc, #80]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cde:	f001 fded 	bl	80028bc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2110      	movs	r1, #16
 8000ce6:	4812      	ldr	r0, [pc, #72]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000ce8:	f001 fde8 	bl	80028bc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2110      	movs	r1, #16
 8000cf0:	480f      	ldr	r0, [pc, #60]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000cf2:	f001 fde3 	bl	80028bc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8000cf6:	887b      	ldrh	r3, [r7, #2]
 8000cf8:	0a1b      	lsrs	r3, r3, #8
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	b2db      	uxtb	r3, r3
 8000cfe:	733b      	strb	r3, [r7, #12]
 8000d00:	887b      	ldrh	r3, [r7, #2]
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8000d06:	f107 010c 	add.w	r1, r7, #12
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	4809      	ldr	r0, [pc, #36]	; (8000d34 <ILI9341_Draw_Pixel+0x18c>)
 8000d10:	f005 fcb1 	bl	8006676 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000d14:	2201      	movs	r2, #1
 8000d16:	2110      	movs	r1, #16
 8000d18:	4805      	ldr	r0, [pc, #20]	; (8000d30 <ILI9341_Draw_Pixel+0x188>)
 8000d1a:	f001 fdcf 	bl	80028bc <HAL_GPIO_WritePin>
 8000d1e:	e000      	b.n	8000d22 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8000d20:	bf00      	nop
	
}
 8000d22:	3718      	adds	r7, #24
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000002 	.word	0x20000002
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	20000154 	.word	0x20000154

08000d38 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b086      	sub	sp, #24
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	int i =0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8000d44:	e036      	b.n	8000db4 <speed_test_LCD+0x7c>
	{
		i ++;
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d60:	4819      	ldr	r0, [pc, #100]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d62:	f005 fbea 	bl	800653a <HAL_RNG_GetRandomNumber>
 8000d66:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d6c:	4816      	ldr	r0, [pc, #88]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d6e:	f005 fbe4 	bl	800653a <HAL_RNG_GetRandomNumber>
 8000d72:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d78:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d7a:	f005 fbde 	bl	800653a <HAL_RNG_GetRandomNumber>
 8000d7e:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000d84:	4810      	ldr	r0, [pc, #64]	; (8000dc8 <speed_test_LCD+0x90>)
 8000d86:	f005 fbd8 	bl	800653a <HAL_RNG_GetRandomNumber>
 8000d8a:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8000d8c:	693b      	ldr	r3, [r7, #16]
 8000d8e:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8000d90:	89fb      	ldrh	r3, [r7, #14]
 8000d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d96:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8000d98:	89bb      	ldrh	r3, [r7, #12]
 8000d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000d9e:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8000da0:	897b      	ldrh	r3, [r7, #10]
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8000da8:	893b      	ldrh	r3, [r7, #8]
 8000daa:	897a      	ldrh	r2, [r7, #10]
 8000dac:	89b9      	ldrh	r1, [r7, #12]
 8000dae:	89f8      	ldrh	r0, [r7, #14]
 8000db0:	f7ff fb86 	bl	80004c0 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8000db4:	697a      	ldr	r2, [r7, #20]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	ddc4      	ble.n	8000d46 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8000dbc:	bf00      	nop
 8000dbe:	bf00      	nop
 8000dc0:	3718      	adds	r7, #24
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000023c 	.word	0x2000023c

08000dcc <I2C_1_scaner>:

};

//----------------------------------------------------------------------------------------------------
void I2C_1_scaner(void)
{
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af04      	add	r7, sp, #16
	/*Description function
	This function search devise connected to I2C in this case -hi2c1.
	After thet function print in console information about what to connect to I2C.
	*/
	uint8_t number_of_device=0;				// How many device controller is found
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	71fb      	strb	r3, [r7, #7]
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	//HAL_Delay(500);

	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8000dd6:	4b2a      	ldr	r3, [pc, #168]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e043      	b.n	8000e66 <I2C_1_scaner+0x9a>
	{
		HAL_Delay(1);
 8000dde:	2001      	movs	r0, #1
 8000de0:	f001 fa82 	bl	80022e8 <HAL_Delay>
		STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, (uint16_t) sizebuf_I2C, &buff, (uint16_t) sizebuf_I2C,(uint32_t) timeout);
 8000de4:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	b299      	uxth	r1, r3
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <I2C_1_scaner+0xb8>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	b298      	uxth	r0, r3
 8000df4:	4b24      	ldr	r3, [pc, #144]	; (8000e88 <I2C_1_scaner+0xbc>)
 8000df6:	881c      	ldrh	r4, [r3, #0]
 8000df8:	4b23      	ldr	r3, [pc, #140]	; (8000e88 <I2C_1_scaner+0xbc>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	4a23      	ldr	r2, [pc, #140]	; (8000e8c <I2C_1_scaner+0xc0>)
 8000dfe:	6812      	ldr	r2, [r2, #0]
 8000e00:	9202      	str	r2, [sp, #8]
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <I2C_1_scaner+0xc4>)
 8000e06:	9300      	str	r3, [sp, #0]
 8000e08:	4623      	mov	r3, r4
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	4821      	ldr	r0, [pc, #132]	; (8000e94 <I2C_1_scaner+0xc8>)
 8000e0e:	f003 fc31 	bl	8004674 <HAL_I2C_Mem_Read>
 8000e12:	4603      	mov	r3, r0
 8000e14:	b29a      	uxth	r2, r3
 8000e16:	4b20      	ldr	r3, [pc, #128]	; (8000e98 <I2C_1_scaner+0xcc>)
 8000e18:	801a      	strh	r2, [r3, #0]

		if(STATUS==DEVICE_FOUND)																		// if devsice is found
 8000e1a:	4b1f      	ldr	r3, [pc, #124]	; (8000e98 <I2C_1_scaner+0xcc>)
 8000e1c:	881b      	ldrh	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d11b      	bne.n	8000e5a <I2C_1_scaner+0x8e>
		{
			number_of_device++;
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	3301      	adds	r3, #1
 8000e26:	71fb      	strb	r3, [r7, #7]

			if( (addres_devise == H_and_T_sensor_SI7021_I2C_ADDR) | (addres_devise == OLED_SSD136_I2C_ADDR))
 8000e28:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b40      	cmp	r3, #64	; 0x40
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	2b3c      	cmp	r3, #60	; 0x3c
 8000e3c:	bf0c      	ite	eq
 8000e3e:	2301      	moveq	r3, #1
 8000e40:	2300      	movne	r3, #0
 8000e42:	b2db      	uxtb	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d006      	beq.n	8000e5a <I2C_1_scaner+0x8e>
			{
				switch (addres_devise)
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b3c      	cmp	r3, #60	; 0x3c
 8000e52:	d001      	beq.n	8000e58 <I2C_1_scaner+0x8c>
 8000e54:	2b40      	cmp	r3, #64	; 0x40
 8000e56:	e000      	b.n	8000e5a <I2C_1_scaner+0x8e>
							sprintf(str3,"Device address-0x%x - found. It is OLED \r\n",addres_devise);      // convert   in  str
							size=sizeof(str3);
							HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
							memset(str3, 0 , sizeof(str3));   // Clean str3
						#endif
				    break;
 8000e58:	bf00      	nop
	for(addres_devise=0x00; addres_devise<0xFF; addres_devise++)  // addres_devise<0x7F
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e64:	701a      	strb	r2, [r3, #0]
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <I2C_1_scaner+0xb4>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2bff      	cmp	r3, #255	; 0xff
 8000e6c:	d1b7      	bne.n	8000dde <I2C_1_scaner+0x12>
		memset(str3, 0 , sizeof(str3));
		sprintf(str3,"DONE\r\n");      																	// convert   in  str
		size=sizeof(str3);
		HAL_UART_Transmit(&huart1 , (uint8_t *)str3, size, 0xFFFF);
	#endif
	HAL_Delay(500);
 8000e6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e72:	f001 fa39 	bl	80022e8 <HAL_Delay>
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd90      	pop	{r4, r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	200000bc 	.word	0x200000bc
 8000e84:	200000bd 	.word	0x200000bd
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	200000be 	.word	0x200000be
 8000e94:	20000100 	.word	0x20000100
 8000e98:	200000c0 	.word	0x200000c0

08000e9c <read_digits>:
#include <stdbool.h>


//----------------------------------------------------------------------------------------
void read_digits(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	char digith = 0;;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	71fb      	strb	r3, [r7, #7]

	digith = read_one_digit_from_keyboard();
 8000ea6:	f000 f853 	bl	8000f50 <read_one_digit_from_keyboard>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	if(digith == '#')						// Clean buffer
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b23      	cmp	r3, #35	; 0x23
 8000eb2:	d10a      	bne.n	8000eca <read_digits+0x2e>
	{
		memset(keyboard.keyboard_digits_buffer, '\0', sizeof(keyboard.keyboard_digits_buffer));
 8000eb4:	221e      	movs	r2, #30
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	4824      	ldr	r0, [pc, #144]	; (8000f4c <read_digits+0xb0>)
 8000eba:	f00a f8af 	bl	800b01c <memset>
		keyboard.read_digits_position = 0;
 8000ebe:	4b23      	ldr	r3, [pc, #140]	; (8000f4c <read_digits+0xb0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	; 0x24
		keyboard.read_one_digit_status = false;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <read_digits+0xb0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	77da      	strb	r2, [r3, #31]
	}
	if(digith == '*')						// If pressed enter
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8000ece:	d109      	bne.n	8000ee4 <read_digits+0x48>
	{
		keyboard.all_digits_was_read = true;
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <read_digits+0xb0>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
		keyboard.read_one_digit_status = false;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <read_digits+0xb0>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	77da      	strb	r2, [r3, #31]
		keyboard.read_digits_position = 0;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <read_digits+0xb0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if((digith != '\0') && (digith != '#')&& (digith != '*'))
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d028      	beq.n	8000f3c <read_digits+0xa0>
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b23      	cmp	r3, #35	; 0x23
 8000eee:	d025      	beq.n	8000f3c <read_digits+0xa0>
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8000ef4:	d022      	beq.n	8000f3c <read_digits+0xa0>
	{
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <read_digits+0xb0>)
 8000ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efa:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <read_digits+0xb0>)
 8000efc:	7f92      	ldrb	r2, [r2, #30]
 8000efe:	4293      	cmp	r3, r2
 8000f00:	dc11      	bgt.n	8000f26 <read_digits+0x8a>
		{
			keyboard.keyboard_digits_buffer[keyboard.read_digits_position] = digith;
 8000f02:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <read_digits+0xb0>)
 8000f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f06:	4911      	ldr	r1, [pc, #68]	; (8000f4c <read_digits+0xb0>)
 8000f08:	79fa      	ldrb	r2, [r7, #7]
 8000f0a:	54ca      	strb	r2, [r1, r3]
			keyboard.read_digits_position++;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <read_digits+0xb0>)
 8000f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f10:	3301      	adds	r3, #1
 8000f12:	4a0e      	ldr	r2, [pc, #56]	; (8000f4c <read_digits+0xb0>)
 8000f14:	6253      	str	r3, [r2, #36]	; 0x24
			keyboard.all_digits_was_read = false;
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <read_digits+0xb0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = true;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <read_digits+0xb0>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	77da      	strb	r2, [r3, #31]
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f24:	e00e      	b.n	8000f44 <read_digits+0xa8>
		}
		else								// If entered all digits
		{
			keyboard.all_digits_was_read = true;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <read_digits+0xb0>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	f883 2020 	strb.w	r2, [r3, #32]
			keyboard.read_one_digit_status = false;
 8000f2e:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <read_digits+0xb0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	77da      	strb	r2, [r3, #31]
			keyboard.read_digits_position = 0;
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <read_digits+0xb0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	; 0x24
		if(keyboard.read_digits_position <= keyboard.how_meny_digits_must_be_written)
 8000f3a:	e003      	b.n	8000f44 <read_digits+0xa8>
		}
	}
	else									// If didn't enter any key
	{
		keyboard.read_one_digit_status = false;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <read_digits+0xb0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	77da      	strb	r2, [r3, #31]
	}
}
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000d8 	.word	0x200000d8

08000f50 <read_one_digit_from_keyboard>:

//----------------------------------------------------------------------------------------
char read_one_digit_from_keyboard(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
	char digit = '\0';
 8000f56:	2300      	movs	r3, #0
 8000f58:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f60:	48cf      	ldr	r0, [pc, #828]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000f62:	f001 fcab 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6c:	48cc      	ldr	r0, [pc, #816]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000f6e:	f001 fca5 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f78:	48c9      	ldr	r0, [pc, #804]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000f7a:	f001 fc9f 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f84:	48c6      	ldr	r0, [pc, #792]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000f86:	f001 fc99 	bl	80028bc <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8e:	48c5      	ldr	r0, [pc, #788]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8000f90:	f001 fc7c 	bl	800288c <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d169      	bne.n	800106e <read_one_digit_from_keyboard+0x11e>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fa0:	48bf      	ldr	r0, [pc, #764]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fa2:	f001 fc8b 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000fac:	48bc      	ldr	r0, [pc, #752]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fae:	f001 fc85 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fb8:	48b9      	ldr	r0, [pc, #740]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fba:	f001 fc7f 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fc4:	48b6      	ldr	r0, [pc, #728]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fc6:	f001 fc79 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000fca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fce:	48b5      	ldr	r0, [pc, #724]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8000fd0:	f001 fc5c 	bl	800288c <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <read_one_digit_from_keyboard+0x8e>
		{
			digit = '1';
 8000fda:	2331      	movs	r3, #49	; 0x31
 8000fdc:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8000fde:	2201      	movs	r2, #1
 8000fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fe4:	48ae      	ldr	r0, [pc, #696]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000fe6:	f001 fc69 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ff0:	48ab      	ldr	r0, [pc, #684]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8000ff2:	f001 fc63 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8000ff6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffa:	48aa      	ldr	r0, [pc, #680]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8000ffc:	f001 fc46 	bl	800288c <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <read_one_digit_from_keyboard+0xba>
		{
			digit = '4';
 8001006:	2334      	movs	r3, #52	; 0x34
 8001008:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001010:	48a3      	ldr	r0, [pc, #652]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001012:	f001 fc53 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001016:	2200      	movs	r2, #0
 8001018:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101c:	48a0      	ldr	r0, [pc, #640]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800101e:	f001 fc4d 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 8001022:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001026:	489f      	ldr	r0, [pc, #636]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001028:	f001 fc30 	bl	800288c <HAL_GPIO_ReadPin>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <read_one_digit_from_keyboard+0xe6>
		{
			digit =  '7';
 8001032:	2337      	movs	r3, #55	; 0x37
 8001034:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 7100 	mov.w	r1, #512	; 0x200
 800103c:	4898      	ldr	r0, [pc, #608]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800103e:	f001 fc3d 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001048:	4895      	ldr	r0, [pc, #596]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800104a:	f001 fc37 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_1_Pin) == GPIO_PIN_RESET)	// Entered 1 or 4 or 7 or *
 800104e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001052:	4894      	ldr	r0, [pc, #592]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001054:	f001 fc1a 	bl	800288c <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <read_one_digit_from_keyboard+0x112>
		{
			digit =  '*';
 800105e:	232a      	movs	r3, #42	; 0x2a
 8001060:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001062:	2201      	movs	r2, #1
 8001064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001068:	488d      	ldr	r0, [pc, #564]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800106a:	f001 fc27 	bl	80028bc <HAL_GPIO_WritePin>
	}
	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001074:	488a      	ldr	r0, [pc, #552]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001076:	f001 fc21 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001080:	4887      	ldr	r0, [pc, #540]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001082:	f001 fc1b 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 7100 	mov.w	r1, #512	; 0x200
 800108c:	4884      	ldr	r0, [pc, #528]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800108e:	f001 fc15 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001098:	4881      	ldr	r0, [pc, #516]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800109a:	f001 fc0f 	bl	80028bc <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)	// Entered 2 or 5 or 8 or 0
 800109e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010a2:	4880      	ldr	r0, [pc, #512]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 80010a4:	f001 fbf2 	bl	800288c <HAL_GPIO_ReadPin>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d169      	bne.n	8001182 <read_one_digit_from_keyboard+0x232>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010b4:	487a      	ldr	r0, [pc, #488]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010b6:	f001 fc01 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80010ba:	2201      	movs	r2, #1
 80010bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010c0:	4877      	ldr	r0, [pc, #476]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010c2:	f001 fbfb 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010cc:	4874      	ldr	r0, [pc, #464]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010ce:	f001 fbf5 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010d8:	4871      	ldr	r0, [pc, #452]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010da:	f001 fbef 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 80010de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010e2:	4870      	ldr	r0, [pc, #448]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 80010e4:	f001 fbd2 	bl	800288c <HAL_GPIO_ReadPin>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <read_one_digit_from_keyboard+0x1a2>
		{
			digit =  '2';
 80010ee:	2332      	movs	r3, #50	; 0x32
 80010f0:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010f8:	4869      	ldr	r0, [pc, #420]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80010fa:	f001 fbdf 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 80010fe:	2200      	movs	r2, #0
 8001100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001104:	4866      	ldr	r0, [pc, #408]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001106:	f001 fbd9 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	4865      	ldr	r0, [pc, #404]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001110:	f001 fbbc 	bl	800288c <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <read_one_digit_from_keyboard+0x1ce>
		{
			digit =  '5';
 800111a:	2335      	movs	r3, #53	; 0x35
 800111c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 800111e:	2201      	movs	r2, #1
 8001120:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001124:	485e      	ldr	r0, [pc, #376]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001126:	f001 fbc9 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001130:	485b      	ldr	r0, [pc, #364]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001132:	f001 fbc3 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800113a:	485a      	ldr	r0, [pc, #360]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 800113c:	f001 fba6 	bl	800288c <HAL_GPIO_ReadPin>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <read_one_digit_from_keyboard+0x1fa>
		{
			digit = '8';
 8001146:	2338      	movs	r3, #56	; 0x38
 8001148:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800114a:	2201      	movs	r2, #1
 800114c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001150:	4853      	ldr	r0, [pc, #332]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001152:	f001 fbb3 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800115c:	4850      	ldr	r0, [pc, #320]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800115e:	f001 fbad 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_2_Pin) == GPIO_PIN_RESET)
 8001162:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001166:	484f      	ldr	r0, [pc, #316]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001168:	f001 fb90 	bl	800288c <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d101      	bne.n	8001176 <read_one_digit_from_keyboard+0x226>
		{
			digit = '0';
 8001172:	2330      	movs	r3, #48	; 0x30
 8001174:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800117c:	4848      	ldr	r0, [pc, #288]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800117e:	f001 fb9d 	bl	80028bc <HAL_GPIO_WritePin>
	}

	////////////////////////////////////////////////////////////////
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	4845      	ldr	r0, [pc, #276]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800118a:	f001 fb97 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 800118e:	2200      	movs	r2, #0
 8001190:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001194:	4842      	ldr	r0, [pc, #264]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001196:	f001 fb91 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a0:	483f      	ldr	r0, [pc, #252]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011a2:	f001 fb8b 	bl	80028bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ac:	483c      	ldr	r0, [pc, #240]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011ae:	f001 fb85 	bl	80028bc <HAL_GPIO_WritePin>
	if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)	// Entered 3 or 6 or 9 or №
 80011b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011b6:	483b      	ldr	r0, [pc, #236]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 80011b8:	f001 fb68 	bl	800288c <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d169      	bne.n	8001296 <read_one_digit_from_keyboard+0x346>
	{
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011c8:	4835      	ldr	r0, [pc, #212]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011ca:	f001 fb77 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 80011ce:	2201      	movs	r2, #1
 80011d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d4:	4832      	ldr	r0, [pc, #200]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011d6:	f001 fb71 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011e0:	482f      	ldr	r0, [pc, #188]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011e2:	f001 fb6b 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 80011e6:	2201      	movs	r2, #1
 80011e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ec:	482c      	ldr	r0, [pc, #176]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 80011ee:	f001 fb65 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 80011f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f6:	482b      	ldr	r0, [pc, #172]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 80011f8:	f001 fb48 	bl	800288c <HAL_GPIO_ReadPin>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <read_one_digit_from_keyboard+0x2b6>
		{
			digit = '3';
 8001202:	2333      	movs	r3, #51	; 0x33
 8001204:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_1_Pin, GPIO_PIN_SET);
 8001206:	2201      	movs	r2, #1
 8001208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800120c:	4824      	ldr	r0, [pc, #144]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800120e:	f001 fb55 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_RESET);
 8001212:	2200      	movs	r2, #0
 8001214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800121a:	f001 fb4f 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800121e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001222:	4820      	ldr	r0, [pc, #128]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001224:	f001 fb32 	bl	800288c <HAL_GPIO_ReadPin>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <read_one_digit_from_keyboard+0x2e2>
		{
			digit = '6';
 800122e:	2336      	movs	r3, #54	; 0x36
 8001230:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_2_Pin, GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001238:	4819      	ldr	r0, [pc, #100]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 800123a:	f001 fb3f 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001244:	4816      	ldr	r0, [pc, #88]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001246:	f001 fb39 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 800124a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124e:	4815      	ldr	r0, [pc, #84]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 8001250:	f001 fb1c 	bl	800288c <HAL_GPIO_ReadPin>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <read_one_digit_from_keyboard+0x30e>
		{
			digit = '9';
 800125a:	2339      	movs	r3, #57	; 0x39
 800125c:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_3_Pin, GPIO_PIN_SET);
 800125e:	2201      	movs	r2, #1
 8001260:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001264:	480e      	ldr	r0, [pc, #56]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001266:	f001 fb29 	bl	80028bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_RESET);
 800126a:	2200      	movs	r2, #0
 800126c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001270:	480b      	ldr	r0, [pc, #44]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001272:	f001 fb23 	bl	80028bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(GPIOB, KEYBOARD_COLUMN_3_Pin) == GPIO_PIN_RESET)
 8001276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127a:	480a      	ldr	r0, [pc, #40]	; (80012a4 <read_one_digit_from_keyboard+0x354>)
 800127c:	f001 fb06 	bl	800288c <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <read_one_digit_from_keyboard+0x33a>
		{
			digit = '#';
 8001286:	2323      	movs	r3, #35	; 0x23
 8001288:	71fb      	strb	r3, [r7, #7]
		}
		HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001290:	4803      	ldr	r0, [pc, #12]	; (80012a0 <read_one_digit_from_keyboard+0x350>)
 8001292:	f001 fb13 	bl	80028bc <HAL_GPIO_WritePin>
	}
	return digit;
 8001296:	79fb      	ldrb	r3, [r7, #7]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40020c00 	.word	0x40020c00
 80012a4:	40020400 	.word	0x40020400

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ae:	f000 ffa9 	bl	8002204 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b2:	f000 f857 	bl	8001364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b6:	f000 fadb 	bl	8001870 <MX_GPIO_Init>
  MX_I2S3_Init();
 80012ba:	f000 f90f 	bl	80014dc <MX_I2S3_Init>
  MX_SPI1_Init();
 80012be:	f000 f951 	bl	8001564 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80012c2:	f009 fb69 	bl	800a998 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80012c6:	f000 fa11 	bl	80016ec <MX_TIM2_Init>
  MX_SPI2_Init();
 80012ca:	f000 f981 	bl	80015d0 <MX_SPI2_Init>
  MX_RNG_Init();
 80012ce:	f000 f935 	bl	800153c <MX_RNG_Init>
  MX_TIM3_Init();
 80012d2:	f000 fa59 	bl	8001788 <MX_TIM3_Init>
  MX_TIM1_Init();
 80012d6:	f000 f9b1 	bl	800163c <MX_TIM1_Init>
  MX_I2C3_Init();
 80012da:	f000 f8d1 	bl	8001480 <MX_I2C3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80012de:	f000 f8c3 	bl	8001468 <MX_NVIC_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //int delay = 10;

  ILI9341_Init();
 80012e2:	f7ff fa95 	bl	8000810 <ILI9341_Init>
  ILI9341_Fill_Screen(BLACK);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fc38 	bl	8000b5c <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 80012ec:	2003      	movs	r0, #3
 80012ee:	f7ff fa31 	bl	8000754 <ILI9341_Set_Rotation>


  ILI9341_Fill_Screen(BLACK);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff fc32 	bl	8000b5c <ILI9341_Fill_Screen>
  int number_of_tests = 100;
 80012f8:	2364      	movs	r3, #100	; 0x64
 80012fa:	60fb      	str	r3, [r7, #12]
  speed_test_LCD(number_of_tests);
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	f7ff fd1b 	bl	8000d38 <speed_test_LCD>

  ILI9341_Fill_Screen(BLACK);
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fc2a 	bl	8000b5c <ILI9341_Fill_Screen>

  // Start scan digits ///////////////////////////////
  HAL_TIM_Base_Start_IT(&htim3);			// Start read digits
 8001308:	4813      	ldr	r0, [pc, #76]	; (8001358 <main+0xb0>)
 800130a:	f005 fc0b 	bl	8006b24 <HAL_TIM_Base_Start_IT>
  HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 800130e:	2100      	movs	r1, #0
 8001310:	4811      	ldr	r0, [pc, #68]	; (8001358 <main+0xb0>)
 8001312:	f005 fc77 	bl	8006c04 <HAL_TIM_OC_Start_IT>
  keyboard.how_meny_digits_must_be_written = 10;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <main+0xb4>)
 8001318:	220a      	movs	r2, #10
 800131a:	779a      	strb	r2, [r3, #30]
  // Encoder /////////////////////////////////////////
//  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
//  int32_t prevCounter = 0;
  ////////////////////////////////////////////////////

  I2C_1_scaner();
 800131c:	f7ff fd56 	bl	8000dcc <I2C_1_scaner>
  // 0x246				//  ????
  // 0x247				// MEMS
  // 0x255              //  ????

  // Test read ID from BME280 ////////////////////////////////////////////////////////////////
  uint16_t STATUS=0;
 8001320:	2300      	movs	r3, #0
 8001322:	817b      	strh	r3, [r7, #10]
  uint16_t addres_devise = 0x76;
 8001324:	2376      	movs	r3, #118	; 0x76
 8001326:	813b      	strh	r3, [r7, #8]
  uint16_t addr = 0xD0;
 8001328:	23d0      	movs	r3, #208	; 0xd0
 800132a:	80fb      	strh	r3, [r7, #6]
  uint8_t buff=0;         // Return 0x96 -> Dec 60
 800132c:	2300      	movs	r3, #0
 800132e:	717b      	strb	r3, [r7, #5]
  STATUS=HAL_I2C_Mem_Read(&hi2c3, (uint16_t)addres_devise<<1,(uint16_t)addr, 1, &buff, 1, 1000);
 8001330:	893b      	ldrh	r3, [r7, #8]
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	b299      	uxth	r1, r3
 8001336:	88fa      	ldrh	r2, [r7, #6]
 8001338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2301      	movs	r3, #1
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	1d7b      	adds	r3, r7, #5
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2301      	movs	r3, #1
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <main+0xb8>)
 800134a:	f003 f993 	bl	8004674 <HAL_I2C_Mem_Read>
 800134e:	4603      	mov	r3, r0
 8001350:	817b      	strh	r3, [r7, #10]
//	  HAL_TIM_Base_Stop_IT(&htim3);				// Stop timer measure
//	  ARR_REG = TIM3-> CNT;


    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001352:	f009 fb47 	bl	800a9e4 <MX_USB_HOST_Process>
 8001356:	e7fc      	b.n	8001352 <main+0xaa>
 8001358:	200001ac 	.word	0x200001ac
 800135c:	200000d8 	.word	0x200000d8
 8001360:	20000100 	.word	0x20000100

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b098      	sub	sp, #96	; 0x60
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800136e:	2230      	movs	r2, #48	; 0x30
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f009 fe52 	bl	800b01c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <SystemClock_Config+0xfc>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a30      	ldr	r2, [pc, #192]	; (8001460 <SystemClock_Config+0xfc>)
 80013a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <SystemClock_Config+0xfc>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	60bb      	str	r3, [r7, #8]
 80013b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
 80013b6:	4b2b      	ldr	r3, [pc, #172]	; (8001464 <SystemClock_Config+0x100>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <SystemClock_Config+0x100>)
 80013bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c0:	6013      	str	r3, [r2, #0]
 80013c2:	4b28      	ldr	r3, [pc, #160]	; (8001464 <SystemClock_Config+0x100>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013ca:	607b      	str	r3, [r7, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ce:	2301      	movs	r3, #1
 80013d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d8:	2302      	movs	r3, #2
 80013da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013e2:	2308      	movs	r3, #8
 80013e4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013ea:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ec:	2302      	movs	r3, #2
 80013ee:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013f0:	2307      	movs	r3, #7
 80013f2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 fa85 	bl	8005908 <HAL_RCC_OscConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001404:	f000 fbae 	bl	8001b64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001408:	230f      	movs	r3, #15
 800140a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800140c:	2302      	movs	r3, #2
 800140e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001414:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800141a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001420:	f107 031c 	add.w	r3, r7, #28
 8001424:	2105      	movs	r1, #5
 8001426:	4618      	mov	r0, r3
 8001428:	f004 fce6 	bl	8005df8 <HAL_RCC_ClockConfig>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001432:	f000 fb97 	bl	8001b64 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001436:	2301      	movs	r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800143a:	23c0      	movs	r3, #192	; 0xc0
 800143c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800143e:	2302      	movs	r3, #2
 8001440:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4618      	mov	r0, r3
 8001448:	f004 febe 	bl	80061c8 <HAL_RCCEx_PeriphCLKConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8001452:	f000 fb87 	bl	8001b64 <Error_Handler>
  }
}
 8001456:	bf00      	nop
 8001458:	3760      	adds	r7, #96	; 0x60
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40007000 	.word	0x40007000

08001468 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	201c      	movs	r0, #28
 8001472:	f001 f838 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001476:	201c      	movs	r0, #28
 8001478:	f001 f851 	bl	800251e <HAL_NVIC_EnableIRQ>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001484:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <MX_I2C3_Init+0x50>)
 8001486:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <MX_I2C3_Init+0x54>)
 8001488:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800148a:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_I2C3_Init+0x50>)
 800148c:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <MX_I2C3_Init+0x58>)
 800148e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001490:	4b0f      	ldr	r3, [pc, #60]	; (80014d0 <MX_I2C3_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_I2C3_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <MX_I2C3_Init+0x50>)
 800149e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b0a      	ldr	r3, [pc, #40]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80014aa:	4b09      	ldr	r3, [pc, #36]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014b6:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80014bc:	4804      	ldr	r0, [pc, #16]	; (80014d0 <MX_I2C3_Init+0x50>)
 80014be:	f002 ff95 	bl	80043ec <HAL_I2C_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80014c8:	f000 fb4c 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000100 	.word	0x20000100
 80014d4:	40005c00 	.word	0x40005c00
 80014d8:	000186a0 	.word	0x000186a0

080014dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014e0:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_I2S3_Init+0x54>)
 80014e2:	4a14      	ldr	r2, [pc, #80]	; (8001534 <MX_I2S3_Init+0x58>)
 80014e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <MX_I2S3_Init+0x54>)
 80014e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_I2S3_Init+0x54>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_I2S3_Init+0x54>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <MX_I2S3_Init+0x54>)
 80014fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001500:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_I2S3_Init+0x54>)
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <MX_I2S3_Init+0x5c>)
 8001506:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_I2S3_Init+0x54>)
 800150a:	2200      	movs	r2, #0
 800150c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_I2S3_Init+0x54>)
 8001510:	2200      	movs	r2, #0
 8001512:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_I2S3_Init+0x54>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_I2S3_Init+0x54>)
 800151c:	f003 fd54 	bl	8004fc8 <HAL_I2S_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001526:	f000 fb1d 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	200002ec 	.word	0x200002ec
 8001534:	40003c00 	.word	0x40003c00
 8001538:	00017700 	.word	0x00017700

0800153c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_RNG_Init+0x20>)
 8001542:	4a07      	ldr	r2, [pc, #28]	; (8001560 <MX_RNG_Init+0x24>)
 8001544:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <MX_RNG_Init+0x20>)
 8001548:	f004 ff7e 	bl	8006448 <HAL_RNG_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001552:	f000 fb07 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000023c 	.word	0x2000023c
 8001560:	50060800 	.word	0x50060800

08001564 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001568:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_SPI1_Init+0x64>)
 800156a:	4a18      	ldr	r2, [pc, #96]	; (80015cc <MX_SPI1_Init+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800156e:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001570:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001574:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800157c:	4b12      	ldr	r3, [pc, #72]	; (80015c8 <MX_SPI1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001582:	4b11      	ldr	r3, [pc, #68]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001588:	4b0f      	ldr	r3, [pc, #60]	; (80015c8 <MX_SPI1_Init+0x64>)
 800158a:	2200      	movs	r2, #0
 800158c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800158e:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001594:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001596:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <MX_SPI1_Init+0x64>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <MX_SPI1_Init+0x64>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015a2:	4b09      	ldr	r3, [pc, #36]	; (80015c8 <MX_SPI1_Init+0x64>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	; (80015c8 <MX_SPI1_Init+0x64>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_SPI1_Init+0x64>)
 80015b0:	220a      	movs	r2, #10
 80015b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <MX_SPI1_Init+0x64>)
 80015b6:	f004 ffd5 	bl	8006564 <HAL_SPI_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80015c0:	f000 fad0 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000024c 	.word	0x2000024c
 80015cc:	40013000 	.word	0x40013000

080015d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_SPI2_Init+0x64>)
 80015d6:	4a18      	ldr	r2, [pc, #96]	; (8001638 <MX_SPI2_Init+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <MX_SPI2_Init+0x64>)
 80015dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_SPI2_Init+0x64>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_SPI2_Init+0x64>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_SPI2_Init+0x64>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_SPI2_Init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_SPI2_Init+0x64>)
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_SPI2_Init+0x64>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001608:	4b0a      	ldr	r3, [pc, #40]	; (8001634 <MX_SPI2_Init+0x64>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_SPI2_Init+0x64>)
 8001610:	2200      	movs	r2, #0
 8001612:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <MX_SPI2_Init+0x64>)
 8001616:	2200      	movs	r2, #0
 8001618:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_SPI2_Init+0x64>)
 800161c:	220a      	movs	r2, #10
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001620:	4804      	ldr	r0, [pc, #16]	; (8001634 <MX_SPI2_Init+0x64>)
 8001622:	f004 ff9f 	bl	8006564 <HAL_SPI_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800162c:	f000 fa9a 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20000154 	.word	0x20000154
 8001638:	40003800 	.word	0x40003800

0800163c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08c      	sub	sp, #48	; 0x30
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	2224      	movs	r2, #36	; 0x24
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f009 fce6 	bl	800b01c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <MX_TIM1_Init+0xa8>)
 800165a:	4a23      	ldr	r2, [pc, #140]	; (80016e8 <MX_TIM1_Init+0xac>)
 800165c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800165e:	4b21      	ldr	r3, [pc, #132]	; (80016e4 <MX_TIM1_Init+0xa8>)
 8001660:	2200      	movs	r2, #0
 8001662:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001664:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <MX_TIM1_Init+0xa8>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <MX_TIM1_Init+0xa8>)
 800166c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001670:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <MX_TIM1_Init+0xa8>)
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001678:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <MX_TIM1_Init+0xa8>)
 800167a:	2200      	movs	r2, #0
 800167c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <MX_TIM1_Init+0xa8>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001684:	2301      	movs	r3, #1
 8001686:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001688:	2300      	movs	r3, #0
 800168a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800168c:	2301      	movs	r3, #1
 800168e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001690:	2300      	movs	r3, #0
 8001692:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80016a8:	f107 030c 	add.w	r3, r7, #12
 80016ac:	4619      	mov	r1, r3
 80016ae:	480d      	ldr	r0, [pc, #52]	; (80016e4 <MX_TIM1_Init+0xa8>)
 80016b0:	f005 fc0f 	bl	8006ed2 <HAL_TIM_Encoder_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80016ba:	f000 fa53 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80016c6:	1d3b      	adds	r3, r7, #4
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <MX_TIM1_Init+0xa8>)
 80016cc:	f006 fa74 	bl	8007bb8 <HAL_TIMEx_MasterConfigSynchronization>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80016d6:	f000 fa45 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	; 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200001f4 	.word	0x200001f4
 80016e8:	40010000 	.word	0x40010000

080016ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001700:	463b      	mov	r3, r7
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_TIM2_Init+0x98>)
 800170a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800170e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 839;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_TIM2_Init+0x98>)
 8001712:	f240 3247 	movw	r2, #839	; 0x347
 8001716:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001718:	4b1a      	ldr	r3, [pc, #104]	; (8001784 <MX_TIM2_Init+0x98>)
 800171a:	2200      	movs	r2, #0
 800171c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 800171e:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_TIM2_Init+0x98>)
 8001720:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001724:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_TIM2_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_TIM2_Init+0x98>)
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001732:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_TIM2_Init+0x98>)
 8001734:	f005 f9a6 	bl	8006a84 <HAL_TIM_Base_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800173e:	f000 fa11 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001746:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001748:	f107 0308 	add.w	r3, r7, #8
 800174c:	4619      	mov	r1, r3
 800174e:	480d      	ldr	r0, [pc, #52]	; (8001784 <MX_TIM2_Init+0x98>)
 8001750:	f005 fe2c 	bl	80073ac <HAL_TIM_ConfigClockSource>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800175a:	f000 fa03 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800175e:	2310      	movs	r3, #16
 8001760:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001762:	2300      	movs	r3, #0
 8001764:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001766:	463b      	mov	r3, r7
 8001768:	4619      	mov	r1, r3
 800176a:	4806      	ldr	r0, [pc, #24]	; (8001784 <MX_TIM2_Init+0x98>)
 800176c:	f006 fa24 	bl	8007bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001776:	f000 f9f5 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200002a4 	.word	0x200002a4

08001788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08e      	sub	sp, #56	; 0x38
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800178e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
 80017b2:	611a      	str	r2, [r3, #16]
 80017b4:	615a      	str	r2, [r3, #20]
 80017b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017b8:	4b2b      	ldr	r3, [pc, #172]	; (8001868 <MX_TIM3_Init+0xe0>)
 80017ba:	4a2c      	ldr	r2, [pc, #176]	; (800186c <MX_TIM3_Init+0xe4>)
 80017bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 2099;
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <MX_TIM3_Init+0xe0>)
 80017c0:	f640 0233 	movw	r2, #2099	; 0x833
 80017c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <MX_TIM3_Init+0xe0>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 80017cc:	4b26      	ldr	r3, [pc, #152]	; (8001868 <MX_TIM3_Init+0xe0>)
 80017ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80017d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <MX_TIM3_Init+0xe0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <MX_TIM3_Init+0xe0>)
 80017dc:	2280      	movs	r2, #128	; 0x80
 80017de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017e0:	4821      	ldr	r0, [pc, #132]	; (8001868 <MX_TIM3_Init+0xe0>)
 80017e2:	f005 f94f 	bl	8006a84 <HAL_TIM_Base_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80017ec:	f000 f9ba 	bl	8001b64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fa:	4619      	mov	r1, r3
 80017fc:	481a      	ldr	r0, [pc, #104]	; (8001868 <MX_TIM3_Init+0xe0>)
 80017fe:	f005 fdd5 	bl	80073ac <HAL_TIM_ConfigClockSource>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001808:	f000 f9ac 	bl	8001b64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800180c:	4816      	ldr	r0, [pc, #88]	; (8001868 <MX_TIM3_Init+0xe0>)
 800180e:	f005 fb07 	bl	8006e20 <HAL_TIM_PWM_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001818:	f000 f9a4 	bl	8001b64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800181c:	2300      	movs	r3, #0
 800181e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001824:	f107 0320 	add.w	r3, r7, #32
 8001828:	4619      	mov	r1, r3
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <MX_TIM3_Init+0xe0>)
 800182c:	f006 f9c4 	bl	8007bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001836:	f000 f995 	bl	8001b64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183a:	2360      	movs	r3, #96	; 0x60
 800183c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800184a:	1d3b      	adds	r3, r7, #4
 800184c:	2200      	movs	r2, #0
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_TIM3_Init+0xe0>)
 8001852:	f005 fced 	bl	8007230 <HAL_TIM_PWM_ConfigChannel>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800185c:	f000 f982 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	3738      	adds	r7, #56	; 0x38
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200001ac 	.word	0x200001ac
 800186c:	40000400 	.word	0x40000400

08001870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
 800188a:	4baf      	ldr	r3, [pc, #700]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	4aae      	ldr	r2, [pc, #696]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 8001890:	f043 0310 	orr.w	r3, r3, #16
 8001894:	6313      	str	r3, [r2, #48]	; 0x30
 8001896:	4bac      	ldr	r3, [pc, #688]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	f003 0310 	and.w	r3, r3, #16
 800189e:	61bb      	str	r3, [r7, #24]
 80018a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	4ba8      	ldr	r3, [pc, #672]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	4aa7      	ldr	r2, [pc, #668]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	6313      	str	r3, [r2, #48]	; 0x30
 80018b2:	4ba5      	ldr	r3, [pc, #660]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	f003 0304 	and.w	r3, r3, #4
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	4ba1      	ldr	r3, [pc, #644]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4aa0      	ldr	r2, [pc, #640]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b9e      	ldr	r3, [pc, #632]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	4b9a      	ldr	r3, [pc, #616]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a99      	ldr	r2, [pc, #612]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b97      	ldr	r3, [pc, #604]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b93      	ldr	r3, [pc, #588]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a92      	ldr	r2, [pc, #584]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b90      	ldr	r3, [pc, #576]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	4b8c      	ldr	r3, [pc, #560]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a8b      	ldr	r2, [pc, #556]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 800191c:	f043 0308 	orr.w	r3, r3, #8
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b89      	ldr	r3, [pc, #548]	; (8001b48 <MX_GPIO_Init+0x2d8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0308 	and.w	r3, r3, #8
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 800192e:	2200      	movs	r2, #0
 8001930:	217c      	movs	r1, #124	; 0x7c
 8001932:	4886      	ldr	r0, [pc, #536]	; (8001b4c <MX_GPIO_Init+0x2dc>)
 8001934:	f000 ffc2 	bl	80028bc <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001938:	2201      	movs	r2, #1
 800193a:	2101      	movs	r1, #1
 800193c:	4884      	ldr	r0, [pc, #528]	; (8001b50 <MX_GPIO_Init+0x2e0>)
 800193e:	f000 ffbd 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001942:	2200      	movs	r2, #0
 8001944:	f64f 7110 	movw	r1, #65296	; 0xff10
 8001948:	4882      	ldr	r0, [pc, #520]	; (8001b54 <MX_GPIO_Init+0x2e4>)
 800194a:	f000 ffb7 	bl	80028bc <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_mcroSD_Pin|CS_M25Q_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 6104 	mov.w	r1, #2112	; 0x840
 8001954:	487e      	ldr	r0, [pc, #504]	; (8001b50 <MX_GPIO_Init+0x2e0>)
 8001956:	f000 ffb1 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 8001960:	487d      	ldr	r0, [pc, #500]	; (8001b58 <MX_GPIO_Init+0x2e8>)
 8001962:	f000 ffab 	bl	80028bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_LCD_Pin RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_LCD_Pin|RESET_LCD_Pin|DC_LCD_Pin;
 8001966:	2374      	movs	r3, #116	; 0x74
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001972:	2303      	movs	r3, #3
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4873      	ldr	r0, [pc, #460]	; (8001b4c <MX_GPIO_Init+0x2dc>)
 800197e:	f000 fde9 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001982:	2308      	movs	r3, #8
 8001984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001986:	2301      	movs	r3, #1
 8001988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001992:	f107 031c 	add.w	r3, r7, #28
 8001996:	4619      	mov	r1, r3
 8001998:	486c      	ldr	r0, [pc, #432]	; (8001b4c <MX_GPIO_Init+0x2dc>)
 800199a:	f000 fddb 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 800199e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4867      	ldr	r0, [pc, #412]	; (8001b50 <MX_GPIO_Init+0x2e0>)
 80019b4:	f000 fdce 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin CS_mcroSD_Pin CS_M25Q_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|CS_mcroSD_Pin|CS_M25Q_Pin;
 80019b8:	f640 0341 	movw	r3, #2113	; 0x841
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019be:	2301      	movs	r3, #1
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c6:	2300      	movs	r3, #0
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	485f      	ldr	r0, [pc, #380]	; (8001b50 <MX_GPIO_Init+0x2e0>)
 80019d2:	f000 fdbf 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019d6:	2308      	movs	r3, #8
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019da:	2302      	movs	r3, #2
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019e6:	2305      	movs	r3, #5
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80019ea:	f107 031c 	add.w	r3, r7, #28
 80019ee:	4619      	mov	r1, r3
 80019f0:	4857      	ldr	r0, [pc, #348]	; (8001b50 <MX_GPIO_Init+0x2e0>)
 80019f2:	f000 fdaf 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f6:	2301      	movs	r3, #1
 80019f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019fa:	4b58      	ldr	r3, [pc, #352]	; (8001b5c <MX_GPIO_Init+0x2ec>)
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	4855      	ldr	r0, [pc, #340]	; (8001b60 <MX_GPIO_Init+0x2f0>)
 8001a0a:	f000 fda3 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a0e:	2304      	movs	r3, #4
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 031c 	add.w	r3, r7, #28
 8001a1e:	4619      	mov	r1, r3
 8001a20:	484d      	ldr	r0, [pc, #308]	; (8001b58 <MX_GPIO_Init+0x2e8>)
 8001a22:	f000 fd97 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : encoder_button_Pin */
  GPIO_InitStruct.Pin = encoder_button_Pin;
 8001a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(encoder_button_GPIO_Port, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4844      	ldr	r0, [pc, #272]	; (8001b4c <MX_GPIO_Init+0x2dc>)
 8001a3c:	f000 fd8a 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a52:	2305      	movs	r3, #5
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	483e      	ldr	r0, [pc, #248]	; (8001b58 <MX_GPIO_Init+0x2e8>)
 8001a5e:	f000 fd79 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_COLUMN_3_Pin KEYBOARD_COLUMN_2_Pin KEYBOARD_COLUMN_1_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_COLUMN_3_Pin|KEYBOARD_COLUMN_2_Pin|KEYBOARD_COLUMN_1_Pin;
 8001a62:	f44f 43b0 	mov.w	r3, #22528	; 0x5800
 8001a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a70:	f107 031c 	add.w	r3, r7, #28
 8001a74:	4619      	mov	r1, r3
 8001a76:	4838      	ldr	r0, [pc, #224]	; (8001b58 <MX_GPIO_Init+0x2e8>)
 8001a78:	f000 fd6c 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYBOARD_ROW_4_Pin KEYBOARD_ROW_3_Pin KEYBOARD_ROW_2_Pin KEYBOARD_ROW_1_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = KEYBOARD_ROW_4_Pin|KEYBOARD_ROW_3_Pin|KEYBOARD_ROW_2_Pin|KEYBOARD_ROW_1_Pin
 8001a7c:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a80:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a82:	2301      	movs	r3, #1
 8001a84:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4619      	mov	r1, r3
 8001a94:	482f      	ldr	r0, [pc, #188]	; (8001b54 <MX_GPIO_Init+0x2e4>)
 8001a96:	f000 fd5d 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a9a:	2320      	movs	r3, #32
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa6:	f107 031c 	add.w	r3, r7, #28
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4829      	ldr	r0, [pc, #164]	; (8001b54 <MX_GPIO_Init+0x2e4>)
 8001aae:	f000 fd51 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ab2:	2340      	movs	r3, #64	; 0x40
 8001ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4823      	ldr	r0, [pc, #140]	; (8001b58 <MX_GPIO_Init+0x2e8>)
 8001aca:	f000 fd43 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8001ace:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae0:	f107 031c 	add.w	r3, r7, #28
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	481c      	ldr	r0, [pc, #112]	; (8001b58 <MX_GPIO_Init+0x2e8>)
 8001ae8:	f000 fd34 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8001aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001af0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001af2:	2312      	movs	r3, #18
 8001af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001af6:	2301      	movs	r3, #1
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001afe:	2304      	movs	r3, #4
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b02:	f107 031c 	add.w	r3, r7, #28
 8001b06:	4619      	mov	r1, r3
 8001b08:	4813      	ldr	r0, [pc, #76]	; (8001b58 <MX_GPIO_Init+0x2e8>)
 8001b0a:	f000 fd23 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b12:	2300      	movs	r3, #0
 8001b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480a      	ldr	r0, [pc, #40]	; (8001b4c <MX_GPIO_Init+0x2dc>)
 8001b22:	f000 fd17 	bl	8002554 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001b26:	2302      	movs	r3, #2
 8001b28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <MX_GPIO_Init+0x2ec>)
 8001b2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_GPIO_Init+0x2dc>)
 8001b3a:	f000 fd0b 	bl	8002554 <HAL_GPIO_Init>

}
 8001b3e:	bf00      	nop
 8001b40:	3730      	adds	r7, #48	; 0x30
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40020800 	.word	0x40020800
 8001b54:	40020c00 	.word	0x40020c00
 8001b58:	40020400 	.word	0x40020400
 8001b5c:	10120000 	.word	0x10120000
 8001b60:	40020000 	.word	0x40020000

08001b64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b68:	b672      	cpsid	i
}
 8001b6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <Error_Handler+0x8>
	...

08001b70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7e:	4a13      	ldr	r2, [pc, #76]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	; 0x44
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	603b      	str	r3, [r7, #0]
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	4a0c      	ldr	r2, [pc, #48]	; (8001bcc <HAL_MspInit+0x5c>)
 8001b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_MspInit+0x5c>)
 8001ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bae:	2007      	movs	r0, #7
 8001bb0:	f000 fc8e 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	2005      	movs	r0, #5
 8001bba:	f000 fc94 	bl	80024e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001bbe:	2005      	movs	r0, #5
 8001bc0:	f000 fcad 	bl	800251e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40023800 	.word	0x40023800

08001bd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a29      	ldr	r2, [pc, #164]	; (8001c94 <HAL_I2C_MspInit+0xc4>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d14b      	bne.n	8001c8a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <HAL_I2C_MspInit+0xc8>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a27      	ldr	r2, [pc, #156]	; (8001c98 <HAL_I2C_MspInit+0xc8>)
 8001bfc:	f043 0304 	orr.w	r3, r3, #4
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <HAL_I2C_MspInit+0xc8>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0304 	and.w	r3, r3, #4
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_I2C_MspInit+0xc8>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a20      	ldr	r2, [pc, #128]	; (8001c98 <HAL_I2C_MspInit+0xc8>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_I2C_MspInit+0xc8>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c30:	2312      	movs	r3, #18
 8001c32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c3c:	2304      	movs	r3, #4
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	4815      	ldr	r0, [pc, #84]	; (8001c9c <HAL_I2C_MspInit+0xcc>)
 8001c48:	f000 fc84 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c52:	2312      	movs	r3, #18
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c56:	2301      	movs	r3, #1
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <HAL_I2C_MspInit+0xd0>)
 8001c6a:	f000 fc73 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	4b09      	ldr	r3, [pc, #36]	; (8001c98 <HAL_I2C_MspInit+0xc8>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <HAL_I2C_MspInit+0xc8>)
 8001c78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7e:	4b06      	ldr	r3, [pc, #24]	; (8001c98 <HAL_I2C_MspInit+0xc8>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c86:	60bb      	str	r3, [r7, #8]
 8001c88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	; 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40005c00 	.word	0x40005c00
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020800 	.word	0x40020800
 8001ca0:	40020000 	.word	0x40020000

08001ca4 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <HAL_I2S_MspInit+0xc0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d14a      	bne.n	8001d5c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	613b      	str	r3, [r7, #16]
 8001cca:	4b27      	ldr	r3, [pc, #156]	; (8001d68 <HAL_I2S_MspInit+0xc4>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	4a26      	ldr	r2, [pc, #152]	; (8001d68 <HAL_I2S_MspInit+0xc4>)
 8001cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <HAL_I2S_MspInit+0xc4>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_I2S_MspInit+0xc4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a1f      	ldr	r2, [pc, #124]	; (8001d68 <HAL_I2S_MspInit+0xc4>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <HAL_I2S_MspInit+0xc4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
 8001d02:	4b19      	ldr	r3, [pc, #100]	; (8001d68 <HAL_I2S_MspInit+0xc4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <HAL_I2S_MspInit+0xc4>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_I2S_MspInit+0xc4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	60bb      	str	r3, [r7, #8]
 8001d18:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d2a:	2306      	movs	r3, #6
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	4619      	mov	r1, r3
 8001d34:	480d      	ldr	r0, [pc, #52]	; (8001d6c <HAL_I2S_MspInit+0xc8>)
 8001d36:	f000 fc0d 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d3a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	4619      	mov	r1, r3
 8001d56:	4806      	ldr	r0, [pc, #24]	; (8001d70 <HAL_I2S_MspInit+0xcc>)
 8001d58:	f000 fbfc 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	; 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40003c00 	.word	0x40003c00
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40020000 	.word	0x40020000
 8001d70:	40020800 	.word	0x40020800

08001d74 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0b      	ldr	r2, [pc, #44]	; (8001db0 <HAL_RNG_MspInit+0x3c>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d10d      	bne.n	8001da2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RNG_MspInit+0x40>)
 8001d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d8e:	4a09      	ldr	r2, [pc, #36]	; (8001db4 <HAL_RNG_MspInit+0x40>)
 8001d90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d94:	6353      	str	r3, [r2, #52]	; 0x34
 8001d96:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <HAL_RNG_MspInit+0x40>)
 8001d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	50060800 	.word	0x50060800
 8001db4:	40023800 	.word	0x40023800

08001db8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08c      	sub	sp, #48	; 0x30
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 031c 	add.w	r3, r7, #28
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a41      	ldr	r2, [pc, #260]	; (8001edc <HAL_SPI_MspInit+0x124>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d12c      	bne.n	8001e34 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61bb      	str	r3, [r7, #24]
 8001dde:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	4a3f      	ldr	r2, [pc, #252]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001de4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001de8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dea:	4b3d      	ldr	r3, [pc, #244]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df2:	61bb      	str	r3, [r7, #24]
 8001df4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	4b39      	ldr	r3, [pc, #228]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a38      	ldr	r2, [pc, #224]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e12:	23e0      	movs	r3, #224	; 0xe0
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e16:	2302      	movs	r3, #2
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e22:	2305      	movs	r3, #5
 8001e24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	482d      	ldr	r0, [pc, #180]	; (8001ee4 <HAL_SPI_MspInit+0x12c>)
 8001e2e:	f000 fb91 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e32:	e04f      	b.n	8001ed4 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a2b      	ldr	r2, [pc, #172]	; (8001ee8 <HAL_SPI_MspInit+0x130>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d14a      	bne.n	8001ed4 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b20      	ldr	r3, [pc, #128]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	4a18      	ldr	r2, [pc, #96]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	; 0x30
 8001e86:	4b16      	ldr	r3, [pc, #88]	; (8001ee0 <HAL_SPI_MspInit+0x128>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e92:	2304      	movs	r3, #4
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e96:	2302      	movs	r3, #2
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ea2:	2305      	movs	r3, #5
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	480f      	ldr	r0, [pc, #60]	; (8001eec <HAL_SPI_MspInit+0x134>)
 8001eae:	f000 fb51 	bl	8002554 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001eb2:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ec4:	2305      	movs	r3, #5
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4808      	ldr	r0, [pc, #32]	; (8001ef0 <HAL_SPI_MspInit+0x138>)
 8001ed0:	f000 fb40 	bl	8002554 <HAL_GPIO_Init>
}
 8001ed4:	bf00      	nop
 8001ed6:	3730      	adds	r7, #48	; 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40013000 	.word	0x40013000
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40003800 	.word	0x40003800
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020400 	.word	0x40020400

08001ef4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_TIM_Encoder_MspInit+0x84>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12c      	bne.n	8001f70 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b18      	ldr	r3, [pc, #96]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1e:	4a17      	ldr	r2, [pc, #92]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6453      	str	r3, [r2, #68]	; 0x44
 8001f26:	4b15      	ldr	r3, [pc, #84]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b11      	ldr	r3, [pc, #68]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001f3c:	f043 0310 	orr.w	r3, r3, #16
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_TIM_Encoder_MspInit+0x88>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0310 	and.w	r3, r3, #16
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001f4e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001f52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f60:	2301      	movs	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <HAL_TIM_Encoder_MspInit+0x8c>)
 8001f6c:	f000 faf2 	bl	8002554 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001f70:	bf00      	nop
 8001f72:	3728      	adds	r7, #40	; 0x28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40021000 	.word	0x40021000

08001f84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f94:	d10e      	bne.n	8001fb4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_TIM_Base_MspInit+0x70>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a15      	ldr	r2, [pc, #84]	; (8001ff4 <HAL_TIM_Base_MspInit+0x70>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_TIM_Base_MspInit+0x70>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fb2:	e01a      	b.n	8001fea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ff8 <HAL_TIM_Base_MspInit+0x74>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d115      	bne.n	8001fea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <HAL_TIM_Base_MspInit+0x70>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <HAL_TIM_Base_MspInit+0x70>)
 8001fc8:	f043 0302 	orr.w	r3, r3, #2
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <HAL_TIM_Base_MspInit+0x70>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	201d      	movs	r0, #29
 8001fe0:	f000 fa81 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fe4:	201d      	movs	r0, #29
 8001fe6:	f000 fa9a 	bl	800251e <HAL_NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023800 	.word	0x40023800
 8001ff8:	40000400 	.word	0x40000400

08001ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002000:	e7fe      	b.n	8002000 <NMI_Handler+0x4>

08002002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002006:	e7fe      	b.n	8002006 <HardFault_Handler+0x4>

08002008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800200c:	e7fe      	b.n	800200c <MemManage_Handler+0x4>

0800200e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002012:	e7fe      	b.n	8002012 <BusFault_Handler+0x4>

08002014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002018:	e7fe      	b.n	8002018 <UsageFault_Handler+0x4>

0800201a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002048:	f000 f92e 	bl	80022a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	bd80      	pop	{r7, pc}

08002050 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
	...

08002060 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //const int i = 0;
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);			// For
 8002064:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002068:	481b      	ldr	r0, [pc, #108]	; (80020d8 <TIM2_IRQHandler+0x78>)
 800206a:	f000 fc40 	bl	80028ee <HAL_GPIO_TogglePin>
  // Changing duty cycle every interrupt. (Period = 0,01 sec)
  // Duty cycle from 0 to 100 and back
  if(movement == 0)			// Up
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <TIM2_IRQHandler+0x7c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d111      	bne.n	800209a <TIM2_IRQHandler+0x3a>
  {
	  if(i <= 200)
 8002076:	4b1a      	ldr	r3, [pc, #104]	; (80020e0 <TIM2_IRQHandler+0x80>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2bc8      	cmp	r3, #200	; 0xc8
 800207c:	dc0a      	bgt.n	8002094 <TIM2_IRQHandler+0x34>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 800207e:	4b18      	ldr	r3, [pc, #96]	; (80020e0 <TIM2_IRQHandler+0x80>)
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	4b18      	ldr	r3, [pc, #96]	; (80020e4 <TIM2_IRQHandler+0x84>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	635a      	str	r2, [r3, #52]	; 0x34
		  i++;
 8002088:	4b15      	ldr	r3, [pc, #84]	; (80020e0 <TIM2_IRQHandler+0x80>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	4a14      	ldr	r2, [pc, #80]	; (80020e0 <TIM2_IRQHandler+0x80>)
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e002      	b.n	800209a <TIM2_IRQHandler+0x3a>
	  }
	  else
	  {
		  movement = 1;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <TIM2_IRQHandler+0x7c>)
 8002096:	2201      	movs	r2, #1
 8002098:	601a      	str	r2, [r3, #0]
	  }
  }


  if(movement == 1)			// Down
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <TIM2_IRQHandler+0x7c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d114      	bne.n	80020cc <TIM2_IRQHandler+0x6c>
  {
	  if( i >= 100)
 80020a2:	4b0f      	ldr	r3, [pc, #60]	; (80020e0 <TIM2_IRQHandler+0x80>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b63      	cmp	r3, #99	; 0x63
 80020a8:	dd0a      	ble.n	80020c0 <TIM2_IRQHandler+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, i);
 80020aa:	4b0d      	ldr	r3, [pc, #52]	; (80020e0 <TIM2_IRQHandler+0x80>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	4b0d      	ldr	r3, [pc, #52]	; (80020e4 <TIM2_IRQHandler+0x84>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	635a      	str	r2, [r3, #52]	; 0x34
		  i--;
 80020b4:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <TIM2_IRQHandler+0x80>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3b01      	subs	r3, #1
 80020ba:	4a09      	ldr	r2, [pc, #36]	; (80020e0 <TIM2_IRQHandler+0x80>)
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e005      	b.n	80020cc <TIM2_IRQHandler+0x6c>
	  }
	  else
	  {
		  movement = 0;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <TIM2_IRQHandler+0x7c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
		  i = 100;
 80020c6:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <TIM2_IRQHandler+0x80>)
 80020c8:	2264      	movs	r2, #100	; 0x64
 80020ca:	601a      	str	r2, [r3, #0]
	  }
  }

 //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020cc:	4805      	ldr	r0, [pc, #20]	; (80020e4 <TIM2_IRQHandler+0x84>)
 80020ce:	f004 ffa6 	bl	800701e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40020c00 	.word	0x40020c00
 80020dc:	200000c4 	.word	0x200000c4
 80020e0:	2000000c 	.word	0x2000000c
 80020e4:	200002a4 	.word	0x200002a4

080020e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80020ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020f0:	4804      	ldr	r0, [pc, #16]	; (8002104 <TIM3_IRQHandler+0x1c>)
 80020f2:	f000 fbfc 	bl	80028ee <HAL_GPIO_TogglePin>
  read_digits();
 80020f6:	f7fe fed1 	bl	8000e9c <read_digits>

	//keyboard_test();
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020fa:	4803      	ldr	r0, [pc, #12]	; (8002108 <TIM3_IRQHandler+0x20>)
 80020fc:	f004 ff8f 	bl	800701e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40020c00 	.word	0x40020c00
 8002108:	200001ac 	.word	0x200001ac

0800210c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <OTG_FS_IRQHandler+0x10>)
 8002112:	f000 fe71 	bl	8002df8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20000710 	.word	0x20000710

08002120 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002128:	4a14      	ldr	r2, [pc, #80]	; (800217c <_sbrk+0x5c>)
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <_sbrk+0x60>)
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002134:	4b13      	ldr	r3, [pc, #76]	; (8002184 <_sbrk+0x64>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800213c:	4b11      	ldr	r3, [pc, #68]	; (8002184 <_sbrk+0x64>)
 800213e:	4a12      	ldr	r2, [pc, #72]	; (8002188 <_sbrk+0x68>)
 8002140:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002142:	4b10      	ldr	r3, [pc, #64]	; (8002184 <_sbrk+0x64>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4413      	add	r3, r2
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	429a      	cmp	r2, r3
 800214e:	d207      	bcs.n	8002160 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002150:	f008 ff2a 	bl	800afa8 <__errno>
 8002154:	4603      	mov	r3, r0
 8002156:	220c      	movs	r2, #12
 8002158:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800215a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215e:	e009      	b.n	8002174 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002166:	4b07      	ldr	r3, [pc, #28]	; (8002184 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	4a05      	ldr	r2, [pc, #20]	; (8002184 <_sbrk+0x64>)
 8002170:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3718      	adds	r7, #24
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20020000 	.word	0x20020000
 8002180:	00000400 	.word	0x00000400
 8002184:	200000c8 	.word	0x200000c8
 8002188:	20000a28 	.word	0x20000a28

0800218c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002190:	4b06      	ldr	r3, [pc, #24]	; (80021ac <SystemInit+0x20>)
 8002192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <SystemInit+0x20>)
 8002198:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800219c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a0:	bf00      	nop
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b4:	480d      	ldr	r0, [pc, #52]	; (80021ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021b6:	490e      	ldr	r1, [pc, #56]	; (80021f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021bc:	e002      	b.n	80021c4 <LoopCopyDataInit>

080021be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c2:	3304      	adds	r3, #4

080021c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c8:	d3f9      	bcc.n	80021be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ca:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021cc:	4c0b      	ldr	r4, [pc, #44]	; (80021fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d0:	e001      	b.n	80021d6 <LoopFillZerobss>

080021d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d4:	3204      	adds	r2, #4

080021d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d8:	d3fb      	bcc.n	80021d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021da:	f7ff ffd7 	bl	800218c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021de:	f008 fee9 	bl	800afb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e2:	f7ff f861 	bl	80012a8 <main>
  bx  lr    
 80021e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f0:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80021f4:	0800b200 	.word	0x0800b200
  ldr r2, =_sbss
 80021f8:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80021fc:	20000a24 	.word	0x20000a24

08002200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC_IRQHandler>
	...

08002204 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <HAL_Init+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <HAL_Init+0x40>)
 800220e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002212:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002214:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <HAL_Init+0x40>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a0a      	ldr	r2, [pc, #40]	; (8002244 <HAL_Init+0x40>)
 800221a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800221e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002220:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_Init+0x40>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a07      	ldr	r2, [pc, #28]	; (8002244 <HAL_Init+0x40>)
 8002226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f94f 	bl	80024d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	2000      	movs	r0, #0
 8002234:	f000 f808 	bl	8002248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff fc9a 	bl	8001b70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40023c00 	.word	0x40023c00

08002248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x54>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_InitTick+0x58>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002262:	fbb2 f3f3 	udiv	r3, r2, r3
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f967 	bl	800253a <HAL_SYSTICK_Config>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00e      	b.n	8002294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b0f      	cmp	r3, #15
 800227a:	d80a      	bhi.n	8002292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800227c:	2200      	movs	r2, #0
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002284:	f000 f92f 	bl	80024e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <HAL_InitTick+0x5c>)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	e000      	b.n	8002294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
}
 8002294:	4618      	mov	r0, r3
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	20000010 	.word	0x20000010
 80022a0:	20000018 	.word	0x20000018
 80022a4:	20000014 	.word	0x20000014

080022a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x20>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_IncTick+0x24>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4413      	add	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_IncTick+0x24>)
 80022ba:	6013      	str	r3, [r2, #0]
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000018 	.word	0x20000018
 80022cc:	20000334 	.word	0x20000334

080022d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  return uwTick;
 80022d4:	4b03      	ldr	r3, [pc, #12]	; (80022e4 <HAL_GetTick+0x14>)
 80022d6:	681b      	ldr	r3, [r3, #0]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000334 	.word	0x20000334

080022e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff ffee 	bl	80022d0 <HAL_GetTick>
 80022f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002300:	d005      	beq.n	800230e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002302:	4b0a      	ldr	r3, [pc, #40]	; (800232c <HAL_Delay+0x44>)
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4413      	add	r3, r2
 800230c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800230e:	bf00      	nop
 8002310:	f7ff ffde 	bl	80022d0 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	429a      	cmp	r2, r3
 800231e:	d8f7      	bhi.n	8002310 <HAL_Delay+0x28>
  {
  }
}
 8002320:	bf00      	nop
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	20000018 	.word	0x20000018

08002330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002346:	68ba      	ldr	r2, [r7, #8]
 8002348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800234c:	4013      	ands	r3, r2
 800234e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800235c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002362:	4a04      	ldr	r2, [pc, #16]	; (8002374 <__NVIC_SetPriorityGrouping+0x44>)
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	60d3      	str	r3, [r2, #12]
}
 8002368:	bf00      	nop
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <__NVIC_GetPriorityGrouping+0x18>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	f003 0307 	and.w	r3, r3, #7
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0b      	blt.n	80023be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a6:	79fb      	ldrb	r3, [r7, #7]
 80023a8:	f003 021f 	and.w	r2, r3, #31
 80023ac:	4907      	ldr	r1, [pc, #28]	; (80023cc <__NVIC_EnableIRQ+0x38>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	095b      	lsrs	r3, r3, #5
 80023b4:	2001      	movs	r0, #1
 80023b6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023be:	bf00      	nop
 80023c0:	370c      	adds	r7, #12
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	e000e100 	.word	0xe000e100

080023d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	6039      	str	r1, [r7, #0]
 80023da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	db0a      	blt.n	80023fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	490c      	ldr	r1, [pc, #48]	; (800241c <__NVIC_SetPriority+0x4c>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	0112      	lsls	r2, r2, #4
 80023f0:	b2d2      	uxtb	r2, r2
 80023f2:	440b      	add	r3, r1
 80023f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f8:	e00a      	b.n	8002410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	4908      	ldr	r1, [pc, #32]	; (8002420 <__NVIC_SetPriority+0x50>)
 8002400:	79fb      	ldrb	r3, [r7, #7]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	3b04      	subs	r3, #4
 8002408:	0112      	lsls	r2, r2, #4
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	440b      	add	r3, r1
 800240e:	761a      	strb	r2, [r3, #24]
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	e000e100 	.word	0xe000e100
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002424:	b480      	push	{r7}
 8002426:	b089      	sub	sp, #36	; 0x24
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f1c3 0307 	rsb	r3, r3, #7
 800243e:	2b04      	cmp	r3, #4
 8002440:	bf28      	it	cs
 8002442:	2304      	movcs	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	3304      	adds	r3, #4
 800244a:	2b06      	cmp	r3, #6
 800244c:	d902      	bls.n	8002454 <NVIC_EncodePriority+0x30>
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	3b03      	subs	r3, #3
 8002452:	e000      	b.n	8002456 <NVIC_EncodePriority+0x32>
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43da      	mvns	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	401a      	ands	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800246c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	fa01 f303 	lsl.w	r3, r1, r3
 8002476:	43d9      	mvns	r1, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	4313      	orrs	r3, r2
         );
}
 800247e:	4618      	mov	r0, r3
 8002480:	3724      	adds	r7, #36	; 0x24
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
	...

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024b0:	f7ff ff8e 	bl	80023d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	; (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff ff29 	bl	8002330 <__NVIC_SetPriorityGrouping>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b086      	sub	sp, #24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	607a      	str	r2, [r7, #4]
 80024f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f8:	f7ff ff3e 	bl	8002378 <__NVIC_GetPriorityGrouping>
 80024fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	6978      	ldr	r0, [r7, #20]
 8002504:	f7ff ff8e 	bl	8002424 <NVIC_EncodePriority>
 8002508:	4602      	mov	r2, r0
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	4611      	mov	r1, r2
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff5d 	bl	80023d0 <__NVIC_SetPriority>
}
 8002516:	bf00      	nop
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	4603      	mov	r3, r0
 8002526:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002528:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff ff31 	bl	8002394 <__NVIC_EnableIRQ>
}
 8002532:	bf00      	nop
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7ff ffa2 	bl	800248c <SysTick_Config>
 8002548:	4603      	mov	r3, r0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
	...

08002554 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800255e:	2300      	movs	r3, #0
 8002560:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002566:	2300      	movs	r3, #0
 8002568:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256a:	2300      	movs	r3, #0
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e16b      	b.n	8002848 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002570:	2201      	movs	r2, #1
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 815a 	bne.w	8002842 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f003 0303 	and.w	r3, r3, #3
 8002596:	2b01      	cmp	r3, #1
 8002598:	d005      	beq.n	80025a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d130      	bne.n	8002608 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	2203      	movs	r2, #3
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	68da      	ldr	r2, [r3, #12]
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025dc:	2201      	movs	r2, #1
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	43db      	mvns	r3, r3
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4013      	ands	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 0201 	and.w	r2, r3, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b03      	cmp	r3, #3
 8002612:	d017      	beq.n	8002644 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	2203      	movs	r2, #3
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	fa02 f303 	lsl.w	r3, r2, r3
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	4313      	orrs	r3, r2
 800263c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d123      	bne.n	8002698 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	08da      	lsrs	r2, r3, #3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3208      	adds	r2, #8
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	220f      	movs	r2, #15
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f003 0307 	and.w	r3, r3, #7
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	08da      	lsrs	r2, r3, #3
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3208      	adds	r2, #8
 8002692:	69b9      	ldr	r1, [r7, #24]
 8002694:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0203 	and.w	r2, r3, #3
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	005b      	lsls	r3, r3, #1
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80b4 	beq.w	8002842 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	4b60      	ldr	r3, [pc, #384]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e2:	4a5f      	ldr	r2, [pc, #380]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026e8:	6453      	str	r3, [r2, #68]	; 0x44
 80026ea:	4b5d      	ldr	r3, [pc, #372]	; (8002860 <HAL_GPIO_Init+0x30c>)
 80026ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_GPIO_Init+0x310>)
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a52      	ldr	r2, [pc, #328]	; (8002868 <HAL_GPIO_Init+0x314>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d02b      	beq.n	800277a <HAL_GPIO_Init+0x226>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a51      	ldr	r2, [pc, #324]	; (800286c <HAL_GPIO_Init+0x318>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d025      	beq.n	8002776 <HAL_GPIO_Init+0x222>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a50      	ldr	r2, [pc, #320]	; (8002870 <HAL_GPIO_Init+0x31c>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d01f      	beq.n	8002772 <HAL_GPIO_Init+0x21e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a4f      	ldr	r2, [pc, #316]	; (8002874 <HAL_GPIO_Init+0x320>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d019      	beq.n	800276e <HAL_GPIO_Init+0x21a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_GPIO_Init+0x324>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_GPIO_Init+0x216>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a4d      	ldr	r2, [pc, #308]	; (800287c <HAL_GPIO_Init+0x328>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d00d      	beq.n	8002766 <HAL_GPIO_Init+0x212>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a4c      	ldr	r2, [pc, #304]	; (8002880 <HAL_GPIO_Init+0x32c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d007      	beq.n	8002762 <HAL_GPIO_Init+0x20e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a4b      	ldr	r2, [pc, #300]	; (8002884 <HAL_GPIO_Init+0x330>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_GPIO_Init+0x20a>
 800275a:	2307      	movs	r3, #7
 800275c:	e00e      	b.n	800277c <HAL_GPIO_Init+0x228>
 800275e:	2308      	movs	r3, #8
 8002760:	e00c      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002762:	2306      	movs	r3, #6
 8002764:	e00a      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002766:	2305      	movs	r3, #5
 8002768:	e008      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276a:	2304      	movs	r3, #4
 800276c:	e006      	b.n	800277c <HAL_GPIO_Init+0x228>
 800276e:	2303      	movs	r3, #3
 8002770:	e004      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002772:	2302      	movs	r3, #2
 8002774:	e002      	b.n	800277c <HAL_GPIO_Init+0x228>
 8002776:	2301      	movs	r3, #1
 8002778:	e000      	b.n	800277c <HAL_GPIO_Init+0x228>
 800277a:	2300      	movs	r3, #0
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	f002 0203 	and.w	r2, r2, #3
 8002782:	0092      	lsls	r2, r2, #2
 8002784:	4093      	lsls	r3, r2
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	4313      	orrs	r3, r2
 800278a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800278c:	4935      	ldr	r1, [pc, #212]	; (8002864 <HAL_GPIO_Init+0x310>)
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	089b      	lsrs	r3, r3, #2
 8002792:	3302      	adds	r3, #2
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800279a:	4b3b      	ldr	r3, [pc, #236]	; (8002888 <HAL_GPIO_Init+0x334>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	43db      	mvns	r3, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4013      	ands	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027be:	4a32      	ldr	r2, [pc, #200]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027e8:	4a27      	ldr	r2, [pc, #156]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027ee:	4b26      	ldr	r3, [pc, #152]	; (8002888 <HAL_GPIO_Init+0x334>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002812:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_GPIO_Init+0x334>)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <HAL_GPIO_Init+0x334>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800283c:	4a12      	ldr	r2, [pc, #72]	; (8002888 <HAL_GPIO_Init+0x334>)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	3301      	adds	r3, #1
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	f67f ae90 	bls.w	8002570 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3724      	adds	r7, #36	; 0x24
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	40023800 	.word	0x40023800
 8002864:	40013800 	.word	0x40013800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800
 8002874:	40020c00 	.word	0x40020c00
 8002878:	40021000 	.word	0x40021000
 800287c:	40021400 	.word	0x40021400
 8002880:	40021800 	.word	0x40021800
 8002884:	40021c00 	.word	0x40021c00
 8002888:	40013c00 	.word	0x40013c00

0800288c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
 80028a8:	e001      	b.n	80028ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028aa:	2300      	movs	r3, #0
 80028ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3714      	adds	r7, #20
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	460b      	mov	r3, r1
 80028c6:	807b      	strh	r3, [r7, #2]
 80028c8:	4613      	mov	r3, r2
 80028ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028cc:	787b      	ldrb	r3, [r7, #1]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028d2:	887a      	ldrh	r2, [r7, #2]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028d8:	e003      	b.n	80028e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028da:	887b      	ldrh	r3, [r7, #2]
 80028dc:	041a      	lsls	r2, r3, #16
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	619a      	str	r2, [r3, #24]
}
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	460b      	mov	r3, r1
 80028f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002900:	887a      	ldrh	r2, [r7, #2]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	4013      	ands	r3, r2
 8002906:	041a      	lsls	r2, r3, #16
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	43d9      	mvns	r1, r3
 800290c:	887b      	ldrh	r3, [r7, #2]
 800290e:	400b      	ands	r3, r1
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	619a      	str	r2, [r3, #24]
}
 8002916:	bf00      	nop
 8002918:	3714      	adds	r7, #20
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002922:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002924:	b08f      	sub	sp, #60	; 0x3c
 8002926:	af0a      	add	r7, sp, #40	; 0x28
 8002928:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d101      	bne.n	8002934 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e054      	b.n	80029de <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f008 f880 	bl	800aa54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2200      	movs	r2, #0
 800296c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4618      	mov	r0, r3
 8002974:	f005 fa22 	bl	8007dbc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	603b      	str	r3, [r7, #0]
 800297e:	687e      	ldr	r6, [r7, #4]
 8002980:	466d      	mov	r5, sp
 8002982:	f106 0410 	add.w	r4, r6, #16
 8002986:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002988:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800298c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800298e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002992:	e885 0003 	stmia.w	r5, {r0, r1}
 8002996:	1d33      	adds	r3, r6, #4
 8002998:	cb0e      	ldmia	r3, {r1, r2, r3}
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	f005 f99c 	bl	8007cd8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 fa19 	bl	8007dde <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	687e      	ldr	r6, [r7, #4]
 80029b4:	466d      	mov	r5, sp
 80029b6:	f106 0410 	add.w	r4, r6, #16
 80029ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80029ca:	1d33      	adds	r3, r6, #4
 80029cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029ce:	6838      	ldr	r0, [r7, #0]
 80029d0:	f005 fb2c 	bl	800802c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3714      	adds	r7, #20
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029e6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80029e6:	b590      	push	{r4, r7, lr}
 80029e8:	b089      	sub	sp, #36	; 0x24
 80029ea:	af04      	add	r7, sp, #16
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	4608      	mov	r0, r1
 80029f0:	4611      	mov	r1, r2
 80029f2:	461a      	mov	r2, r3
 80029f4:	4603      	mov	r3, r0
 80029f6:	70fb      	strb	r3, [r7, #3]
 80029f8:	460b      	mov	r3, r1
 80029fa:	70bb      	strb	r3, [r7, #2]
 80029fc:	4613      	mov	r3, r2
 80029fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d101      	bne.n	8002a0e <HAL_HCD_HC_Init+0x28>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e076      	b.n	8002afc <HAL_HCD_HC_Init+0x116>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a16:	78fb      	ldrb	r3, [r7, #3]
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	212c      	movs	r1, #44	; 0x2c
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	4413      	add	r3, r2
 8002a22:	333d      	adds	r3, #61	; 0x3d
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a28:	78fb      	ldrb	r3, [r7, #3]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3338      	adds	r3, #56	; 0x38
 8002a36:	787a      	ldrb	r2, [r7, #1]
 8002a38:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	212c      	movs	r1, #44	; 0x2c
 8002a40:	fb01 f303 	mul.w	r3, r1, r3
 8002a44:	4413      	add	r3, r2
 8002a46:	3340      	adds	r3, #64	; 0x40
 8002a48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a4a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a4c:	78fb      	ldrb	r3, [r7, #3]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3339      	adds	r3, #57	; 0x39
 8002a5a:	78fa      	ldrb	r2, [r7, #3]
 8002a5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	333f      	adds	r3, #63	; 0x3f
 8002a6c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002a70:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	78ba      	ldrb	r2, [r7, #2]
 8002a76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a7a:	b2d0      	uxtb	r0, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	212c      	movs	r1, #44	; 0x2c
 8002a80:	fb01 f303 	mul.w	r3, r1, r3
 8002a84:	4413      	add	r3, r2
 8002a86:	333a      	adds	r3, #58	; 0x3a
 8002a88:	4602      	mov	r2, r0
 8002a8a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002a8c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	da09      	bge.n	8002aa8 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	333b      	adds	r3, #59	; 0x3b
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e008      	b.n	8002aba <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	212c      	movs	r1, #44	; 0x2c
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	333b      	adds	r3, #59	; 0x3b
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	212c      	movs	r1, #44	; 0x2c
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	333c      	adds	r3, #60	; 0x3c
 8002ac8:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002acc:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6818      	ldr	r0, [r3, #0]
 8002ad2:	787c      	ldrb	r4, [r7, #1]
 8002ad4:	78ba      	ldrb	r2, [r7, #2]
 8002ad6:	78f9      	ldrb	r1, [r7, #3]
 8002ad8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ada:	9302      	str	r3, [sp, #8]
 8002adc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	4623      	mov	r3, r4
 8002aea:	f005 fc21 	bl	8008330 <USB_HC_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3714      	adds	r7, #20
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd90      	pop	{r4, r7, pc}

08002b04 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_HCD_HC_Halt+0x1e>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e00f      	b.n	8002b42 <HAL_HCD_HC_Halt+0x3e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	4611      	mov	r1, r2
 8002b32:	4618      	mov	r0, r3
 8002b34:	f005 fe5d 	bl	80087f2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	4608      	mov	r0, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	70fb      	strb	r3, [r7, #3]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70bb      	strb	r3, [r7, #2]
 8002b62:	4613      	mov	r3, r2
 8002b64:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	212c      	movs	r1, #44	; 0x2c
 8002b6c:	fb01 f303 	mul.w	r3, r1, r3
 8002b70:	4413      	add	r3, r2
 8002b72:	333b      	adds	r3, #59	; 0x3b
 8002b74:	78ba      	ldrb	r2, [r7, #2]
 8002b76:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	212c      	movs	r1, #44	; 0x2c
 8002b7e:	fb01 f303 	mul.w	r3, r1, r3
 8002b82:	4413      	add	r3, r2
 8002b84:	333f      	adds	r3, #63	; 0x3f
 8002b86:	787a      	ldrb	r2, [r7, #1]
 8002b88:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002b8a:	7c3b      	ldrb	r3, [r7, #16]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d112      	bne.n	8002bb6 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002b90:	78fb      	ldrb	r3, [r7, #3]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	212c      	movs	r1, #44	; 0x2c
 8002b96:	fb01 f303 	mul.w	r3, r1, r3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	3342      	adds	r3, #66	; 0x42
 8002b9e:	2203      	movs	r2, #3
 8002ba0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ba2:	78fb      	ldrb	r3, [r7, #3]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	212c      	movs	r1, #44	; 0x2c
 8002ba8:	fb01 f303 	mul.w	r3, r1, r3
 8002bac:	4413      	add	r3, r2
 8002bae:	333d      	adds	r3, #61	; 0x3d
 8002bb0:	7f3a      	ldrb	r2, [r7, #28]
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e008      	b.n	8002bc8 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bb6:	78fb      	ldrb	r3, [r7, #3]
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	212c      	movs	r1, #44	; 0x2c
 8002bbc:	fb01 f303 	mul.w	r3, r1, r3
 8002bc0:	4413      	add	r3, r2
 8002bc2:	3342      	adds	r3, #66	; 0x42
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	f200 80c6 	bhi.w	8002d5c <HAL_HCD_HC_SubmitRequest+0x210>
 8002bd0:	a201      	add	r2, pc, #4	; (adr r2, 8002bd8 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002be9 	.word	0x08002be9
 8002bdc:	08002d49 	.word	0x08002d49
 8002be0:	08002c4d 	.word	0x08002c4d
 8002be4:	08002ccb 	.word	0x08002ccb
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002be8:	7c3b      	ldrb	r3, [r7, #16]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	f040 80b8 	bne.w	8002d60 <HAL_HCD_HC_SubmitRequest+0x214>
 8002bf0:	78bb      	ldrb	r3, [r7, #2]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f040 80b4 	bne.w	8002d60 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002bf8:	8b3b      	ldrh	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d108      	bne.n	8002c10 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3355      	adds	r3, #85	; 0x55
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	212c      	movs	r1, #44	; 0x2c
 8002c16:	fb01 f303 	mul.w	r3, r1, r3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3355      	adds	r3, #85	; 0x55
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d109      	bne.n	8002c38 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	212c      	movs	r1, #44	; 0x2c
 8002c2a:	fb01 f303 	mul.w	r3, r1, r3
 8002c2e:	4413      	add	r3, r2
 8002c30:	3342      	adds	r3, #66	; 0x42
 8002c32:	2200      	movs	r2, #0
 8002c34:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c36:	e093      	b.n	8002d60 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c38:	78fb      	ldrb	r3, [r7, #3]
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	212c      	movs	r1, #44	; 0x2c
 8002c3e:	fb01 f303 	mul.w	r3, r1, r3
 8002c42:	4413      	add	r3, r2
 8002c44:	3342      	adds	r3, #66	; 0x42
 8002c46:	2202      	movs	r2, #2
 8002c48:	701a      	strb	r2, [r3, #0]
      break;
 8002c4a:	e089      	b.n	8002d60 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c4c:	78bb      	ldrb	r3, [r7, #2]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d11d      	bne.n	8002c8e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c52:	78fb      	ldrb	r3, [r7, #3]
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	212c      	movs	r1, #44	; 0x2c
 8002c58:	fb01 f303 	mul.w	r3, r1, r3
 8002c5c:	4413      	add	r3, r2
 8002c5e:	3355      	adds	r3, #85	; 0x55
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d109      	bne.n	8002c7a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c66:	78fb      	ldrb	r3, [r7, #3]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	212c      	movs	r1, #44	; 0x2c
 8002c6c:	fb01 f303 	mul.w	r3, r1, r3
 8002c70:	4413      	add	r3, r2
 8002c72:	3342      	adds	r3, #66	; 0x42
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002c78:	e073      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c7a:	78fb      	ldrb	r3, [r7, #3]
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	212c      	movs	r1, #44	; 0x2c
 8002c80:	fb01 f303 	mul.w	r3, r1, r3
 8002c84:	4413      	add	r3, r2
 8002c86:	3342      	adds	r3, #66	; 0x42
 8002c88:	2202      	movs	r2, #2
 8002c8a:	701a      	strb	r2, [r3, #0]
      break;
 8002c8c:	e069      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	212c      	movs	r1, #44	; 0x2c
 8002c94:	fb01 f303 	mul.w	r3, r1, r3
 8002c98:	4413      	add	r3, r2
 8002c9a:	3354      	adds	r3, #84	; 0x54
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ca2:	78fb      	ldrb	r3, [r7, #3]
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	212c      	movs	r1, #44	; 0x2c
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	3342      	adds	r3, #66	; 0x42
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
      break;
 8002cb4:	e055      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	212c      	movs	r1, #44	; 0x2c
 8002cbc:	fb01 f303 	mul.w	r3, r1, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3342      	adds	r3, #66	; 0x42
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	701a      	strb	r2, [r3, #0]
      break;
 8002cc8:	e04b      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002cca:	78bb      	ldrb	r3, [r7, #2]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d11d      	bne.n	8002d0c <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002cd0:	78fb      	ldrb	r3, [r7, #3]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	212c      	movs	r1, #44	; 0x2c
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
 8002cda:	4413      	add	r3, r2
 8002cdc:	3355      	adds	r3, #85	; 0x55
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ce4:	78fb      	ldrb	r3, [r7, #3]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	212c      	movs	r1, #44	; 0x2c
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	3342      	adds	r3, #66	; 0x42
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002cf6:	e034      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cf8:	78fb      	ldrb	r3, [r7, #3]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	212c      	movs	r1, #44	; 0x2c
 8002cfe:	fb01 f303 	mul.w	r3, r1, r3
 8002d02:	4413      	add	r3, r2
 8002d04:	3342      	adds	r3, #66	; 0x42
 8002d06:	2202      	movs	r2, #2
 8002d08:	701a      	strb	r2, [r3, #0]
      break;
 8002d0a:	e02a      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	212c      	movs	r1, #44	; 0x2c
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	3354      	adds	r3, #84	; 0x54
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d109      	bne.n	8002d34 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	212c      	movs	r1, #44	; 0x2c
 8002d26:	fb01 f303 	mul.w	r3, r1, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3342      	adds	r3, #66	; 0x42
 8002d2e:	2200      	movs	r2, #0
 8002d30:	701a      	strb	r2, [r3, #0]
      break;
 8002d32:	e016      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d34:	78fb      	ldrb	r3, [r7, #3]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	212c      	movs	r1, #44	; 0x2c
 8002d3a:	fb01 f303 	mul.w	r3, r1, r3
 8002d3e:	4413      	add	r3, r2
 8002d40:	3342      	adds	r3, #66	; 0x42
 8002d42:	2202      	movs	r2, #2
 8002d44:	701a      	strb	r2, [r3, #0]
      break;
 8002d46:	e00c      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	212c      	movs	r1, #44	; 0x2c
 8002d4e:	fb01 f303 	mul.w	r3, r1, r3
 8002d52:	4413      	add	r3, r2
 8002d54:	3342      	adds	r3, #66	; 0x42
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
      break;
 8002d5a:	e002      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002d5c:	bf00      	nop
 8002d5e:	e000      	b.n	8002d62 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002d60:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002d62:	78fb      	ldrb	r3, [r7, #3]
 8002d64:	687a      	ldr	r2, [r7, #4]
 8002d66:	212c      	movs	r1, #44	; 0x2c
 8002d68:	fb01 f303 	mul.w	r3, r1, r3
 8002d6c:	4413      	add	r3, r2
 8002d6e:	3344      	adds	r3, #68	; 0x44
 8002d70:	697a      	ldr	r2, [r7, #20]
 8002d72:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	8b3a      	ldrh	r2, [r7, #24]
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	202c      	movs	r0, #44	; 0x2c
 8002d7c:	fb00 f303 	mul.w	r3, r0, r3
 8002d80:	440b      	add	r3, r1
 8002d82:	334c      	adds	r3, #76	; 0x4c
 8002d84:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002d86:	78fb      	ldrb	r3, [r7, #3]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	212c      	movs	r1, #44	; 0x2c
 8002d8c:	fb01 f303 	mul.w	r3, r1, r3
 8002d90:	4413      	add	r3, r2
 8002d92:	3360      	adds	r3, #96	; 0x60
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	212c      	movs	r1, #44	; 0x2c
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	3350      	adds	r3, #80	; 0x50
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3339      	adds	r3, #57	; 0x39
 8002db8:	78fa      	ldrb	r2, [r7, #3]
 8002dba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	212c      	movs	r1, #44	; 0x2c
 8002dc2:	fb01 f303 	mul.w	r3, r1, r3
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3361      	adds	r3, #97	; 0x61
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6818      	ldr	r0, [r3, #0]
 8002dd2:	78fb      	ldrb	r3, [r7, #3]
 8002dd4:	222c      	movs	r2, #44	; 0x2c
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	3338      	adds	r3, #56	; 0x38
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	18d1      	adds	r1, r2, r3
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	461a      	mov	r2, r3
 8002de8:	f005 fbb0 	bl	800854c <USB_HC_StartXfer>
 8002dec:	4603      	mov	r3, r0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop

08002df8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f005 f8c9 	bl	8007fa6 <USB_GetMode>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	f040 80ef 	bne.w	8002ffa <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f005 f8ad 	bl	8007f80 <USB_ReadInterrupts>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80e5 	beq.w	8002ff8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f005 f8a4 	bl	8007f80 <USB_ReadInterrupts>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e42:	d104      	bne.n	8002e4e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f005 f894 	bl	8007f80 <USB_ReadInterrupts>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e62:	d104      	bne.n	8002e6e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f005 f884 	bl	8007f80 <USB_ReadInterrupts>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e82:	d104      	bne.n	8002e8e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002e8c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f005 f874 	bl	8007f80 <USB_ReadInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d103      	bne.n	8002eaa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f005 f866 	bl	8007f80 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002eba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ebe:	d115      	bne.n	8002eec <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002ec8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f007 fe38 	bl	800ab50 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f005 f95c 	bl	80081a4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f005 f845 	bl	8007f80 <USB_ReadInterrupts>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002efc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f00:	d102      	bne.n	8002f08 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f001 f9ff 	bl	8004306 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f005 f837 	bl	8007f80 <USB_ReadInterrupts>
 8002f12:	4603      	mov	r3, r0
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d106      	bne.n	8002f2a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f007 fdfb 	bl	800ab18 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2208      	movs	r2, #8
 8002f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f005 f826 	bl	8007f80 <USB_ReadInterrupts>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f003 0310 	and.w	r3, r3, #16
 8002f3a:	2b10      	cmp	r3, #16
 8002f3c:	d101      	bne.n	8002f42 <HAL_HCD_IRQHandler+0x14a>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_HCD_IRQHandler+0x14c>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d012      	beq.n	8002f6e <HAL_HCD_IRQHandler+0x176>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699a      	ldr	r2, [r3, #24]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0210 	bic.w	r2, r2, #16
 8002f56:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f001 f902 	bl	8004162 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0210 	orr.w	r2, r2, #16
 8002f6c:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f005 f804 	bl	8007f80 <USB_ReadInterrupts>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002f82:	d13a      	bne.n	8002ffa <HAL_HCD_IRQHandler+0x202>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f005 fc21 	bl	80087d0 <USB_HC_ReadInterrupt>
 8002f8e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]
 8002f94:	e025      	b.n	8002fe2 <HAL_HCD_IRQHandler+0x1ea>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 030f 	and.w	r3, r3, #15
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <HAL_HCD_IRQHandler+0x1e4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fc0:	d106      	bne.n	8002fd0 <HAL_HCD_IRQHandler+0x1d8>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f8ab 	bl	8003124 <HCD_HC_IN_IRQHandler>
 8002fce:	e005      	b.n	8002fdc <HAL_HCD_IRQHandler+0x1e4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fcc6 	bl	8003968 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d3d4      	bcc.n	8002f96 <HAL_HCD_IRQHandler+0x19e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ff4:	615a      	str	r2, [r3, #20]
 8002ff6:	e000      	b.n	8002ffa <HAL_HCD_IRQHandler+0x202>
      return;
 8002ff8:	bf00      	nop
    }
  }
}
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_HCD_Start+0x16>
 8003012:	2302      	movs	r3, #2
 8003014:	e013      	b.n	800303e <HAL_HCD_Start+0x3e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  __HAL_HCD_ENABLE(hhcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f004 feb9 	bl	8007d9a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2101      	movs	r1, #1
 800302e:	4618      	mov	r0, r3
 8003030:	f005 f91c 	bl	800826c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3708      	adds	r7, #8
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_HCD_Stop+0x16>
 8003058:	2302      	movs	r3, #2
 800305a:	e00d      	b.n	8003078 <HAL_HCD_Stop+0x32>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f005 fd1b 	bl	8008aa4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f005 f8c3 	bl	8008218 <USB_ResetPort>
 8003092:	4603      	mov	r3, r0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	212c      	movs	r1, #44	; 0x2c
 80030ae:	fb01 f303 	mul.w	r3, r1, r3
 80030b2:	4413      	add	r3, r2
 80030b4:	3360      	adds	r3, #96	; 0x60
 80030b6:	781b      	ldrb	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b083      	sub	sp, #12
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	212c      	movs	r1, #44	; 0x2c
 80030d6:	fb01 f303 	mul.w	r3, r1, r3
 80030da:	4413      	add	r3, r2
 80030dc:	3350      	adds	r3, #80	; 0x50
 80030de:	681b      	ldr	r3, [r3, #0]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f005 f907 	bl	800830c <USB_GetCurrentFrame>
 80030fe:	4603      	mov	r3, r0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3708      	adds	r7, #8
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4618      	mov	r0, r3
 8003116:	f005 f8e2 	bl	80082de <USB_GetHostSpeed>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800313a:	78fb      	ldrb	r3, [r7, #3]
 800313c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	015a      	lsls	r2, r3, #5
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	4413      	add	r3, r2
 8003146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b04      	cmp	r3, #4
 8003152:	d119      	bne.n	8003188 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	015a      	lsls	r2, r3, #5
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4413      	add	r3, r2
 800315c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003160:	461a      	mov	r2, r3
 8003162:	2304      	movs	r3, #4
 8003164:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	0151      	lsls	r1, r2, #5
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	440a      	add	r2, r1
 800317c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003180:	f043 0302 	orr.w	r3, r3, #2
 8003184:	60d3      	str	r3, [r2, #12]
 8003186:	e101      	b.n	800338c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	015a      	lsls	r2, r3, #5
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4413      	add	r3, r2
 8003190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800319e:	d12b      	bne.n	80031f8 <HCD_HC_IN_IRQHandler+0xd4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031ac:	461a      	mov	r2, r3
 80031ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	3361      	adds	r3, #97	; 0x61
 80031c2:	2207      	movs	r2, #7
 80031c4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	015a      	lsls	r2, r3, #5
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4413      	add	r3, r2
 80031ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	0151      	lsls	r1, r2, #5
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	440a      	add	r2, r1
 80031dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f005 fafe 	bl	80087f2 <USB_HC_Halt>
 80031f6:	e0c9      	b.n	800338c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b20      	cmp	r3, #32
 800320c:	d109      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0xfe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	461a      	mov	r2, r3
 800321c:	2320      	movs	r3, #32
 800321e:	6093      	str	r3, [r2, #8]
 8003220:	e0b4      	b.n	800338c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d133      	bne.n	80032a0 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	0151      	lsls	r1, r2, #5
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	440a      	add	r2, r1
 800324e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003252:	f043 0302 	orr.w	r3, r3, #2
 8003256:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3361      	adds	r3, #97	; 0x61
 8003266:	2205      	movs	r2, #5
 8003268:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4413      	add	r3, r2
 8003272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003276:	461a      	mov	r2, r3
 8003278:	2310      	movs	r3, #16
 800327a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	4413      	add	r3, r2
 8003284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003288:	461a      	mov	r2, r3
 800328a:	2308      	movs	r3, #8
 800328c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	4611      	mov	r1, r2
 8003298:	4618      	mov	r0, r3
 800329a:	f005 faaa 	bl	80087f2 <USB_HC_Halt>
 800329e:	e075      	b.n	800338c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032b6:	d134      	bne.n	8003322 <HCD_HC_IN_IRQHandler+0x1fe>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	015a      	lsls	r2, r3, #5
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	4413      	add	r3, r2
 80032c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	0151      	lsls	r1, r2, #5
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	440a      	add	r2, r1
 80032ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80032d2:	f043 0302 	orr.w	r3, r3, #2
 80032d6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	212c      	movs	r1, #44	; 0x2c
 80032de:	fb01 f303 	mul.w	r3, r1, r3
 80032e2:	4413      	add	r3, r2
 80032e4:	3361      	adds	r3, #97	; 0x61
 80032e6:	2208      	movs	r2, #8
 80032e8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032f6:	461a      	mov	r2, r3
 80032f8:	2310      	movs	r3, #16
 80032fa:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	015a      	lsls	r2, r3, #5
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	4413      	add	r3, r2
 8003304:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003308:	461a      	mov	r2, r3
 800330a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800330e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	68fa      	ldr	r2, [r7, #12]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f005 fa69 	bl	80087f2 <USB_HC_Halt>
 8003320:	e034      	b.n	800338c <HCD_HC_IN_IRQHandler+0x268>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b80      	cmp	r3, #128	; 0x80
 8003336:	d129      	bne.n	800338c <HCD_HC_IN_IRQHandler+0x268>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	4413      	add	r3, r2
 8003340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	0151      	lsls	r1, r2, #5
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	440a      	add	r2, r1
 800334e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003352:	f043 0302 	orr.w	r3, r3, #2
 8003356:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	212c      	movs	r1, #44	; 0x2c
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	3361      	adds	r3, #97	; 0x61
 8003366:	2206      	movs	r2, #6
 8003368:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	b2d2      	uxtb	r2, r2
 8003372:	4611      	mov	r1, r2
 8003374:	4618      	mov	r0, r3
 8003376:	f005 fa3c 	bl	80087f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	015a      	lsls	r2, r3, #5
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	4413      	add	r3, r2
 8003382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003386:	461a      	mov	r2, r3
 8003388:	2380      	movs	r3, #128	; 0x80
 800338a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800339e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033a2:	d122      	bne.n	80033ea <HCD_HC_IN_IRQHandler+0x2c6>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	0151      	lsls	r1, r2, #5
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	440a      	add	r2, r1
 80033ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80033be:	f043 0302 	orr.w	r3, r3, #2
 80033c2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	4611      	mov	r1, r2
 80033ce:	4618      	mov	r0, r3
 80033d0:	f005 fa0f 	bl	80087f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	015a      	lsls	r2, r3, #5
 80033d8:	693b      	ldr	r3, [r7, #16]
 80033da:	4413      	add	r3, r2
 80033dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e0:	461a      	mov	r2, r3
 80033e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033e6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80033e8:	e2ba      	b.n	8003960 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	f040 811b 	bne.w	8003638 <HCD_HC_IN_IRQHandler+0x514>
    if (hhcd->Init.dma_enable != 0U)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d019      	beq.n	800343e <HCD_HC_IN_IRQHandler+0x31a>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	212c      	movs	r1, #44	; 0x2c
 8003410:	fb01 f303 	mul.w	r3, r1, r3
 8003414:	4413      	add	r3, r2
 8003416:	3348      	adds	r3, #72	; 0x48
 8003418:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	0159      	lsls	r1, r3, #5
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	440b      	add	r3, r1
 8003422:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800342c:	1ad2      	subs	r2, r2, r3
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	202c      	movs	r0, #44	; 0x2c
 8003434:	fb00 f303 	mul.w	r3, r0, r3
 8003438:	440b      	add	r3, r1
 800343a:	3350      	adds	r3, #80	; 0x50
 800343c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	212c      	movs	r1, #44	; 0x2c
 8003444:	fb01 f303 	mul.w	r3, r1, r3
 8003448:	4413      	add	r3, r2
 800344a:	3361      	adds	r3, #97	; 0x61
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	212c      	movs	r1, #44	; 0x2c
 8003456:	fb01 f303 	mul.w	r3, r1, r3
 800345a:	4413      	add	r3, r2
 800345c:	335c      	adds	r3, #92	; 0x5c
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4413      	add	r3, r2
 800346a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800346e:	461a      	mov	r2, r3
 8003470:	2301      	movs	r3, #1
 8003472:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	212c      	movs	r1, #44	; 0x2c
 800347a:	fb01 f303 	mul.w	r3, r1, r3
 800347e:	4413      	add	r3, r2
 8003480:	333f      	adds	r3, #63	; 0x3f
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d009      	beq.n	800349c <HCD_HC_IN_IRQHandler+0x378>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	212c      	movs	r1, #44	; 0x2c
 800348e:	fb01 f303 	mul.w	r3, r1, r3
 8003492:	4413      	add	r3, r2
 8003494:	333f      	adds	r3, #63	; 0x3f
 8003496:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003498:	2b02      	cmp	r3, #2
 800349a:	d121      	bne.n	80034e0 <HCD_HC_IN_IRQHandler+0x3bc>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	0151      	lsls	r1, r2, #5
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	440a      	add	r2, r1
 80034b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80034b6:	f043 0302 	orr.w	r3, r3, #2
 80034ba:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	4611      	mov	r1, r2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f005 f993 	bl	80087f2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	015a      	lsls	r2, r3, #5
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4413      	add	r3, r2
 80034d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034d8:	461a      	mov	r2, r3
 80034da:	2310      	movs	r3, #16
 80034dc:	6093      	str	r3, [r2, #8]
 80034de:	e066      	b.n	80035ae <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	333f      	adds	r3, #63	; 0x3f
 80034ee:	781b      	ldrb	r3, [r3, #0]
 80034f0:	2b03      	cmp	r3, #3
 80034f2:	d127      	bne.n	8003544 <HCD_HC_IN_IRQHandler+0x420>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	015a      	lsls	r2, r3, #5
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4413      	add	r3, r2
 80034fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	0151      	lsls	r1, r2, #5
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	440a      	add	r2, r1
 800350a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800350e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003512:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	212c      	movs	r1, #44	; 0x2c
 800351a:	fb01 f303 	mul.w	r3, r1, r3
 800351e:	4413      	add	r3, r2
 8003520:	3360      	adds	r3, #96	; 0x60
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	b2d9      	uxtb	r1, r3
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	202c      	movs	r0, #44	; 0x2c
 8003530:	fb00 f303 	mul.w	r3, r0, r3
 8003534:	4413      	add	r3, r2
 8003536:	3360      	adds	r3, #96	; 0x60
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f007 fb15 	bl	800ab6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003542:	e034      	b.n	80035ae <HCD_HC_IN_IRQHandler+0x48a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	212c      	movs	r1, #44	; 0x2c
 800354a:	fb01 f303 	mul.w	r3, r1, r3
 800354e:	4413      	add	r3, r2
 8003550:	333f      	adds	r3, #63	; 0x3f
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d12a      	bne.n	80035ae <HCD_HC_IN_IRQHandler+0x48a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	212c      	movs	r1, #44	; 0x2c
 800355e:	fb01 f303 	mul.w	r3, r1, r3
 8003562:	4413      	add	r3, r2
 8003564:	3360      	adds	r3, #96	; 0x60
 8003566:	2201      	movs	r2, #1
 8003568:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	212c      	movs	r1, #44	; 0x2c
 8003570:	fb01 f303 	mul.w	r3, r1, r3
 8003574:	4413      	add	r3, r2
 8003576:	3354      	adds	r3, #84	; 0x54
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	f083 0301 	eor.w	r3, r3, #1
 800357e:	b2d8      	uxtb	r0, r3
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3354      	adds	r3, #84	; 0x54
 800358e:	4602      	mov	r2, r0
 8003590:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	b2d9      	uxtb	r1, r3
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	202c      	movs	r0, #44	; 0x2c
 800359c:	fb00 f303 	mul.w	r3, r0, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3360      	adds	r3, #96	; 0x60
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f007 fadf 	bl	800ab6c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d12b      	bne.n	800360e <HCD_HC_IN_IRQHandler+0x4ea>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	212c      	movs	r1, #44	; 0x2c
 80035bc:	fb01 f303 	mul.w	r3, r1, r3
 80035c0:	4413      	add	r3, r2
 80035c2:	3348      	adds	r3, #72	; 0x48
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	202c      	movs	r0, #44	; 0x2c
 80035cc:	fb00 f202 	mul.w	r2, r0, r2
 80035d0:	440a      	add	r2, r1
 80035d2:	3240      	adds	r2, #64	; 0x40
 80035d4:	8812      	ldrh	r2, [r2, #0]
 80035d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 81be 	beq.w	8003960 <HCD_HC_IN_IRQHandler+0x83c>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	212c      	movs	r1, #44	; 0x2c
 80035ea:	fb01 f303 	mul.w	r3, r1, r3
 80035ee:	4413      	add	r3, r2
 80035f0:	3354      	adds	r3, #84	; 0x54
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	f083 0301 	eor.w	r3, r3, #1
 80035f8:	b2d8      	uxtb	r0, r3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	212c      	movs	r1, #44	; 0x2c
 8003600:	fb01 f303 	mul.w	r3, r1, r3
 8003604:	4413      	add	r3, r2
 8003606:	3354      	adds	r3, #84	; 0x54
 8003608:	4602      	mov	r2, r0
 800360a:	701a      	strb	r2, [r3, #0]
}
 800360c:	e1a8      	b.n	8003960 <HCD_HC_IN_IRQHandler+0x83c>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	212c      	movs	r1, #44	; 0x2c
 8003614:	fb01 f303 	mul.w	r3, r1, r3
 8003618:	4413      	add	r3, r2
 800361a:	3354      	adds	r3, #84	; 0x54
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	f083 0301 	eor.w	r3, r3, #1
 8003622:	b2d8      	uxtb	r0, r3
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	212c      	movs	r1, #44	; 0x2c
 800362a:	fb01 f303 	mul.w	r3, r1, r3
 800362e:	4413      	add	r3, r2
 8003630:	3354      	adds	r3, #84	; 0x54
 8003632:	4602      	mov	r2, r0
 8003634:	701a      	strb	r2, [r3, #0]
}
 8003636:	e193      	b.n	8003960 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b02      	cmp	r3, #2
 800364c:	f040 8106 	bne.w	800385c <HCD_HC_IN_IRQHandler+0x738>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	015a      	lsls	r2, r3, #5
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	4413      	add	r3, r2
 8003658:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	0151      	lsls	r1, r2, #5
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	440a      	add	r2, r1
 8003666:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800366a:	f023 0302 	bic.w	r3, r3, #2
 800366e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	212c      	movs	r1, #44	; 0x2c
 8003676:	fb01 f303 	mul.w	r3, r1, r3
 800367a:	4413      	add	r3, r2
 800367c:	3361      	adds	r3, #97	; 0x61
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d109      	bne.n	8003698 <HCD_HC_IN_IRQHandler+0x574>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	212c      	movs	r1, #44	; 0x2c
 800368a:	fb01 f303 	mul.w	r3, r1, r3
 800368e:	4413      	add	r3, r2
 8003690:	3360      	adds	r3, #96	; 0x60
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
 8003696:	e0c9      	b.n	800382c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	212c      	movs	r1, #44	; 0x2c
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	4413      	add	r3, r2
 80036a4:	3361      	adds	r3, #97	; 0x61
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b05      	cmp	r3, #5
 80036aa:	d109      	bne.n	80036c0 <HCD_HC_IN_IRQHandler+0x59c>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	3360      	adds	r3, #96	; 0x60
 80036ba:	2205      	movs	r2, #5
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e0b5      	b.n	800382c <HCD_HC_IN_IRQHandler+0x708>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	212c      	movs	r1, #44	; 0x2c
 80036c6:	fb01 f303 	mul.w	r3, r1, r3
 80036ca:	4413      	add	r3, r2
 80036cc:	3361      	adds	r3, #97	; 0x61
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b06      	cmp	r3, #6
 80036d2:	d009      	beq.n	80036e8 <HCD_HC_IN_IRQHandler+0x5c4>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	212c      	movs	r1, #44	; 0x2c
 80036da:	fb01 f303 	mul.w	r3, r1, r3
 80036de:	4413      	add	r3, r2
 80036e0:	3361      	adds	r3, #97	; 0x61
 80036e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80036e4:	2b08      	cmp	r3, #8
 80036e6:	d150      	bne.n	800378a <HCD_HC_IN_IRQHandler+0x666>
      hhcd->hc[ch_num].ErrCnt++;
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	212c      	movs	r1, #44	; 0x2c
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	4413      	add	r3, r2
 80036f4:	335c      	adds	r3, #92	; 0x5c
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	202c      	movs	r0, #44	; 0x2c
 8003700:	fb00 f303 	mul.w	r3, r0, r3
 8003704:	440b      	add	r3, r1
 8003706:	335c      	adds	r3, #92	; 0x5c
 8003708:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	212c      	movs	r1, #44	; 0x2c
 8003710:	fb01 f303 	mul.w	r3, r1, r3
 8003714:	4413      	add	r3, r2
 8003716:	335c      	adds	r3, #92	; 0x5c
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b02      	cmp	r3, #2
 800371c:	d912      	bls.n	8003744 <HCD_HC_IN_IRQHandler+0x620>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	212c      	movs	r1, #44	; 0x2c
 8003724:	fb01 f303 	mul.w	r3, r1, r3
 8003728:	4413      	add	r3, r2
 800372a:	335c      	adds	r3, #92	; 0x5c
 800372c:	2200      	movs	r2, #0
 800372e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	212c      	movs	r1, #44	; 0x2c
 8003736:	fb01 f303 	mul.w	r3, r1, r3
 800373a:	4413      	add	r3, r2
 800373c:	3360      	adds	r3, #96	; 0x60
 800373e:	2204      	movs	r2, #4
 8003740:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003742:	e073      	b.n	800382c <HCD_HC_IN_IRQHandler+0x708>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	212c      	movs	r1, #44	; 0x2c
 800374a:	fb01 f303 	mul.w	r3, r1, r3
 800374e:	4413      	add	r3, r2
 8003750:	3360      	adds	r3, #96	; 0x60
 8003752:	2202      	movs	r2, #2
 8003754:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800376c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003774:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	4413      	add	r3, r2
 800377e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003782:	461a      	mov	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003788:	e050      	b.n	800382c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	212c      	movs	r1, #44	; 0x2c
 8003790:	fb01 f303 	mul.w	r3, r1, r3
 8003794:	4413      	add	r3, r2
 8003796:	3361      	adds	r3, #97	; 0x61
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d122      	bne.n	80037e4 <HCD_HC_IN_IRQHandler+0x6c0>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	212c      	movs	r1, #44	; 0x2c
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	4413      	add	r3, r2
 80037aa:	3360      	adds	r3, #96	; 0x60
 80037ac:	2202      	movs	r2, #2
 80037ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80037c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037dc:	461a      	mov	r2, r3
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e023      	b.n	800382c <HCD_HC_IN_IRQHandler+0x708>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	212c      	movs	r1, #44	; 0x2c
 80037ea:	fb01 f303 	mul.w	r3, r1, r3
 80037ee:	4413      	add	r3, r2
 80037f0:	3361      	adds	r3, #97	; 0x61
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b07      	cmp	r3, #7
 80037f6:	d119      	bne.n	800382c <HCD_HC_IN_IRQHandler+0x708>
      hhcd->hc[ch_num].ErrCnt++;
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	212c      	movs	r1, #44	; 0x2c
 80037fe:	fb01 f303 	mul.w	r3, r1, r3
 8003802:	4413      	add	r3, r2
 8003804:	335c      	adds	r3, #92	; 0x5c
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	1c5a      	adds	r2, r3, #1
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	202c      	movs	r0, #44	; 0x2c
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	440b      	add	r3, r1
 8003816:	335c      	adds	r3, #92	; 0x5c
 8003818:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	3360      	adds	r3, #96	; 0x60
 8003828:	2204      	movs	r2, #4
 800382a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	015a      	lsls	r2, r3, #5
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	4413      	add	r3, r2
 8003834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003838:	461a      	mov	r2, r3
 800383a:	2302      	movs	r3, #2
 800383c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	b2d9      	uxtb	r1, r3
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	202c      	movs	r0, #44	; 0x2c
 8003848:	fb00 f303 	mul.w	r3, r0, r3
 800384c:	4413      	add	r3, r2
 800384e:	3360      	adds	r3, #96	; 0x60
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f007 f989 	bl	800ab6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800385a:	e081      	b.n	8003960 <HCD_HC_IN_IRQHandler+0x83c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4413      	add	r3, r2
 8003864:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b10      	cmp	r3, #16
 8003870:	d176      	bne.n	8003960 <HCD_HC_IN_IRQHandler+0x83c>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	212c      	movs	r1, #44	; 0x2c
 8003878:	fb01 f303 	mul.w	r3, r1, r3
 800387c:	4413      	add	r3, r2
 800387e:	333f      	adds	r3, #63	; 0x3f
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	2b03      	cmp	r3, #3
 8003884:	d121      	bne.n	80038ca <HCD_HC_IN_IRQHandler+0x7a6>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	212c      	movs	r1, #44	; 0x2c
 800388c:	fb01 f303 	mul.w	r3, r1, r3
 8003890:	4413      	add	r3, r2
 8003892:	335c      	adds	r3, #92	; 0x5c
 8003894:	2200      	movs	r2, #0
 8003896:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	015a      	lsls	r2, r3, #5
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	4413      	add	r3, r2
 80038a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	0151      	lsls	r1, r2, #5
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	440a      	add	r2, r1
 80038ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038b2:	f043 0302 	orr.w	r3, r3, #2
 80038b6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f004 ff95 	bl	80087f2 <USB_HC_Halt>
 80038c8:	e041      	b.n	800394e <HCD_HC_IN_IRQHandler+0x82a>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	212c      	movs	r1, #44	; 0x2c
 80038d0:	fb01 f303 	mul.w	r3, r1, r3
 80038d4:	4413      	add	r3, r2
 80038d6:	333f      	adds	r3, #63	; 0x3f
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d009      	beq.n	80038f2 <HCD_HC_IN_IRQHandler+0x7ce>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	212c      	movs	r1, #44	; 0x2c
 80038e4:	fb01 f303 	mul.w	r3, r1, r3
 80038e8:	4413      	add	r3, r2
 80038ea:	333f      	adds	r3, #63	; 0x3f
 80038ec:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d12d      	bne.n	800394e <HCD_HC_IN_IRQHandler+0x82a>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	335c      	adds	r3, #92	; 0x5c
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d120      	bne.n	800394e <HCD_HC_IN_IRQHandler+0x82a>
        hhcd->hc[ch_num].state = HC_NAK;
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	212c      	movs	r1, #44	; 0x2c
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	4413      	add	r3, r2
 8003918:	3361      	adds	r3, #97	; 0x61
 800391a:	2203      	movs	r2, #3
 800391c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	0151      	lsls	r1, r2, #5
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	440a      	add	r2, r1
 8003934:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003938:	f043 0302 	orr.w	r3, r3, #2
 800393c:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	4611      	mov	r1, r2
 8003948:	4618      	mov	r0, r3
 800394a:	f004 ff52 	bl	80087f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	4413      	add	r3, r2
 8003956:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800395a:	461a      	mov	r2, r3
 800395c:	2310      	movs	r3, #16
 800395e:	6093      	str	r3, [r2, #8]
}
 8003960:	bf00      	nop
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b088      	sub	sp, #32
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4413      	add	r3, r2
 800398a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b04      	cmp	r3, #4
 8003996:	d119      	bne.n	80039cc <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	461a      	mov	r2, r3
 80039a6:	2304      	movs	r3, #4
 80039a8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	015a      	lsls	r2, r3, #5
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	4413      	add	r3, r2
 80039b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	0151      	lsls	r1, r2, #5
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	440a      	add	r2, r1
 80039c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80039c4:	f043 0302 	orr.w	r3, r3, #2
 80039c8:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80039ca:	e3c6      	b.n	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b20      	cmp	r3, #32
 80039e0:	d13e      	bne.n	8003a60 <HCD_HC_OUT_IRQHandler+0xf8>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	015a      	lsls	r2, r3, #5
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ee:	461a      	mov	r2, r3
 80039f0:	2320      	movs	r3, #32
 80039f2:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	212c      	movs	r1, #44	; 0x2c
 80039fa:	fb01 f303 	mul.w	r3, r1, r3
 80039fe:	4413      	add	r3, r2
 8003a00:	333d      	adds	r3, #61	; 0x3d
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 83a8 	bne.w	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	212c      	movs	r1, #44	; 0x2c
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	333d      	adds	r3, #61	; 0x3d
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3360      	adds	r3, #96	; 0x60
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	015a      	lsls	r2, r3, #5
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	0151      	lsls	r1, r2, #5
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	440a      	add	r2, r1
 8003a44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a48:	f043 0302 	orr.w	r3, r3, #2
 8003a4c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f004 feca 	bl	80087f2 <USB_HC_Halt>
}
 8003a5e:	e37c      	b.n	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a76:	d122      	bne.n	8003abe <HCD_HC_OUT_IRQHandler+0x156>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	697a      	ldr	r2, [r7, #20]
 8003a88:	0151      	lsls	r1, r2, #5
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	440a      	add	r2, r1
 8003a8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003a92:	f043 0302 	orr.w	r3, r3, #2
 8003a96:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f004 fea5 	bl	80087f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aba:	6093      	str	r3, [r2, #8]
}
 8003abc:	e34d      	b.n	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d150      	bne.n	8003b76 <HCD_HC_OUT_IRQHandler+0x20e>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	335c      	adds	r3, #92	; 0x5c
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d111      	bne.n	8003b20 <HCD_HC_OUT_IRQHandler+0x1b8>
      hhcd->hc[ch_num].do_ping = 1U;
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	212c      	movs	r1, #44	; 0x2c
 8003b02:	fb01 f303 	mul.w	r3, r1, r3
 8003b06:	4413      	add	r3, r2
 8003b08:	333d      	adds	r3, #61	; 0x3d
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	2340      	movs	r3, #64	; 0x40
 8003b1e:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	015a      	lsls	r2, r3, #5
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	4413      	add	r3, r2
 8003b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	0151      	lsls	r1, r2, #5
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	440a      	add	r2, r1
 8003b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003b3a:	f043 0302 	orr.w	r3, r3, #2
 8003b3e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f004 fe51 	bl	80087f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	015a      	lsls	r2, r3, #5
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	4413      	add	r3, r2
 8003b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	2301      	movs	r3, #1
 8003b60:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	212c      	movs	r1, #44	; 0x2c
 8003b68:	fb01 f303 	mul.w	r3, r1, r3
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3361      	adds	r3, #97	; 0x61
 8003b70:	2201      	movs	r2, #1
 8003b72:	701a      	strb	r2, [r3, #0]
}
 8003b74:	e2f1      	b.n	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	015a      	lsls	r2, r3, #5
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b88:	2b40      	cmp	r3, #64	; 0x40
 8003b8a:	d13c      	bne.n	8003c06 <HCD_HC_OUT_IRQHandler+0x29e>
    hhcd->hc[ch_num].state = HC_NYET;
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	212c      	movs	r1, #44	; 0x2c
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	4413      	add	r3, r2
 8003b98:	3361      	adds	r3, #97	; 0x61
 8003b9a:	2204      	movs	r2, #4
 8003b9c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	212c      	movs	r1, #44	; 0x2c
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	333d      	adds	r3, #61	; 0x3d
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	212c      	movs	r1, #44	; 0x2c
 8003bb6:	fb01 f303 	mul.w	r3, r1, r3
 8003bba:	4413      	add	r3, r2
 8003bbc:	335c      	adds	r3, #92	; 0x5c
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	015a      	lsls	r2, r3, #5
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	4413      	add	r3, r2
 8003bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	0151      	lsls	r1, r2, #5
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	440a      	add	r2, r1
 8003bd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bdc:	f043 0302 	orr.w	r3, r3, #2
 8003be0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f004 fe00 	bl	80087f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfe:	461a      	mov	r2, r3
 8003c00:	2340      	movs	r3, #64	; 0x40
 8003c02:	6093      	str	r3, [r2, #8]
}
 8003c04:	e2a9      	b.n	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f003 0308 	and.w	r3, r3, #8
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d12a      	bne.n	8003c72 <HCD_HC_OUT_IRQHandler+0x30a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2308      	movs	r3, #8
 8003c2c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	0151      	lsls	r1, r2, #5
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	440a      	add	r2, r1
 8003c44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c48:	f043 0302 	orr.w	r3, r3, #2
 8003c4c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	697a      	ldr	r2, [r7, #20]
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f004 fdca 	bl	80087f2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	3361      	adds	r3, #97	; 0x61
 8003c6c:	2205      	movs	r2, #5
 8003c6e:	701a      	strb	r2, [r3, #0]
}
 8003c70:	e273      	b.n	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0310 	and.w	r3, r3, #16
 8003c84:	2b10      	cmp	r3, #16
 8003c86:	d150      	bne.n	8003d2a <HCD_HC_OUT_IRQHandler+0x3c2>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	212c      	movs	r1, #44	; 0x2c
 8003c8e:	fb01 f303 	mul.w	r3, r1, r3
 8003c92:	4413      	add	r3, r2
 8003c94:	335c      	adds	r3, #92	; 0x5c
 8003c96:	2200      	movs	r2, #0
 8003c98:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	212c      	movs	r1, #44	; 0x2c
 8003ca0:	fb01 f303 	mul.w	r3, r1, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	3361      	adds	r3, #97	; 0x61
 8003ca8:	2203      	movs	r2, #3
 8003caa:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	212c      	movs	r1, #44	; 0x2c
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	333d      	adds	r3, #61	; 0x3d
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d112      	bne.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x37e>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	212c      	movs	r1, #44	; 0x2c
 8003cc6:	fb01 f303 	mul.w	r3, r1, r3
 8003cca:	4413      	add	r3, r2
 8003ccc:	333c      	adds	r3, #60	; 0x3c
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d108      	bne.n	8003ce6 <HCD_HC_OUT_IRQHandler+0x37e>
        hhcd->hc[ch_num].do_ping = 1U;
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	333d      	adds	r3, #61	; 0x3d
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	b2d2      	uxtb	r2, r2
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f004 fd6e 	bl	80087f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	015a      	lsls	r2, r3, #5
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d22:	461a      	mov	r2, r3
 8003d24:	2310      	movs	r3, #16
 8003d26:	6093      	str	r3, [r2, #8]
}
 8003d28:	e217      	b.n	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	015a      	lsls	r2, r3, #5
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	4413      	add	r3, r2
 8003d32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d3c:	2b80      	cmp	r3, #128	; 0x80
 8003d3e:	d174      	bne.n	8003e2a <HCD_HC_OUT_IRQHandler+0x4c2>
    if (hhcd->Init.dma_enable == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d121      	bne.n	8003d8c <HCD_HC_OUT_IRQHandler+0x424>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3361      	adds	r3, #97	; 0x61
 8003d56:	2206      	movs	r2, #6
 8003d58:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	015a      	lsls	r2, r3, #5
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	4413      	add	r3, r2
 8003d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	0151      	lsls	r1, r2, #5
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	440a      	add	r2, r1
 8003d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d74:	f043 0302 	orr.w	r3, r3, #2
 8003d78:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	697a      	ldr	r2, [r7, #20]
 8003d80:	b2d2      	uxtb	r2, r2
 8003d82:	4611      	mov	r1, r2
 8003d84:	4618      	mov	r0, r3
 8003d86:	f004 fd34 	bl	80087f2 <USB_HC_Halt>
 8003d8a:	e044      	b.n	8003e16 <HCD_HC_OUT_IRQHandler+0x4ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003d8c:	687a      	ldr	r2, [r7, #4]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	212c      	movs	r1, #44	; 0x2c
 8003d92:	fb01 f303 	mul.w	r3, r1, r3
 8003d96:	4413      	add	r3, r2
 8003d98:	335c      	adds	r3, #92	; 0x5c
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	1c5a      	adds	r2, r3, #1
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	202c      	movs	r0, #44	; 0x2c
 8003da4:	fb00 f303 	mul.w	r3, r0, r3
 8003da8:	440b      	add	r3, r1
 8003daa:	335c      	adds	r3, #92	; 0x5c
 8003dac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	212c      	movs	r1, #44	; 0x2c
 8003db4:	fb01 f303 	mul.w	r3, r1, r3
 8003db8:	4413      	add	r3, r2
 8003dba:	335c      	adds	r3, #92	; 0x5c
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d920      	bls.n	8003e04 <HCD_HC_OUT_IRQHandler+0x49c>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	212c      	movs	r1, #44	; 0x2c
 8003dc8:	fb01 f303 	mul.w	r3, r1, r3
 8003dcc:	4413      	add	r3, r2
 8003dce:	335c      	adds	r3, #92	; 0x5c
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3360      	adds	r3, #96	; 0x60
 8003de2:	2204      	movs	r2, #4
 8003de4:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	b2d9      	uxtb	r1, r3
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	202c      	movs	r0, #44	; 0x2c
 8003df0:	fb00 f303 	mul.w	r3, r0, r3
 8003df4:	4413      	add	r3, r2
 8003df6:	3360      	adds	r3, #96	; 0x60
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f006 feb5 	bl	800ab6c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e02:	e008      	b.n	8003e16 <HCD_HC_OUT_IRQHandler+0x4ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3360      	adds	r3, #96	; 0x60
 8003e12:	2202      	movs	r2, #2
 8003e14:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e22:	461a      	mov	r2, r3
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	6093      	str	r3, [r2, #8]
}
 8003e28:	e197      	b.n	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e40:	d134      	bne.n	8003eac <HCD_HC_OUT_IRQHandler+0x544>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f004 fcc0 	bl	80087f2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e7e:	461a      	mov	r2, r3
 8003e80:	2310      	movs	r3, #16
 8003e82:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	461a      	mov	r2, r3
 8003e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3361      	adds	r3, #97	; 0x61
 8003ea6:	2208      	movs	r2, #8
 8003ea8:	701a      	strb	r2, [r3, #0]
}
 8003eaa:	e156      	b.n	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	69bb      	ldr	r3, [r7, #24]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	f040 814b 	bne.w	800415a <HCD_HC_OUT_IRQHandler+0x7f2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ede:	f023 0302 	bic.w	r3, r3, #2
 8003ee2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	212c      	movs	r1, #44	; 0x2c
 8003eea:	fb01 f303 	mul.w	r3, r1, r3
 8003eee:	4413      	add	r3, r2
 8003ef0:	3361      	adds	r3, #97	; 0x61
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d179      	bne.n	8003fec <HCD_HC_OUT_IRQHandler+0x684>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	212c      	movs	r1, #44	; 0x2c
 8003efe:	fb01 f303 	mul.w	r3, r1, r3
 8003f02:	4413      	add	r3, r2
 8003f04:	3360      	adds	r3, #96	; 0x60
 8003f06:	2201      	movs	r2, #1
 8003f08:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	212c      	movs	r1, #44	; 0x2c
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	4413      	add	r3, r2
 8003f16:	333f      	adds	r3, #63	; 0x3f
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d00a      	beq.n	8003f34 <HCD_HC_OUT_IRQHandler+0x5cc>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	212c      	movs	r1, #44	; 0x2c
 8003f24:	fb01 f303 	mul.w	r3, r1, r3
 8003f28:	4413      	add	r3, r2
 8003f2a:	333f      	adds	r3, #63	; 0x3f
 8003f2c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	f040 80fc 	bne.w	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
        if (hhcd->Init.dma_enable == 1U)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d142      	bne.n	8003fc2 <HCD_HC_OUT_IRQHandler+0x65a>
          if (hhcd->hc[ch_num].xfer_len > 0U)
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	212c      	movs	r1, #44	; 0x2c
 8003f42:	fb01 f303 	mul.w	r3, r1, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	334c      	adds	r3, #76	; 0x4c
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80ed 	beq.w	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
            num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	212c      	movs	r1, #44	; 0x2c
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	334c      	adds	r3, #76	; 0x4c
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	202c      	movs	r0, #44	; 0x2c
 8003f68:	fb00 f202 	mul.w	r2, r0, r2
 8003f6c:	440a      	add	r2, r1
 8003f6e:	3240      	adds	r2, #64	; 0x40
 8003f70:	8812      	ldrh	r2, [r2, #0]
 8003f72:	4413      	add	r3, r2
 8003f74:	3b01      	subs	r3, #1
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	202c      	movs	r0, #44	; 0x2c
 8003f7c:	fb00 f202 	mul.w	r2, r0, r2
 8003f80:	440a      	add	r2, r1
 8003f82:	3240      	adds	r2, #64	; 0x40
 8003f84:	8812      	ldrh	r2, [r2, #0]
 8003f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
            if ((num_packets & 1U) != 0U)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 80ca 	beq.w	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
              hhcd->hc[ch_num].toggle_out ^= 1U;
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	212c      	movs	r1, #44	; 0x2c
 8003f9e:	fb01 f303 	mul.w	r3, r1, r3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	3355      	adds	r3, #85	; 0x55
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	f083 0301 	eor.w	r3, r3, #1
 8003fac:	b2d8      	uxtb	r0, r3
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	212c      	movs	r1, #44	; 0x2c
 8003fb4:	fb01 f303 	mul.w	r3, r1, r3
 8003fb8:	4413      	add	r3, r2
 8003fba:	3355      	adds	r3, #85	; 0x55
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	701a      	strb	r2, [r3, #0]
 8003fc0:	e0b4      	b.n	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	212c      	movs	r1, #44	; 0x2c
 8003fc8:	fb01 f303 	mul.w	r3, r1, r3
 8003fcc:	4413      	add	r3, r2
 8003fce:	3355      	adds	r3, #85	; 0x55
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	f083 0301 	eor.w	r3, r3, #1
 8003fd6:	b2d8      	uxtb	r0, r3
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3355      	adds	r3, #85	; 0x55
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e09f      	b.n	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3361      	adds	r3, #97	; 0x61
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d109      	bne.n	8004014 <HCD_HC_OUT_IRQHandler+0x6ac>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	212c      	movs	r1, #44	; 0x2c
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	3360      	adds	r3, #96	; 0x60
 800400e:	2202      	movs	r2, #2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e08b      	b.n	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	212c      	movs	r1, #44	; 0x2c
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	4413      	add	r3, r2
 8004020:	3361      	adds	r3, #97	; 0x61
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d109      	bne.n	800403c <HCD_HC_OUT_IRQHandler+0x6d4>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	697b      	ldr	r3, [r7, #20]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	3360      	adds	r3, #96	; 0x60
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]
 800403a:	e077      	b.n	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	212c      	movs	r1, #44	; 0x2c
 8004042:	fb01 f303 	mul.w	r3, r1, r3
 8004046:	4413      	add	r3, r2
 8004048:	3361      	adds	r3, #97	; 0x61
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	2b05      	cmp	r3, #5
 800404e:	d109      	bne.n	8004064 <HCD_HC_OUT_IRQHandler+0x6fc>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	212c      	movs	r1, #44	; 0x2c
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	3360      	adds	r3, #96	; 0x60
 800405e:	2205      	movs	r2, #5
 8004060:	701a      	strb	r2, [r3, #0]
 8004062:	e063      	b.n	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	3361      	adds	r3, #97	; 0x61
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b06      	cmp	r3, #6
 8004076:	d009      	beq.n	800408c <HCD_HC_OUT_IRQHandler+0x724>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	3361      	adds	r3, #97	; 0x61
 8004086:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004088:	2b08      	cmp	r3, #8
 800408a:	d14f      	bne.n	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt++;
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	212c      	movs	r1, #44	; 0x2c
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	4413      	add	r3, r2
 8004098:	335c      	adds	r3, #92	; 0x5c
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	1c5a      	adds	r2, r3, #1
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	202c      	movs	r0, #44	; 0x2c
 80040a4:	fb00 f303 	mul.w	r3, r0, r3
 80040a8:	440b      	add	r3, r1
 80040aa:	335c      	adds	r3, #92	; 0x5c
 80040ac:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	335c      	adds	r3, #92	; 0x5c
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d912      	bls.n	80040e8 <HCD_HC_OUT_IRQHandler+0x780>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	212c      	movs	r1, #44	; 0x2c
 80040c8:	fb01 f303 	mul.w	r3, r1, r3
 80040cc:	4413      	add	r3, r2
 80040ce:	335c      	adds	r3, #92	; 0x5c
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	212c      	movs	r1, #44	; 0x2c
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	3360      	adds	r3, #96	; 0x60
 80040e2:	2204      	movs	r2, #4
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e021      	b.n	800412c <HCD_HC_OUT_IRQHandler+0x7c4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	212c      	movs	r1, #44	; 0x2c
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	3360      	adds	r3, #96	; 0x60
 80040f6:	2202      	movs	r2, #2
 80040f8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	015a      	lsls	r2, r3, #5
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	4413      	add	r3, r2
 8004102:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004110:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004118:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	4413      	add	r3, r2
 8004122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004126:	461a      	mov	r2, r3
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004138:	461a      	mov	r2, r3
 800413a:	2302      	movs	r3, #2
 800413c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	b2d9      	uxtb	r1, r3
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	202c      	movs	r0, #44	; 0x2c
 8004148:	fb00 f303 	mul.w	r3, r0, r3
 800414c:	4413      	add	r3, r2
 800414e:	3360      	adds	r3, #96	; 0x60
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f006 fd09 	bl	800ab6c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800415a:	bf00      	nop
 800415c:	3720      	adds	r7, #32
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b08a      	sub	sp, #40	; 0x28
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004172:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	0c5b      	lsrs	r3, r3, #17
 8004188:	f003 030f 	and.w	r3, r3, #15
 800418c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004196:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	2b02      	cmp	r3, #2
 800419c:	d004      	beq.n	80041a8 <HCD_RXQLVL_IRQHandler+0x46>
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	f000 80a9 	beq.w	80042f8 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041a6:	e0aa      	b.n	80042fe <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 80a6 	beq.w	80042fc <HCD_RXQLVL_IRQHandler+0x19a>
 80041b0:	687a      	ldr	r2, [r7, #4]
 80041b2:	69bb      	ldr	r3, [r7, #24]
 80041b4:	212c      	movs	r1, #44	; 0x2c
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	4413      	add	r3, r2
 80041bc:	3344      	adds	r3, #68	; 0x44
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 809b 	beq.w	80042fc <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	212c      	movs	r1, #44	; 0x2c
 80041cc:	fb01 f303 	mul.w	r3, r1, r3
 80041d0:	4413      	add	r3, r2
 80041d2:	3350      	adds	r3, #80	; 0x50
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	441a      	add	r2, r3
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	202c      	movs	r0, #44	; 0x2c
 80041e0:	fb00 f303 	mul.w	r3, r0, r3
 80041e4:	440b      	add	r3, r1
 80041e6:	334c      	adds	r3, #76	; 0x4c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d87a      	bhi.n	80042e4 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6818      	ldr	r0, [r3, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	212c      	movs	r1, #44	; 0x2c
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	4413      	add	r3, r2
 80041fe:	3344      	adds	r3, #68	; 0x44
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	b292      	uxth	r2, r2
 8004206:	4619      	mov	r1, r3
 8004208:	f003 fe91 	bl	8007f2e <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3344      	adds	r3, #68	; 0x44
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	441a      	add	r2, r3
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	202c      	movs	r0, #44	; 0x2c
 8004226:	fb00 f303 	mul.w	r3, r0, r3
 800422a:	440b      	add	r3, r1
 800422c:	3344      	adds	r3, #68	; 0x44
 800422e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	212c      	movs	r1, #44	; 0x2c
 8004236:	fb01 f303 	mul.w	r3, r1, r3
 800423a:	4413      	add	r3, r2
 800423c:	3350      	adds	r3, #80	; 0x50
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	441a      	add	r2, r3
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	202c      	movs	r0, #44	; 0x2c
 800424a:	fb00 f303 	mul.w	r3, r0, r3
 800424e:	440b      	add	r3, r1
 8004250:	3350      	adds	r3, #80	; 0x50
 8004252:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	4413      	add	r3, r2
 800425c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	0cdb      	lsrs	r3, r3, #19
 8004264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004268:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	212c      	movs	r1, #44	; 0x2c
 8004270:	fb01 f303 	mul.w	r3, r1, r3
 8004274:	4413      	add	r3, r2
 8004276:	3340      	adds	r3, #64	; 0x40
 8004278:	881b      	ldrh	r3, [r3, #0]
 800427a:	461a      	mov	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	4293      	cmp	r3, r2
 8004280:	d13c      	bne.n	80042fc <HCD_RXQLVL_IRQHandler+0x19a>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d039      	beq.n	80042fc <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	015a      	lsls	r2, r3, #5
 800428c:	6a3b      	ldr	r3, [r7, #32]
 800428e:	4413      	add	r3, r2
 8004290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800429e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b4:	461a      	mov	r2, r3
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	212c      	movs	r1, #44	; 0x2c
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	3354      	adds	r3, #84	; 0x54
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	f083 0301 	eor.w	r3, r3, #1
 80042ce:	b2d8      	uxtb	r0, r3
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	212c      	movs	r1, #44	; 0x2c
 80042d6:	fb01 f303 	mul.w	r3, r1, r3
 80042da:	4413      	add	r3, r2
 80042dc:	3354      	adds	r3, #84	; 0x54
 80042de:	4602      	mov	r2, r0
 80042e0:	701a      	strb	r2, [r3, #0]
      break;
 80042e2:	e00b      	b.n	80042fc <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	212c      	movs	r1, #44	; 0x2c
 80042ea:	fb01 f303 	mul.w	r3, r1, r3
 80042ee:	4413      	add	r3, r2
 80042f0:	3360      	adds	r3, #96	; 0x60
 80042f2:	2204      	movs	r2, #4
 80042f4:	701a      	strb	r2, [r3, #0]
      break;
 80042f6:	e001      	b.n	80042fc <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80042f8:	bf00      	nop
 80042fa:	e000      	b.n	80042fe <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80042fc:	bf00      	nop
  }
}
 80042fe:	bf00      	nop
 8004300:	3728      	adds	r7, #40	; 0x28
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b086      	sub	sp, #24
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004332:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b02      	cmp	r3, #2
 800433c:	d10b      	bne.n	8004356 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0301 	and.w	r3, r3, #1
 8004344:	2b01      	cmp	r3, #1
 8004346:	d102      	bne.n	800434e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f006 fbf3 	bl	800ab34 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	f043 0302 	orr.w	r3, r3, #2
 8004354:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b08      	cmp	r3, #8
 800435e:	d132      	bne.n	80043c6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f043 0308 	orr.w	r3, r3, #8
 8004366:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	2b04      	cmp	r3, #4
 8004370:	d126      	bne.n	80043c0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b02      	cmp	r3, #2
 8004378:	d113      	bne.n	80043a2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004384:	d106      	bne.n	8004394 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2102      	movs	r1, #2
 800438c:	4618      	mov	r0, r3
 800438e:	f003 ff09 	bl	80081a4 <USB_InitFSLSPClkSel>
 8004392:	e011      	b.n	80043b8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2101      	movs	r1, #1
 800439a:	4618      	mov	r0, r3
 800439c:	f003 ff02 	bl	80081a4 <USB_InitFSLSPClkSel>
 80043a0:	e00a      	b.n	80043b8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d106      	bne.n	80043b8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80043b0:	461a      	mov	r2, r3
 80043b2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80043b6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f006 fbe5 	bl	800ab88 <HAL_HCD_PortEnabled_Callback>
 80043be:	e002      	b.n	80043c6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f006 fbef 	bl	800aba4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	f003 0320 	and.w	r3, r3, #32
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d103      	bne.n	80043d8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	f043 0320 	orr.w	r3, r3, #32
 80043d6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80043de:	461a      	mov	r2, r3
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e12b      	b.n	8004656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd fbdc 	bl	8001bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	; 0x24
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800443e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800444e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004450:	f001 fea6 	bl	80061a0 <HAL_RCC_GetPCLK1Freq>
 8004454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4a81      	ldr	r2, [pc, #516]	; (8004660 <HAL_I2C_Init+0x274>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d807      	bhi.n	8004470 <HAL_I2C_Init+0x84>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4a80      	ldr	r2, [pc, #512]	; (8004664 <HAL_I2C_Init+0x278>)
 8004464:	4293      	cmp	r3, r2
 8004466:	bf94      	ite	ls
 8004468:	2301      	movls	r3, #1
 800446a:	2300      	movhi	r3, #0
 800446c:	b2db      	uxtb	r3, r3
 800446e:	e006      	b.n	800447e <HAL_I2C_Init+0x92>
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a7d      	ldr	r2, [pc, #500]	; (8004668 <HAL_I2C_Init+0x27c>)
 8004474:	4293      	cmp	r3, r2
 8004476:	bf94      	ite	ls
 8004478:	2301      	movls	r3, #1
 800447a:	2300      	movhi	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e0e7      	b.n	8004656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	4a78      	ldr	r2, [pc, #480]	; (800466c <HAL_I2C_Init+0x280>)
 800448a:	fba2 2303 	umull	r2, r3, r2, r3
 800448e:	0c9b      	lsrs	r3, r3, #18
 8004490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	4a6a      	ldr	r2, [pc, #424]	; (8004660 <HAL_I2C_Init+0x274>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d802      	bhi.n	80044c0 <HAL_I2C_Init+0xd4>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	3301      	adds	r3, #1
 80044be:	e009      	b.n	80044d4 <HAL_I2C_Init+0xe8>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80044c6:	fb02 f303 	mul.w	r3, r2, r3
 80044ca:	4a69      	ldr	r2, [pc, #420]	; (8004670 <HAL_I2C_Init+0x284>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	099b      	lsrs	r3, r3, #6
 80044d2:	3301      	adds	r3, #1
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	430b      	orrs	r3, r1
 80044da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80044e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	495c      	ldr	r1, [pc, #368]	; (8004660 <HAL_I2C_Init+0x274>)
 80044f0:	428b      	cmp	r3, r1
 80044f2:	d819      	bhi.n	8004528 <HAL_I2C_Init+0x13c>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	1e59      	subs	r1, r3, #1
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004502:	1c59      	adds	r1, r3, #1
 8004504:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004508:	400b      	ands	r3, r1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_I2C_Init+0x138>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1e59      	subs	r1, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	005b      	lsls	r3, r3, #1
 8004518:	fbb1 f3f3 	udiv	r3, r1, r3
 800451c:	3301      	adds	r3, #1
 800451e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004522:	e051      	b.n	80045c8 <HAL_I2C_Init+0x1dc>
 8004524:	2304      	movs	r3, #4
 8004526:	e04f      	b.n	80045c8 <HAL_I2C_Init+0x1dc>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d111      	bne.n	8004554 <HAL_I2C_Init+0x168>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1e58      	subs	r0, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	460b      	mov	r3, r1
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	440b      	add	r3, r1
 800453e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004542:	3301      	adds	r3, #1
 8004544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004548:	2b00      	cmp	r3, #0
 800454a:	bf0c      	ite	eq
 800454c:	2301      	moveq	r3, #1
 800454e:	2300      	movne	r3, #0
 8004550:	b2db      	uxtb	r3, r3
 8004552:	e012      	b.n	800457a <HAL_I2C_Init+0x18e>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1e58      	subs	r0, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6859      	ldr	r1, [r3, #4]
 800455c:	460b      	mov	r3, r1
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	0099      	lsls	r1, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	fbb0 f3f3 	udiv	r3, r0, r3
 800456a:	3301      	adds	r3, #1
 800456c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf0c      	ite	eq
 8004574:	2301      	moveq	r3, #1
 8004576:	2300      	movne	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Init+0x196>
 800457e:	2301      	movs	r3, #1
 8004580:	e022      	b.n	80045c8 <HAL_I2C_Init+0x1dc>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10e      	bne.n	80045a8 <HAL_I2C_Init+0x1bc>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1e58      	subs	r0, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6859      	ldr	r1, [r3, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	440b      	add	r3, r1
 8004598:	fbb0 f3f3 	udiv	r3, r0, r3
 800459c:	3301      	adds	r3, #1
 800459e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a6:	e00f      	b.n	80045c8 <HAL_I2C_Init+0x1dc>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1e58      	subs	r0, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	0099      	lsls	r1, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	6809      	ldr	r1, [r1, #0]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	69da      	ldr	r2, [r3, #28]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	430a      	orrs	r2, r1
 80045ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80045f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6911      	ldr	r1, [r2, #16]
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	68d2      	ldr	r2, [r2, #12]
 8004602:	4311      	orrs	r1, r2
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	430b      	orrs	r3, r1
 800460a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2220      	movs	r2, #32
 8004642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	000186a0 	.word	0x000186a0
 8004664:	001e847f 	.word	0x001e847f
 8004668:	003d08ff 	.word	0x003d08ff
 800466c:	431bde83 	.word	0x431bde83
 8004670:	10624dd3 	.word	0x10624dd3

08004674 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08c      	sub	sp, #48	; 0x30
 8004678:	af02      	add	r7, sp, #8
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	4608      	mov	r0, r1
 800467e:	4611      	mov	r1, r2
 8004680:	461a      	mov	r2, r3
 8004682:	4603      	mov	r3, r0
 8004684:	817b      	strh	r3, [r7, #10]
 8004686:	460b      	mov	r3, r1
 8004688:	813b      	strh	r3, [r7, #8]
 800468a:	4613      	mov	r3, r2
 800468c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800468e:	f7fd fe1f 	bl	80022d0 <HAL_GetTick>
 8004692:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469a:	b2db      	uxtb	r3, r3
 800469c:	2b20      	cmp	r3, #32
 800469e:	f040 8208 	bne.w	8004ab2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	2319      	movs	r3, #25
 80046a8:	2201      	movs	r2, #1
 80046aa:	497b      	ldr	r1, [pc, #492]	; (8004898 <HAL_I2C_Mem_Read+0x224>)
 80046ac:	68f8      	ldr	r0, [r7, #12]
 80046ae:	f000 faef 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80046b8:	2302      	movs	r3, #2
 80046ba:	e1fb      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <HAL_I2C_Mem_Read+0x56>
 80046c6:	2302      	movs	r3, #2
 80046c8:	e1f4      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x440>
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d007      	beq.n	80046f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2222      	movs	r2, #34	; 0x22
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2240      	movs	r2, #64	; 0x40
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800471a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004720:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004726:	b29a      	uxth	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	4a5b      	ldr	r2, [pc, #364]	; (800489c <HAL_I2C_Mem_Read+0x228>)
 8004730:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004732:	88f8      	ldrh	r0, [r7, #6]
 8004734:	893a      	ldrh	r2, [r7, #8]
 8004736:	8979      	ldrh	r1, [r7, #10]
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	9301      	str	r3, [sp, #4]
 800473c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473e:	9300      	str	r3, [sp, #0]
 8004740:	4603      	mov	r3, r0
 8004742:	68f8      	ldr	r0, [r7, #12]
 8004744:	f000 f9bc 	bl	8004ac0 <I2C_RequestMemoryRead>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e1b0      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d113      	bne.n	8004782 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800475a:	2300      	movs	r3, #0
 800475c:	623b      	str	r3, [r7, #32]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	695b      	ldr	r3, [r3, #20]
 8004764:	623b      	str	r3, [r7, #32]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	623b      	str	r3, [r7, #32]
 800476e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]
 8004780:	e184      	b.n	8004a8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004786:	2b01      	cmp	r3, #1
 8004788:	d11b      	bne.n	80047c2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004798:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	61fb      	str	r3, [r7, #28]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	61fb      	str	r3, [r7, #28]
 80047ae:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	e164      	b.n	8004a8c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d11b      	bne.n	8004802 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ea:	2300      	movs	r3, #0
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	61bb      	str	r3, [r7, #24]
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	e144      	b.n	8004a8c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004802:	2300      	movs	r3, #0
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	699b      	ldr	r3, [r3, #24]
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004818:	e138      	b.n	8004a8c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800481e:	2b03      	cmp	r3, #3
 8004820:	f200 80f1 	bhi.w	8004a06 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004828:	2b01      	cmp	r3, #1
 800482a:	d123      	bne.n	8004874 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800482c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800482e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 fb44 	bl	8004ebe <I2C_WaitOnRXNEFlagUntilTimeout>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e139      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691a      	ldr	r2, [r3, #16]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	1c5a      	adds	r2, r3, #1
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004868:	b29b      	uxth	r3, r3
 800486a:	3b01      	subs	r3, #1
 800486c:	b29a      	uxth	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004872:	e10b      	b.n	8004a8c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004878:	2b02      	cmp	r3, #2
 800487a:	d14e      	bne.n	800491a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800487c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487e:	9300      	str	r3, [sp, #0]
 8004880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004882:	2200      	movs	r2, #0
 8004884:	4906      	ldr	r1, [pc, #24]	; (80048a0 <HAL_I2C_Mem_Read+0x22c>)
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fa02 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d008      	beq.n	80048a4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e10e      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x440>
 8004896:	bf00      	nop
 8004898:	00100002 	.word	0x00100002
 800489c:	ffff0000 	.word	0xffff0000
 80048a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	691a      	ldr	r2, [r3, #16]
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	1c5a      	adds	r2, r3, #1
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	3b01      	subs	r3, #1
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	b2d2      	uxtb	r2, r2
 80048f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004902:	3b01      	subs	r3, #1
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004918:	e0b8      	b.n	8004a8c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	9300      	str	r3, [sp, #0]
 800491e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004920:	2200      	movs	r2, #0
 8004922:	4966      	ldr	r1, [pc, #408]	; (8004abc <HAL_I2C_Mem_Read+0x448>)
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f9b3 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e0bf      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004942:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691a      	ldr	r2, [r3, #16]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	b2d2      	uxtb	r2, r2
 8004950:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004960:	3b01      	subs	r3, #1
 8004962:	b29a      	uxth	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496c:	b29b      	uxth	r3, r3
 800496e:	3b01      	subs	r3, #1
 8004970:	b29a      	uxth	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497c:	2200      	movs	r2, #0
 800497e:	494f      	ldr	r1, [pc, #316]	; (8004abc <HAL_I2C_Mem_Read+0x448>)
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f985 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e091      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	1c5a      	adds	r2, r3, #1
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	3b01      	subs	r3, #1
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a04:	e042      	b.n	8004a8c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fa57 	bl	8004ebe <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e04c      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d118      	bne.n	8004a8c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f aec2 	bne.w	800481a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e000      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
  }
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3728      	adds	r7, #40	; 0x28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	00010004 	.word	0x00010004

08004ac0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b088      	sub	sp, #32
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	4608      	mov	r0, r1
 8004aca:	4611      	mov	r1, r2
 8004acc:	461a      	mov	r2, r3
 8004ace:	4603      	mov	r3, r0
 8004ad0:	817b      	strh	r3, [r7, #10]
 8004ad2:	460b      	mov	r3, r1
 8004ad4:	813b      	strh	r3, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ae8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004af8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 f8c2 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00d      	beq.n	8004b2e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b20:	d103      	bne.n	8004b2a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b28:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e0aa      	b.n	8004c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b2e:	897b      	ldrh	r3, [r7, #10]
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b3c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	6a3a      	ldr	r2, [r7, #32]
 8004b42:	4952      	ldr	r1, [pc, #328]	; (8004c8c <I2C_RequestMemoryRead+0x1cc>)
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f8fa 	bl	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e097      	b.n	8004c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	617b      	str	r3, [r7, #20]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6c:	6a39      	ldr	r1, [r7, #32]
 8004b6e:	68f8      	ldr	r0, [r7, #12]
 8004b70:	f000 f964 	bl	8004e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d00d      	beq.n	8004b96 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d107      	bne.n	8004b92 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b90:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e076      	b.n	8004c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d105      	bne.n	8004ba8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004b9c:	893b      	ldrh	r3, [r7, #8]
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	611a      	str	r2, [r3, #16]
 8004ba6:	e021      	b.n	8004bec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ba8:	893b      	ldrh	r3, [r7, #8]
 8004baa:	0a1b      	lsrs	r3, r3, #8
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb8:	6a39      	ldr	r1, [r7, #32]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 f93e 	bl	8004e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d00d      	beq.n	8004be2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d107      	bne.n	8004bde <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bdc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e050      	b.n	8004c84 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004be2:	893b      	ldrh	r3, [r7, #8]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	6a39      	ldr	r1, [r7, #32]
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f923 	bl	8004e3c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00d      	beq.n	8004c18 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d107      	bne.n	8004c14 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c12:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e035      	b.n	8004c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c26:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	6a3b      	ldr	r3, [r7, #32]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 f82b 	bl	8004c90 <I2C_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00d      	beq.n	8004c5c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c4e:	d103      	bne.n	8004c58 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e013      	b.n	8004c84 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c5c:	897b      	ldrh	r3, [r7, #10]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6e:	6a3a      	ldr	r2, [r7, #32]
 8004c70:	4906      	ldr	r1, [pc, #24]	; (8004c8c <I2C_RequestMemoryRead+0x1cc>)
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 f863 	bl	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3718      	adds	r7, #24
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	00010002 	.word	0x00010002

08004c90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ca0:	e025      	b.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca8:	d021      	beq.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fd fb11 	bl	80022d0 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d116      	bne.n	8004cee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	f043 0220 	orr.w	r2, r3, #32
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e023      	b.n	8004d36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	0c1b      	lsrs	r3, r3, #16
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d10d      	bne.n	8004d14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	43da      	mvns	r2, r3
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4013      	ands	r3, r2
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	bf0c      	ite	eq
 8004d0a:	2301      	moveq	r3, #1
 8004d0c:	2300      	movne	r3, #0
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	461a      	mov	r2, r3
 8004d12:	e00c      	b.n	8004d2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	43da      	mvns	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	4013      	ands	r3, r2
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bf0c      	ite	eq
 8004d26:	2301      	moveq	r3, #1
 8004d28:	2300      	movne	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d0b6      	beq.n	8004ca2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
 8004d4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d4c:	e051      	b.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695b      	ldr	r3, [r3, #20]
 8004d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5c:	d123      	bne.n	8004da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f043 0204 	orr.w	r2, r3, #4
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e046      	b.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dac:	d021      	beq.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dae:	f7fd fa8f 	bl	80022d0 <HAL_GetTick>
 8004db2:	4602      	mov	r2, r0
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	1ad3      	subs	r3, r2, r3
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d302      	bcc.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d116      	bne.n	8004df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2220      	movs	r2, #32
 8004dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f043 0220 	orr.w	r2, r3, #32
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2200      	movs	r2, #0
 8004dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e020      	b.n	8004e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d10c      	bne.n	8004e16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	43da      	mvns	r2, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	4013      	ands	r3, r2
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	bf14      	ite	ne
 8004e0e:	2301      	movne	r3, #1
 8004e10:	2300      	moveq	r3, #0
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	e00b      	b.n	8004e2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	43da      	mvns	r2, r3
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4013      	ands	r3, r2
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	bf14      	ite	ne
 8004e28:	2301      	movne	r3, #1
 8004e2a:	2300      	moveq	r3, #0
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d18d      	bne.n	8004d4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e48:	e02d      	b.n	8004ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f88d 	bl	8004f6a <I2C_IsAcknowledgeFailed>
 8004e50:	4603      	mov	r3, r0
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e02d      	b.n	8004eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e60:	d021      	beq.n	8004ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e62:	f7fd fa35 	bl	80022d0 <HAL_GetTick>
 8004e66:	4602      	mov	r2, r0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d302      	bcc.n	8004e78 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d116      	bne.n	8004ea6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2220      	movs	r2, #32
 8004e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f043 0220 	orr.w	r2, r3, #32
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e007      	b.n	8004eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	695b      	ldr	r3, [r3, #20]
 8004eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb0:	2b80      	cmp	r3, #128	; 0x80
 8004eb2:	d1ca      	bne.n	8004e4a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	60f8      	str	r0, [r7, #12]
 8004ec6:	60b9      	str	r1, [r7, #8]
 8004ec8:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004eca:	e042      	b.n	8004f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0310 	and.w	r3, r3, #16
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d119      	bne.n	8004f0e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f06f 0210 	mvn.w	r2, #16
 8004ee2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2220      	movs	r2, #32
 8004eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e029      	b.n	8004f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f0e:	f7fd f9df 	bl	80022d0 <HAL_GetTick>
 8004f12:	4602      	mov	r2, r0
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	1ad3      	subs	r3, r2, r3
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d302      	bcc.n	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d116      	bne.n	8004f52 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2220      	movs	r2, #32
 8004f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3e:	f043 0220 	orr.w	r2, r3, #32
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e007      	b.n	8004f62 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b40      	cmp	r3, #64	; 0x40
 8004f5e:	d1b5      	bne.n	8004ecc <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004f60:	2300      	movs	r3, #0
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f80:	d11b      	bne.n	8004fba <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f8a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2220      	movs	r2, #32
 8004f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f043 0204 	orr.w	r2, r3, #4
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e128      	b.n	800522c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d109      	bne.n	8004ffa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a90      	ldr	r2, [pc, #576]	; (8005234 <HAL_I2S_Init+0x26c>)
 8004ff2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f7fc fe55 	bl	8001ca4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2202      	movs	r2, #2
 8004ffe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	69db      	ldr	r3, [r3, #28]
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005010:	f023 030f 	bic.w	r3, r3, #15
 8005014:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	2202      	movs	r2, #2
 800501c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	695b      	ldr	r3, [r3, #20]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d060      	beq.n	80050e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d102      	bne.n	8005034 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800502e:	2310      	movs	r3, #16
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e001      	b.n	8005038 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005034:	2320      	movs	r3, #32
 8005036:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	2b20      	cmp	r3, #32
 800503e:	d802      	bhi.n	8005046 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8005046:	2001      	movs	r0, #1
 8005048:	f001 f9a0 	bl	800638c <HAL_RCCEx_GetPeriphCLKFreq>
 800504c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005056:	d125      	bne.n	80050a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d010      	beq.n	8005082 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	fbb2 f2f3 	udiv	r2, r2, r3
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	461a      	mov	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	fbb2 f3f3 	udiv	r3, r2, r3
 800507c:	3305      	adds	r3, #5
 800507e:	613b      	str	r3, [r7, #16]
 8005080:	e01f      	b.n	80050c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	fbb2 f2f3 	udiv	r2, r2, r3
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	005b      	lsls	r3, r3, #1
 8005094:	461a      	mov	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	fbb2 f3f3 	udiv	r3, r2, r3
 800509e:	3305      	adds	r3, #5
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	e00e      	b.n	80050c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	005b      	lsls	r3, r3, #1
 80050b4:	461a      	mov	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80050be:	3305      	adds	r3, #5
 80050c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4a5c      	ldr	r2, [pc, #368]	; (8005238 <HAL_I2S_Init+0x270>)
 80050c6:	fba2 2303 	umull	r2, r3, r2, r3
 80050ca:	08db      	lsrs	r3, r3, #3
 80050cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	085b      	lsrs	r3, r3, #1
 80050de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	021b      	lsls	r3, r3, #8
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	e003      	b.n	80050f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80050e8:	2302      	movs	r3, #2
 80050ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d902      	bls.n	80050fc <HAL_I2S_Init+0x134>
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2bff      	cmp	r3, #255	; 0xff
 80050fa:	d907      	bls.n	800510c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	f043 0210 	orr.w	r2, r3, #16
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e08f      	b.n	800522c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	69bb      	ldr	r3, [r7, #24]
 8005112:	ea42 0103 	orr.w	r1, r2, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69fa      	ldr	r2, [r7, #28]
 800511c:	430a      	orrs	r2, r1
 800511e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800512a:	f023 030f 	bic.w	r3, r3, #15
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6851      	ldr	r1, [r2, #4]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	6892      	ldr	r2, [r2, #8]
 8005136:	4311      	orrs	r1, r2
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	68d2      	ldr	r2, [r2, #12]
 800513c:	4311      	orrs	r1, r2
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	6992      	ldr	r2, [r2, #24]
 8005142:	430a      	orrs	r2, r1
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800514e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d161      	bne.n	800521c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a38      	ldr	r2, [pc, #224]	; (800523c <HAL_I2S_Init+0x274>)
 800515c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a37      	ldr	r2, [pc, #220]	; (8005240 <HAL_I2S_Init+0x278>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d101      	bne.n	800516c <HAL_I2S_Init+0x1a4>
 8005168:	4b36      	ldr	r3, [pc, #216]	; (8005244 <HAL_I2S_Init+0x27c>)
 800516a:	e001      	b.n	8005170 <HAL_I2S_Init+0x1a8>
 800516c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	4932      	ldr	r1, [pc, #200]	; (8005240 <HAL_I2S_Init+0x278>)
 8005178:	428a      	cmp	r2, r1
 800517a:	d101      	bne.n	8005180 <HAL_I2S_Init+0x1b8>
 800517c:	4a31      	ldr	r2, [pc, #196]	; (8005244 <HAL_I2S_Init+0x27c>)
 800517e:	e001      	b.n	8005184 <HAL_I2S_Init+0x1bc>
 8005180:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005184:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005188:	f023 030f 	bic.w	r3, r3, #15
 800518c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a2b      	ldr	r2, [pc, #172]	; (8005240 <HAL_I2S_Init+0x278>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d101      	bne.n	800519c <HAL_I2S_Init+0x1d4>
 8005198:	4b2a      	ldr	r3, [pc, #168]	; (8005244 <HAL_I2S_Init+0x27c>)
 800519a:	e001      	b.n	80051a0 <HAL_I2S_Init+0x1d8>
 800519c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051a0:	2202      	movs	r2, #2
 80051a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a25      	ldr	r2, [pc, #148]	; (8005240 <HAL_I2S_Init+0x278>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d101      	bne.n	80051b2 <HAL_I2S_Init+0x1ea>
 80051ae:	4b25      	ldr	r3, [pc, #148]	; (8005244 <HAL_I2S_Init+0x27c>)
 80051b0:	e001      	b.n	80051b6 <HAL_I2S_Init+0x1ee>
 80051b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b6:	69db      	ldr	r3, [r3, #28]
 80051b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051c2:	d003      	beq.n	80051cc <HAL_I2S_Init+0x204>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d103      	bne.n	80051d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80051cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e001      	b.n	80051d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051e2:	4313      	orrs	r3, r2
 80051e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051ec:	4313      	orrs	r3, r2
 80051ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80051f6:	4313      	orrs	r3, r2
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	897b      	ldrh	r3, [r7, #10]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005204:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a0d      	ldr	r2, [pc, #52]	; (8005240 <HAL_I2S_Init+0x278>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d101      	bne.n	8005214 <HAL_I2S_Init+0x24c>
 8005210:	4b0c      	ldr	r3, [pc, #48]	; (8005244 <HAL_I2S_Init+0x27c>)
 8005212:	e001      	b.n	8005218 <HAL_I2S_Init+0x250>
 8005214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005218:	897a      	ldrh	r2, [r7, #10]
 800521a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	0800533f 	.word	0x0800533f
 8005238:	cccccccd 	.word	0xcccccccd
 800523c:	08005455 	.word	0x08005455
 8005240:	40003800 	.word	0x40003800
 8005244:	40003400 	.word	0x40003400

08005248 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	881a      	ldrh	r2, [r3, #0]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	1c9a      	adds	r2, r3, #2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052a6:	b29b      	uxth	r3, r3
 80052a8:	3b01      	subs	r3, #1
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10e      	bne.n	80052d8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052c8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff ffb8 	bl	8005248 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80052d8:	bf00      	nop
 80052da:	3708      	adds	r7, #8
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052f2:	b292      	uxth	r2, r2
 80052f4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	1c9a      	adds	r2, r3, #2
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005304:	b29b      	uxth	r3, r3
 8005306:	3b01      	subs	r3, #1
 8005308:	b29a      	uxth	r2, r3
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10e      	bne.n	8005336 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685a      	ldr	r2, [r3, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005326:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ff93 	bl	800525c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b086      	sub	sp, #24
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005354:	b2db      	uxtb	r3, r3
 8005356:	2b04      	cmp	r3, #4
 8005358:	d13a      	bne.n	80053d0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b01      	cmp	r3, #1
 8005362:	d109      	bne.n	8005378 <I2S_IRQHandler+0x3a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d102      	bne.n	8005378 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff ffb4 	bl	80052e0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800537e:	2b40      	cmp	r3, #64	; 0x40
 8005380:	d126      	bne.n	80053d0 <I2S_IRQHandler+0x92>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0320 	and.w	r3, r3, #32
 800538c:	2b20      	cmp	r3, #32
 800538e:	d11f      	bne.n	80053d0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685a      	ldr	r2, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800539e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80053a0:	2300      	movs	r3, #0
 80053a2:	613b      	str	r3, [r7, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	613b      	str	r3, [r7, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	613b      	str	r3, [r7, #16]
 80053b4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053c2:	f043 0202 	orr.w	r2, r3, #2
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7ff ff50 	bl	8005270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d136      	bne.n	800544a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d109      	bne.n	80053fa <I2S_IRQHandler+0xbc>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	2b80      	cmp	r3, #128	; 0x80
 80053f2:	d102      	bne.n	80053fa <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff ff45 	bl	8005284 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b08      	cmp	r3, #8
 8005402:	d122      	bne.n	800544a <I2S_IRQHandler+0x10c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f003 0320 	and.w	r3, r3, #32
 800540e:	2b20      	cmp	r3, #32
 8005410:	d11b      	bne.n	800544a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005420:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005422:	2300      	movs	r3, #0
 8005424:	60fb      	str	r3, [r7, #12]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800543c:	f043 0204 	orr.w	r2, r3, #4
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff ff13 	bl	8005270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b088      	sub	sp, #32
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4aa2      	ldr	r2, [pc, #648]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d101      	bne.n	8005472 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800546e:	4ba2      	ldr	r3, [pc, #648]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005470:	e001      	b.n	8005476 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005472:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a9b      	ldr	r2, [pc, #620]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d101      	bne.n	8005490 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800548c:	4b9a      	ldr	r3, [pc, #616]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800548e:	e001      	b.n	8005494 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005490:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054a0:	d004      	beq.n	80054ac <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f040 8099 	bne.w	80055de <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d107      	bne.n	80054c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 f925 	bl	8005710 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d107      	bne.n	80054e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 f9c8 	bl	8005870 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e6:	2b40      	cmp	r3, #64	; 0x40
 80054e8:	d13a      	bne.n	8005560 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f003 0320 	and.w	r3, r3, #32
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d035      	beq.n	8005560 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a7e      	ldr	r2, [pc, #504]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d101      	bne.n	8005502 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80054fe:	4b7e      	ldr	r3, [pc, #504]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005500:	e001      	b.n	8005506 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005502:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4979      	ldr	r1, [pc, #484]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800550e:	428b      	cmp	r3, r1
 8005510:	d101      	bne.n	8005516 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005512:	4b79      	ldr	r3, [pc, #484]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005514:	e001      	b.n	800551a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005516:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800551a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800551e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	685a      	ldr	r2, [r3, #4]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800552e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005530:	2300      	movs	r3, #0
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	f043 0202 	orr.w	r2, r3, #2
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f7ff fe88 	bl	8005270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b08      	cmp	r3, #8
 8005568:	f040 80be 	bne.w	80056e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	f003 0320 	and.w	r3, r3, #32
 8005572:	2b00      	cmp	r3, #0
 8005574:	f000 80b8 	beq.w	80056e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005586:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a59      	ldr	r2, [pc, #356]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d101      	bne.n	8005596 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005592:	4b59      	ldr	r3, [pc, #356]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005594:	e001      	b.n	800559a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005596:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4954      	ldr	r1, [pc, #336]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055a2:	428b      	cmp	r3, r1
 80055a4:	d101      	bne.n	80055aa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80055a6:	4b54      	ldr	r3, [pc, #336]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055a8:	e001      	b.n	80055ae <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80055aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055b2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80055b4:	2300      	movs	r3, #0
 80055b6:	60bb      	str	r3, [r7, #8]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	60bb      	str	r3, [r7, #8]
 80055c0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	f043 0204 	orr.w	r2, r3, #4
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f7ff fe4a 	bl	8005270 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80055dc:	e084      	b.n	80056e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d107      	bne.n	80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d002      	beq.n	80055f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f8be 	bl	8005774 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d107      	bne.n	8005612 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f000 f8fd 	bl	800580c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005618:	2b40      	cmp	r3, #64	; 0x40
 800561a:	d12f      	bne.n	800567c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d02a      	beq.n	800567c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005634:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a2e      	ldr	r2, [pc, #184]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d101      	bne.n	8005644 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005640:	4b2d      	ldr	r3, [pc, #180]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005642:	e001      	b.n	8005648 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005644:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4929      	ldr	r1, [pc, #164]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005650:	428b      	cmp	r3, r1
 8005652:	d101      	bne.n	8005658 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005654:	4b28      	ldr	r3, [pc, #160]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005656:	e001      	b.n	800565c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005658:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800565c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005660:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	f043 0202 	orr.w	r2, r3, #2
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff fdfa 	bl	8005270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	2b08      	cmp	r3, #8
 8005684:	d131      	bne.n	80056ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d02c      	beq.n	80056ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a17      	ldr	r2, [pc, #92]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d101      	bne.n	800569e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800569a:	4b17      	ldr	r3, [pc, #92]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800569c:	e001      	b.n	80056a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800569e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4912      	ldr	r1, [pc, #72]	; (80056f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80056aa:	428b      	cmp	r3, r1
 80056ac:	d101      	bne.n	80056b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80056ae:	4b12      	ldr	r3, [pc, #72]	; (80056f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80056b0:	e001      	b.n	80056b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80056b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80056ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056ca:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056d8:	f043 0204 	orr.w	r2, r3, #4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fdc5 	bl	8005270 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056e6:	e000      	b.n	80056ea <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056e8:	bf00      	nop
}
 80056ea:	bf00      	nop
 80056ec:	3720      	adds	r7, #32
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40003800 	.word	0x40003800
 80056f8:	40003400 	.word	0x40003400

080056fc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571c:	1c99      	adds	r1, r3, #2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6251      	str	r1, [r2, #36]	; 0x24
 8005722:	881a      	ldrh	r2, [r3, #0]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800572e:	b29b      	uxth	r3, r3
 8005730:	3b01      	subs	r3, #1
 8005732:	b29a      	uxth	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d113      	bne.n	800576a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005750:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005756:	b29b      	uxth	r3, r3
 8005758:	2b00      	cmp	r3, #0
 800575a:	d106      	bne.n	800576a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff ffc9 	bl	80056fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800576a:	bf00      	nop
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
	...

08005774 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005780:	1c99      	adds	r1, r3, #2
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	6251      	str	r1, [r2, #36]	; 0x24
 8005786:	8819      	ldrh	r1, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <I2SEx_TxISR_I2SExt+0x90>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d101      	bne.n	8005796 <I2SEx_TxISR_I2SExt+0x22>
 8005792:	4b1d      	ldr	r3, [pc, #116]	; (8005808 <I2SEx_TxISR_I2SExt+0x94>)
 8005794:	e001      	b.n	800579a <I2SEx_TxISR_I2SExt+0x26>
 8005796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800579a:	460a      	mov	r2, r1
 800579c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d121      	bne.n	80057fa <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a12      	ldr	r2, [pc, #72]	; (8005804 <I2SEx_TxISR_I2SExt+0x90>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d101      	bne.n	80057c4 <I2SEx_TxISR_I2SExt+0x50>
 80057c0:	4b11      	ldr	r3, [pc, #68]	; (8005808 <I2SEx_TxISR_I2SExt+0x94>)
 80057c2:	e001      	b.n	80057c8 <I2SEx_TxISR_I2SExt+0x54>
 80057c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	490d      	ldr	r1, [pc, #52]	; (8005804 <I2SEx_TxISR_I2SExt+0x90>)
 80057d0:	428b      	cmp	r3, r1
 80057d2:	d101      	bne.n	80057d8 <I2SEx_TxISR_I2SExt+0x64>
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <I2SEx_TxISR_I2SExt+0x94>)
 80057d6:	e001      	b.n	80057dc <I2SEx_TxISR_I2SExt+0x68>
 80057d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057dc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057e0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d106      	bne.n	80057fa <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff81 	bl	80056fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40003800 	.word	0x40003800
 8005808:	40003400 	.word	0x40003400

0800580c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	68d8      	ldr	r0, [r3, #12]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581e:	1c99      	adds	r1, r3, #2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005824:	b282      	uxth	r2, r0
 8005826:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d113      	bne.n	8005868 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800584e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d106      	bne.n	8005868 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2201      	movs	r2, #1
 800585e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff ff4a 	bl	80056fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005868:	bf00      	nop
 800586a:	3708      	adds	r7, #8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}

08005870 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a20      	ldr	r2, [pc, #128]	; (8005900 <I2SEx_RxISR_I2SExt+0x90>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d101      	bne.n	8005886 <I2SEx_RxISR_I2SExt+0x16>
 8005882:	4b20      	ldr	r3, [pc, #128]	; (8005904 <I2SEx_RxISR_I2SExt+0x94>)
 8005884:	e001      	b.n	800588a <I2SEx_RxISR_I2SExt+0x1a>
 8005886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800588a:	68d8      	ldr	r0, [r3, #12]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005890:	1c99      	adds	r1, r3, #2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005896:	b282      	uxth	r2, r0
 8005898:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d121      	bne.n	80058f6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a12      	ldr	r2, [pc, #72]	; (8005900 <I2SEx_RxISR_I2SExt+0x90>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <I2SEx_RxISR_I2SExt+0x50>
 80058bc:	4b11      	ldr	r3, [pc, #68]	; (8005904 <I2SEx_RxISR_I2SExt+0x94>)
 80058be:	e001      	b.n	80058c4 <I2SEx_RxISR_I2SExt+0x54>
 80058c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	490d      	ldr	r1, [pc, #52]	; (8005900 <I2SEx_RxISR_I2SExt+0x90>)
 80058cc:	428b      	cmp	r3, r1
 80058ce:	d101      	bne.n	80058d4 <I2SEx_RxISR_I2SExt+0x64>
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <I2SEx_RxISR_I2SExt+0x94>)
 80058d2:	e001      	b.n	80058d8 <I2SEx_RxISR_I2SExt+0x68>
 80058d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058dc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7ff ff03 	bl	80056fc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	40003800 	.word	0x40003800
 8005904:	40003400 	.word	0x40003400

08005908 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d101      	bne.n	800591a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e264      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0301 	and.w	r3, r3, #1
 8005922:	2b00      	cmp	r3, #0
 8005924:	d075      	beq.n	8005a12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005926:	4ba3      	ldr	r3, [pc, #652]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b04      	cmp	r3, #4
 8005930:	d00c      	beq.n	800594c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005932:	4ba0      	ldr	r3, [pc, #640]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800593a:	2b08      	cmp	r3, #8
 800593c:	d112      	bne.n	8005964 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800593e:	4b9d      	ldr	r3, [pc, #628]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005946:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800594a:	d10b      	bne.n	8005964 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800594c:	4b99      	ldr	r3, [pc, #612]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d05b      	beq.n	8005a10 <HAL_RCC_OscConfig+0x108>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d157      	bne.n	8005a10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e23f      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800596c:	d106      	bne.n	800597c <HAL_RCC_OscConfig+0x74>
 800596e:	4b91      	ldr	r3, [pc, #580]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a90      	ldr	r2, [pc, #576]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005978:	6013      	str	r3, [r2, #0]
 800597a:	e01d      	b.n	80059b8 <HAL_RCC_OscConfig+0xb0>
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005984:	d10c      	bne.n	80059a0 <HAL_RCC_OscConfig+0x98>
 8005986:	4b8b      	ldr	r3, [pc, #556]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a8a      	ldr	r2, [pc, #552]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 800598c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005990:	6013      	str	r3, [r2, #0]
 8005992:	4b88      	ldr	r3, [pc, #544]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a87      	ldr	r2, [pc, #540]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	e00b      	b.n	80059b8 <HAL_RCC_OscConfig+0xb0>
 80059a0:	4b84      	ldr	r3, [pc, #528]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a83      	ldr	r2, [pc, #524]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b81      	ldr	r3, [pc, #516]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a80      	ldr	r2, [pc, #512]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d013      	beq.n	80059e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059c0:	f7fc fc86 	bl	80022d0 <HAL_GetTick>
 80059c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059c8:	f7fc fc82 	bl	80022d0 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b64      	cmp	r3, #100	; 0x64
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e204      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059da:	4b76      	ldr	r3, [pc, #472]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0f0      	beq.n	80059c8 <HAL_RCC_OscConfig+0xc0>
 80059e6:	e014      	b.n	8005a12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fc fc72 	bl	80022d0 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fc fc6e 	bl	80022d0 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	; 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e1f0      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a02:	4b6c      	ldr	r3, [pc, #432]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0xe8>
 8005a0e:	e000      	b.n	8005a12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0302 	and.w	r3, r3, #2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d063      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a1e:	4b65      	ldr	r3, [pc, #404]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	f003 030c 	and.w	r3, r3, #12
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a2a:	4b62      	ldr	r3, [pc, #392]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d11c      	bne.n	8005a70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a36:	4b5f      	ldr	r3, [pc, #380]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d116      	bne.n	8005a70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a42:	4b5c      	ldr	r3, [pc, #368]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d005      	beq.n	8005a5a <HAL_RCC_OscConfig+0x152>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d001      	beq.n	8005a5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e1c4      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a5a:	4b56      	ldr	r3, [pc, #344]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4952      	ldr	r1, [pc, #328]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6e:	e03a      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68db      	ldr	r3, [r3, #12]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d020      	beq.n	8005aba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a78:	4b4f      	ldr	r3, [pc, #316]	; (8005bb8 <HAL_RCC_OscConfig+0x2b0>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a7e:	f7fc fc27 	bl	80022d0 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a86:	f7fc fc23 	bl	80022d0 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e1a5      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a98:	4b46      	ldr	r3, [pc, #280]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005aa4:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	4940      	ldr	r1, [pc, #256]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	600b      	str	r3, [r1, #0]
 8005ab8:	e015      	b.n	8005ae6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005aba:	4b3f      	ldr	r3, [pc, #252]	; (8005bb8 <HAL_RCC_OscConfig+0x2b0>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fc fc06 	bl	80022d0 <HAL_GetTick>
 8005ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ac8:	f7fc fc02 	bl	80022d0 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e184      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ada:	4b36      	ldr	r3, [pc, #216]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0302 	and.w	r3, r3, #2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d030      	beq.n	8005b54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d016      	beq.n	8005b28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005afa:	4b30      	ldr	r3, [pc, #192]	; (8005bbc <HAL_RCC_OscConfig+0x2b4>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b00:	f7fc fbe6 	bl	80022d0 <HAL_GetTick>
 8005b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b08:	f7fc fbe2 	bl	80022d0 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b02      	cmp	r3, #2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e164      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b1a:	4b26      	ldr	r3, [pc, #152]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x200>
 8005b26:	e015      	b.n	8005b54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b28:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <HAL_RCC_OscConfig+0x2b4>)
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b2e:	f7fc fbcf 	bl	80022d0 <HAL_GetTick>
 8005b32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b34:	e008      	b.n	8005b48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b36:	f7fc fbcb 	bl	80022d0 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d901      	bls.n	8005b48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e14d      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b48:	4b1a      	ldr	r3, [pc, #104]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f0      	bne.n	8005b36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f003 0304 	and.w	r3, r3, #4
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	f000 80a0 	beq.w	8005ca2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b62:	2300      	movs	r3, #0
 8005b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b66:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10f      	bne.n	8005b92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b72:	2300      	movs	r3, #0
 8005b74:	60bb      	str	r3, [r7, #8]
 8005b76:	4b0f      	ldr	r3, [pc, #60]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	4a0e      	ldr	r2, [pc, #56]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b80:	6413      	str	r3, [r2, #64]	; 0x40
 8005b82:	4b0c      	ldr	r3, [pc, #48]	; (8005bb4 <HAL_RCC_OscConfig+0x2ac>)
 8005b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b8a:	60bb      	str	r3, [r7, #8]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b92:	4b0b      	ldr	r3, [pc, #44]	; (8005bc0 <HAL_RCC_OscConfig+0x2b8>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d121      	bne.n	8005be2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b9e:	4b08      	ldr	r3, [pc, #32]	; (8005bc0 <HAL_RCC_OscConfig+0x2b8>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a07      	ldr	r2, [pc, #28]	; (8005bc0 <HAL_RCC_OscConfig+0x2b8>)
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005baa:	f7fc fb91 	bl	80022d0 <HAL_GetTick>
 8005bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb0:	e011      	b.n	8005bd6 <HAL_RCC_OscConfig+0x2ce>
 8005bb2:	bf00      	nop
 8005bb4:	40023800 	.word	0x40023800
 8005bb8:	42470000 	.word	0x42470000
 8005bbc:	42470e80 	.word	0x42470e80
 8005bc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bc4:	f7fc fb84 	bl	80022d0 <HAL_GetTick>
 8005bc8:	4602      	mov	r2, r0
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	1ad3      	subs	r3, r2, r3
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d901      	bls.n	8005bd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e106      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bd6:	4b85      	ldr	r3, [pc, #532]	; (8005dec <HAL_RCC_OscConfig+0x4e4>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d0f0      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d106      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x2f0>
 8005bea:	4b81      	ldr	r3, [pc, #516]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bee:	4a80      	ldr	r2, [pc, #512]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005bf0:	f043 0301 	orr.w	r3, r3, #1
 8005bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8005bf6:	e01c      	b.n	8005c32 <HAL_RCC_OscConfig+0x32a>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	2b05      	cmp	r3, #5
 8005bfe:	d10c      	bne.n	8005c1a <HAL_RCC_OscConfig+0x312>
 8005c00:	4b7b      	ldr	r3, [pc, #492]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c04:	4a7a      	ldr	r2, [pc, #488]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c06:	f043 0304 	orr.w	r3, r3, #4
 8005c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005c0c:	4b78      	ldr	r3, [pc, #480]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c10:	4a77      	ldr	r2, [pc, #476]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	6713      	str	r3, [r2, #112]	; 0x70
 8005c18:	e00b      	b.n	8005c32 <HAL_RCC_OscConfig+0x32a>
 8005c1a:	4b75      	ldr	r3, [pc, #468]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c1e:	4a74      	ldr	r2, [pc, #464]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c20:	f023 0301 	bic.w	r3, r3, #1
 8005c24:	6713      	str	r3, [r2, #112]	; 0x70
 8005c26:	4b72      	ldr	r3, [pc, #456]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c2a:	4a71      	ldr	r2, [pc, #452]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c2c:	f023 0304 	bic.w	r3, r3, #4
 8005c30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d015      	beq.n	8005c66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c3a:	f7fc fb49 	bl	80022d0 <HAL_GetTick>
 8005c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c40:	e00a      	b.n	8005c58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c42:	f7fc fb45 	bl	80022d0 <HAL_GetTick>
 8005c46:	4602      	mov	r2, r0
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	1ad3      	subs	r3, r2, r3
 8005c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e0c5      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c58:	4b65      	ldr	r3, [pc, #404]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c5c:	f003 0302 	and.w	r3, r3, #2
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0ee      	beq.n	8005c42 <HAL_RCC_OscConfig+0x33a>
 8005c64:	e014      	b.n	8005c90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c66:	f7fc fb33 	bl	80022d0 <HAL_GetTick>
 8005c6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c6c:	e00a      	b.n	8005c84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005c6e:	f7fc fb2f 	bl	80022d0 <HAL_GetTick>
 8005c72:	4602      	mov	r2, r0
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d901      	bls.n	8005c84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	e0af      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c84:	4b5a      	ldr	r3, [pc, #360]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1ee      	bne.n	8005c6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d105      	bne.n	8005ca2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c96:	4b56      	ldr	r3, [pc, #344]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	4a55      	ldr	r2, [pc, #340]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ca0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 809b 	beq.w	8005de2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cac:	4b50      	ldr	r3, [pc, #320]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f003 030c 	and.w	r3, r3, #12
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d05c      	beq.n	8005d72 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d141      	bne.n	8005d44 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005cc0:	4b4c      	ldr	r3, [pc, #304]	; (8005df4 <HAL_RCC_OscConfig+0x4ec>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005cc6:	f7fc fb03 	bl	80022d0 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005cce:	f7fc faff 	bl	80022d0 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e081      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ce0:	4b43      	ldr	r3, [pc, #268]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f0      	bne.n	8005cce <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6a1b      	ldr	r3, [r3, #32]
 8005cf4:	431a      	orrs	r2, r3
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	019b      	lsls	r3, r3, #6
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	085b      	lsrs	r3, r3, #1
 8005d04:	3b01      	subs	r3, #1
 8005d06:	041b      	lsls	r3, r3, #16
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0e:	061b      	lsls	r3, r3, #24
 8005d10:	4937      	ldr	r1, [pc, #220]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005d12:	4313      	orrs	r3, r2
 8005d14:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d16:	4b37      	ldr	r3, [pc, #220]	; (8005df4 <HAL_RCC_OscConfig+0x4ec>)
 8005d18:	2201      	movs	r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d1c:	f7fc fad8 	bl	80022d0 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d24:	f7fc fad4 	bl	80022d0 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e056      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d36:	4b2e      	ldr	r3, [pc, #184]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f0      	beq.n	8005d24 <HAL_RCC_OscConfig+0x41c>
 8005d42:	e04e      	b.n	8005de2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d44:	4b2b      	ldr	r3, [pc, #172]	; (8005df4 <HAL_RCC_OscConfig+0x4ec>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4a:	f7fc fac1 	bl	80022d0 <HAL_GetTick>
 8005d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d50:	e008      	b.n	8005d64 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d52:	f7fc fabd 	bl	80022d0 <HAL_GetTick>
 8005d56:	4602      	mov	r2, r0
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	1ad3      	subs	r3, r2, r3
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d901      	bls.n	8005d64 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e03f      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d64:	4b22      	ldr	r3, [pc, #136]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1f0      	bne.n	8005d52 <HAL_RCC_OscConfig+0x44a>
 8005d70:	e037      	b.n	8005de2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e032      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005d7e:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <HAL_RCC_OscConfig+0x4e8>)
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d028      	beq.n	8005dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d121      	bne.n	8005dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d11a      	bne.n	8005dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005dae:	4013      	ands	r3, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005db4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d111      	bne.n	8005dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dc4:	085b      	lsrs	r3, r3, #1
 8005dc6:	3b01      	subs	r3, #1
 8005dc8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d107      	bne.n	8005dde <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d001      	beq.n	8005de2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3718      	adds	r7, #24
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40007000 	.word	0x40007000
 8005df0:	40023800 	.word	0x40023800
 8005df4:	42470060 	.word	0x42470060

08005df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e0cc      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e0c:	4b68      	ldr	r3, [pc, #416]	; (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0307 	and.w	r3, r3, #7
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d90c      	bls.n	8005e34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e1a:	4b65      	ldr	r3, [pc, #404]	; (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e1c:	683a      	ldr	r2, [r7, #0]
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e22:	4b63      	ldr	r3, [pc, #396]	; (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0307 	and.w	r3, r3, #7
 8005e2a:	683a      	ldr	r2, [r7, #0]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d001      	beq.n	8005e34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0b8      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d020      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0304 	and.w	r3, r3, #4
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e4c:	4b59      	ldr	r3, [pc, #356]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	4a58      	ldr	r2, [pc, #352]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005e56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d005      	beq.n	8005e70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e64:	4b53      	ldr	r3, [pc, #332]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	4a52      	ldr	r2, [pc, #328]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005e6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e70:	4b50      	ldr	r3, [pc, #320]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	494d      	ldr	r1, [pc, #308]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d044      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d107      	bne.n	8005ea6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e96:	4b47      	ldr	r3, [pc, #284]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d119      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e07f      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d003      	beq.n	8005eb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eb2:	2b03      	cmp	r3, #3
 8005eb4:	d107      	bne.n	8005ec6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005eb6:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e06f      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e067      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ed6:	4b37      	ldr	r3, [pc, #220]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f023 0203 	bic.w	r2, r3, #3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	4934      	ldr	r1, [pc, #208]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ee8:	f7fc f9f2 	bl	80022d0 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ef0:	f7fc f9ee 	bl	80022d0 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e04f      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f06:	4b2b      	ldr	r3, [pc, #172]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f003 020c 	and.w	r2, r3, #12
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d1eb      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0307 	and.w	r3, r3, #7
 8005f20:	683a      	ldr	r2, [r7, #0]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d20c      	bcs.n	8005f40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f26:	4b22      	ldr	r3, [pc, #136]	; (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f2e:	4b20      	ldr	r3, [pc, #128]	; (8005fb0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0307 	and.w	r3, r3, #7
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d001      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e032      	b.n	8005fa6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0304 	and.w	r3, r3, #4
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d008      	beq.n	8005f5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f4c:	4b19      	ldr	r3, [pc, #100]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4916      	ldr	r1, [pc, #88]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0308 	and.w	r3, r3, #8
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d009      	beq.n	8005f7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f6a:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	490e      	ldr	r1, [pc, #56]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005f7e:	f000 f821 	bl	8005fc4 <HAL_RCC_GetSysClockFreq>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	091b      	lsrs	r3, r3, #4
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	490a      	ldr	r1, [pc, #40]	; (8005fb8 <HAL_RCC_ClockConfig+0x1c0>)
 8005f90:	5ccb      	ldrb	r3, [r1, r3]
 8005f92:	fa22 f303 	lsr.w	r3, r2, r3
 8005f96:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <HAL_RCC_ClockConfig+0x1c4>)
 8005f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005f9a:	4b09      	ldr	r3, [pc, #36]	; (8005fc0 <HAL_RCC_ClockConfig+0x1c8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fc f952 	bl	8002248 <HAL_InitTick>

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	40023c00 	.word	0x40023c00
 8005fb4:	40023800 	.word	0x40023800
 8005fb8:	0800b1d8 	.word	0x0800b1d8
 8005fbc:	20000010 	.word	0x20000010
 8005fc0:	20000014 	.word	0x20000014

08005fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	607b      	str	r3, [r7, #4]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005fdc:	4b67      	ldr	r3, [pc, #412]	; (800617c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	f003 030c 	and.w	r3, r3, #12
 8005fe4:	2b08      	cmp	r3, #8
 8005fe6:	d00d      	beq.n	8006004 <HAL_RCC_GetSysClockFreq+0x40>
 8005fe8:	2b08      	cmp	r3, #8
 8005fea:	f200 80bd 	bhi.w	8006168 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d002      	beq.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8005ff2:	2b04      	cmp	r3, #4
 8005ff4:	d003      	beq.n	8005ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8005ff6:	e0b7      	b.n	8006168 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ff8:	4b61      	ldr	r3, [pc, #388]	; (8006180 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005ffa:	60bb      	str	r3, [r7, #8]
       break;
 8005ffc:	e0b7      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ffe:	4b61      	ldr	r3, [pc, #388]	; (8006184 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006000:	60bb      	str	r3, [r7, #8]
      break;
 8006002:	e0b4      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006004:	4b5d      	ldr	r3, [pc, #372]	; (800617c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800600c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800600e:	4b5b      	ldr	r3, [pc, #364]	; (800617c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d04d      	beq.n	80060b6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800601a:	4b58      	ldr	r3, [pc, #352]	; (800617c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	099b      	lsrs	r3, r3, #6
 8006020:	461a      	mov	r2, r3
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	f240 10ff 	movw	r0, #511	; 0x1ff
 800602a:	f04f 0100 	mov.w	r1, #0
 800602e:	ea02 0800 	and.w	r8, r2, r0
 8006032:	ea03 0901 	and.w	r9, r3, r1
 8006036:	4640      	mov	r0, r8
 8006038:	4649      	mov	r1, r9
 800603a:	f04f 0200 	mov.w	r2, #0
 800603e:	f04f 0300 	mov.w	r3, #0
 8006042:	014b      	lsls	r3, r1, #5
 8006044:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006048:	0142      	lsls	r2, r0, #5
 800604a:	4610      	mov	r0, r2
 800604c:	4619      	mov	r1, r3
 800604e:	ebb0 0008 	subs.w	r0, r0, r8
 8006052:	eb61 0109 	sbc.w	r1, r1, r9
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	f04f 0300 	mov.w	r3, #0
 800605e:	018b      	lsls	r3, r1, #6
 8006060:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006064:	0182      	lsls	r2, r0, #6
 8006066:	1a12      	subs	r2, r2, r0
 8006068:	eb63 0301 	sbc.w	r3, r3, r1
 800606c:	f04f 0000 	mov.w	r0, #0
 8006070:	f04f 0100 	mov.w	r1, #0
 8006074:	00d9      	lsls	r1, r3, #3
 8006076:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800607a:	00d0      	lsls	r0, r2, #3
 800607c:	4602      	mov	r2, r0
 800607e:	460b      	mov	r3, r1
 8006080:	eb12 0208 	adds.w	r2, r2, r8
 8006084:	eb43 0309 	adc.w	r3, r3, r9
 8006088:	f04f 0000 	mov.w	r0, #0
 800608c:	f04f 0100 	mov.w	r1, #0
 8006090:	0259      	lsls	r1, r3, #9
 8006092:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006096:	0250      	lsls	r0, r2, #9
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4610      	mov	r0, r2
 800609e:	4619      	mov	r1, r3
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	461a      	mov	r2, r3
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	f7fa f88e 	bl	80001c8 <__aeabi_uldivmod>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4613      	mov	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	e04a      	b.n	800614c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060b6:	4b31      	ldr	r3, [pc, #196]	; (800617c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	099b      	lsrs	r3, r3, #6
 80060bc:	461a      	mov	r2, r3
 80060be:	f04f 0300 	mov.w	r3, #0
 80060c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80060c6:	f04f 0100 	mov.w	r1, #0
 80060ca:	ea02 0400 	and.w	r4, r2, r0
 80060ce:	ea03 0501 	and.w	r5, r3, r1
 80060d2:	4620      	mov	r0, r4
 80060d4:	4629      	mov	r1, r5
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	014b      	lsls	r3, r1, #5
 80060e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80060e4:	0142      	lsls	r2, r0, #5
 80060e6:	4610      	mov	r0, r2
 80060e8:	4619      	mov	r1, r3
 80060ea:	1b00      	subs	r0, r0, r4
 80060ec:	eb61 0105 	sbc.w	r1, r1, r5
 80060f0:	f04f 0200 	mov.w	r2, #0
 80060f4:	f04f 0300 	mov.w	r3, #0
 80060f8:	018b      	lsls	r3, r1, #6
 80060fa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80060fe:	0182      	lsls	r2, r0, #6
 8006100:	1a12      	subs	r2, r2, r0
 8006102:	eb63 0301 	sbc.w	r3, r3, r1
 8006106:	f04f 0000 	mov.w	r0, #0
 800610a:	f04f 0100 	mov.w	r1, #0
 800610e:	00d9      	lsls	r1, r3, #3
 8006110:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006114:	00d0      	lsls	r0, r2, #3
 8006116:	4602      	mov	r2, r0
 8006118:	460b      	mov	r3, r1
 800611a:	1912      	adds	r2, r2, r4
 800611c:	eb45 0303 	adc.w	r3, r5, r3
 8006120:	f04f 0000 	mov.w	r0, #0
 8006124:	f04f 0100 	mov.w	r1, #0
 8006128:	0299      	lsls	r1, r3, #10
 800612a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800612e:	0290      	lsls	r0, r2, #10
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4610      	mov	r0, r2
 8006136:	4619      	mov	r1, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	461a      	mov	r2, r3
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	f7fa f842 	bl	80001c8 <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4613      	mov	r3, r2
 800614a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800614c:	4b0b      	ldr	r3, [pc, #44]	; (800617c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	0c1b      	lsrs	r3, r3, #16
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	3301      	adds	r3, #1
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	fbb2 f3f3 	udiv	r3, r2, r3
 8006164:	60bb      	str	r3, [r7, #8]
      break;
 8006166:	e002      	b.n	800616e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006168:	4b05      	ldr	r3, [pc, #20]	; (8006180 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800616a:	60bb      	str	r3, [r7, #8]
      break;
 800616c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800616e:	68bb      	ldr	r3, [r7, #8]
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800
 8006180:	00f42400 	.word	0x00f42400
 8006184:	007a1200 	.word	0x007a1200

08006188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006188:	b480      	push	{r7}
 800618a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800618c:	4b03      	ldr	r3, [pc, #12]	; (800619c <HAL_RCC_GetHCLKFreq+0x14>)
 800618e:	681b      	ldr	r3, [r3, #0]
}
 8006190:	4618      	mov	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006198:	4770      	bx	lr
 800619a:	bf00      	nop
 800619c:	20000010 	.word	0x20000010

080061a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80061a4:	f7ff fff0 	bl	8006188 <HAL_RCC_GetHCLKFreq>
 80061a8:	4602      	mov	r2, r0
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	0a9b      	lsrs	r3, r3, #10
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	4903      	ldr	r1, [pc, #12]	; (80061c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80061b6:	5ccb      	ldrb	r3, [r1, r3]
 80061b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061bc:	4618      	mov	r0, r3
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40023800 	.word	0x40023800
 80061c4:	0800b1e8 	.word	0x0800b1e8

080061c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0301 	and.w	r3, r3, #1
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d105      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d035      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80061f0:	4b62      	ldr	r3, [pc, #392]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80061f6:	f7fc f86b 	bl	80022d0 <HAL_GetTick>
 80061fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061fc:	e008      	b.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061fe:	f7fc f867 	bl	80022d0 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e0b0      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006210:	4b5b      	ldr	r3, [pc, #364]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f0      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	019a      	lsls	r2, r3, #6
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	071b      	lsls	r3, r3, #28
 8006228:	4955      	ldr	r1, [pc, #340]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800622a:	4313      	orrs	r3, r2
 800622c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006230:	4b52      	ldr	r3, [pc, #328]	; (800637c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006236:	f7fc f84b 	bl	80022d0 <HAL_GetTick>
 800623a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800623c:	e008      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800623e:	f7fc f847 	bl	80022d0 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	2b02      	cmp	r3, #2
 800624a:	d901      	bls.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800624c:	2303      	movs	r3, #3
 800624e:	e090      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006250:	4b4b      	ldr	r3, [pc, #300]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d0f0      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 0302 	and.w	r3, r3, #2
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 8083 	beq.w	8006370 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800626a:	2300      	movs	r3, #0
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	4b44      	ldr	r3, [pc, #272]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	4a43      	ldr	r2, [pc, #268]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006278:	6413      	str	r3, [r2, #64]	; 0x40
 800627a:	4b41      	ldr	r3, [pc, #260]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006286:	4b3f      	ldr	r3, [pc, #252]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a3e      	ldr	r2, [pc, #248]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800628c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006290:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006292:	f7fc f81d 	bl	80022d0 <HAL_GetTick>
 8006296:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006298:	e008      	b.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800629a:	f7fc f819 	bl	80022d0 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e062      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80062ac:	4b35      	ldr	r3, [pc, #212]	; (8006384 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f0      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80062b8:	4b31      	ldr	r3, [pc, #196]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d02f      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d028      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80062d6:	4b2a      	ldr	r3, [pc, #168]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80062e0:	4b29      	ldr	r3, [pc, #164]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062e2:	2201      	movs	r2, #1
 80062e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80062e6:	4b28      	ldr	r3, [pc, #160]	; (8006388 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80062ec:	4a24      	ldr	r2, [pc, #144]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80062f2:	4b23      	ldr	r3, [pc, #140]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d114      	bne.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80062fe:	f7fb ffe7 	bl	80022d0 <HAL_GetTick>
 8006302:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006304:	e00a      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006306:	f7fb ffe3 	bl	80022d0 <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	f241 3288 	movw	r2, #5000	; 0x1388
 8006314:	4293      	cmp	r3, r2
 8006316:	d901      	bls.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e02a      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800631c:	4b18      	ldr	r3, [pc, #96]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800631e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d0ee      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006330:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006334:	d10d      	bne.n	8006352 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006336:	4b12      	ldr	r3, [pc, #72]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800634a:	490d      	ldr	r1, [pc, #52]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800634c:	4313      	orrs	r3, r2
 800634e:	608b      	str	r3, [r1, #8]
 8006350:	e005      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006352:	4b0b      	ldr	r3, [pc, #44]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	4a0a      	ldr	r2, [pc, #40]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006358:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800635c:	6093      	str	r3, [r2, #8]
 800635e:	4b08      	ldr	r3, [pc, #32]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006360:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800636a:	4905      	ldr	r1, [pc, #20]	; (8006380 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800636c:	4313      	orrs	r3, r2
 800636e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006370:	2300      	movs	r3, #0
}
 8006372:	4618      	mov	r0, r3
 8006374:	3718      	adds	r7, #24
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	42470068 	.word	0x42470068
 8006380:	40023800 	.word	0x40023800
 8006384:	40007000 	.word	0x40007000
 8006388:	42470e40 	.word	0x42470e40

0800638c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800638c:	b480      	push	{r7}
 800638e:	b087      	sub	sp, #28
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006398:	2300      	movs	r3, #0
 800639a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800639c:	2300      	movs	r3, #0
 800639e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80063a0:	2300      	movs	r3, #0
 80063a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d13e      	bne.n	8006428 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80063aa:	4b23      	ldr	r3, [pc, #140]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d12f      	bne.n	8006420 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80063c0:	4b1e      	ldr	r3, [pc, #120]	; (800643c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80063c2:	617b      	str	r3, [r7, #20]
          break;
 80063c4:	e02f      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80063c6:	4b1c      	ldr	r3, [pc, #112]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80063d2:	d108      	bne.n	80063e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063d4:	4b18      	ldr	r3, [pc, #96]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063dc:	4a18      	ldr	r2, [pc, #96]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80063de:	fbb2 f3f3 	udiv	r3, r2, r3
 80063e2:	613b      	str	r3, [r7, #16]
 80063e4:	e007      	b.n	80063f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80063e6:	4b14      	ldr	r3, [pc, #80]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063ee:	4a15      	ldr	r2, [pc, #84]	; (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80063f6:	4b10      	ldr	r3, [pc, #64]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80063f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063fc:	099b      	lsrs	r3, r3, #6
 80063fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	fb02 f303 	mul.w	r3, r2, r3
 8006408:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800640a:	4b0b      	ldr	r3, [pc, #44]	; (8006438 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800640c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006410:	0f1b      	lsrs	r3, r3, #28
 8006412:	f003 0307 	and.w	r3, r3, #7
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	fbb2 f3f3 	udiv	r3, r2, r3
 800641c:	617b      	str	r3, [r7, #20]
          break;
 800641e:	e002      	b.n	8006426 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006420:	2300      	movs	r3, #0
 8006422:	617b      	str	r3, [r7, #20]
          break;
 8006424:	bf00      	nop
        }
      }
      break;
 8006426:	bf00      	nop
    }
  }
  return frequency;
 8006428:	697b      	ldr	r3, [r7, #20]
}
 800642a:	4618      	mov	r0, r3
 800642c:	371c      	adds	r7, #28
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40023800 	.word	0x40023800
 800643c:	00bb8000 	.word	0x00bb8000
 8006440:	007a1200 	.word	0x007a1200
 8006444:	00f42400 	.word	0x00f42400

08006448 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e01c      	b.n	8006494 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	795b      	ldrb	r3, [r3, #5]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d105      	bne.n	8006470 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fb fc82 	bl	8001d74 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0204 	orr.w	r2, r2, #4
 8006484:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2201      	movs	r2, #1
 800648a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	791b      	ldrb	r3, [r3, #4]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_RNG_GenerateRandomNumber+0x1a>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e03d      	b.n	8006532 <HAL_RNG_GenerateRandomNumber+0x96>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2201      	movs	r2, #1
 80064ba:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	795b      	ldrb	r3, [r3, #5]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d12c      	bne.n	8006520 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2202      	movs	r2, #2
 80064ca:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064cc:	f7fb ff00 	bl	80022d0 <HAL_GetTick>
 80064d0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80064d2:	e011      	b.n	80064f8 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80064d4:	f7fb fefc 	bl	80022d0 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d90a      	bls.n	80064f8 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e01c      	b.n	8006532 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	d1e6      	bne.n	80064d4 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68da      	ldr	r2, [r3, #12]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	715a      	strb	r2, [r3, #5]
 800651e:	e004      	b.n	800652a <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2204      	movs	r2, #4
 8006524:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	711a      	strb	r2, [r3, #4]

  return status;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b082      	sub	sp, #8
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	330c      	adds	r3, #12
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff ffa7 	bl	800649c <HAL_RNG_GenerateRandomNumber>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	e000      	b.n	800655c <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 800655a:	2300      	movs	r3, #0
  }
}
 800655c:	4618      	mov	r0, r3
 800655e:	3708      	adds	r7, #8
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e07b      	b.n	800666e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	2b00      	cmp	r3, #0
 800657c:	d108      	bne.n	8006590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006586:	d009      	beq.n	800659c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	61da      	str	r2, [r3, #28]
 800658e:	e005      	b.n	800659c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80065a8:	b2db      	uxtb	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d106      	bne.n	80065bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f7fb fbfe 	bl	8001db8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80065e4:	431a      	orrs	r2, r3
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	f003 0302 	and.w	r3, r3, #2
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	f003 0301 	and.w	r3, r3, #1
 8006602:	431a      	orrs	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800660c:	431a      	orrs	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	69db      	ldr	r3, [r3, #28]
 8006612:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006620:	ea42 0103 	orr.w	r1, r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006628:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	430a      	orrs	r2, r1
 8006632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	0c1b      	lsrs	r3, r3, #16
 800663a:	f003 0104 	and.w	r1, r3, #4
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006642:	f003 0210 	and.w	r2, r3, #16
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800665c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3708      	adds	r7, #8
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b088      	sub	sp, #32
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	4613      	mov	r3, r2
 8006684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006690:	2b01      	cmp	r3, #1
 8006692:	d101      	bne.n	8006698 <HAL_SPI_Transmit+0x22>
 8006694:	2302      	movs	r3, #2
 8006696:	e126      	b.n	80068e6 <HAL_SPI_Transmit+0x270>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066a0:	f7fb fe16 	bl	80022d0 <HAL_GetTick>
 80066a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80066a6:	88fb      	ldrh	r3, [r7, #6]
 80066a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d002      	beq.n	80066bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80066b6:	2302      	movs	r3, #2
 80066b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066ba:	e10b      	b.n	80068d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_SPI_Transmit+0x52>
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d102      	bne.n	80066ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80066cc:	e102      	b.n	80068d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2203      	movs	r2, #3
 80066d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	68ba      	ldr	r2, [r7, #8]
 80066e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	88fa      	ldrh	r2, [r7, #6]
 80066e6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	88fa      	ldrh	r2, [r7, #6]
 80066ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006714:	d10f      	bne.n	8006736 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006724:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006734:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d007      	beq.n	8006754 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006752:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800675c:	d14b      	bne.n	80067f6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_SPI_Transmit+0xf6>
 8006766:	8afb      	ldrh	r3, [r7, #22]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d13e      	bne.n	80067ea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	881a      	ldrh	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677c:	1c9a      	adds	r2, r3, #2
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006790:	e02b      	b.n	80067ea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b02      	cmp	r3, #2
 800679e:	d112      	bne.n	80067c6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a4:	881a      	ldrh	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b0:	1c9a      	adds	r2, r3, #2
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	3b01      	subs	r3, #1
 80067be:	b29a      	uxth	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	86da      	strh	r2, [r3, #54]	; 0x36
 80067c4:	e011      	b.n	80067ea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067c6:	f7fb fd83 	bl	80022d0 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d803      	bhi.n	80067de <HAL_SPI_Transmit+0x168>
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067dc:	d102      	bne.n	80067e4 <HAL_SPI_Transmit+0x16e>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d102      	bne.n	80067ea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067e8:	e074      	b.n	80068d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1ce      	bne.n	8006792 <HAL_SPI_Transmit+0x11c>
 80067f4:	e04c      	b.n	8006890 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d002      	beq.n	8006804 <HAL_SPI_Transmit+0x18e>
 80067fe:	8afb      	ldrh	r3, [r7, #22]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d140      	bne.n	8006886 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	330c      	adds	r3, #12
 800680e:	7812      	ldrb	r2, [r2, #0]
 8006810:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006820:	b29b      	uxth	r3, r3
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800682a:	e02c      	b.n	8006886 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 0302 	and.w	r3, r3, #2
 8006836:	2b02      	cmp	r3, #2
 8006838:	d113      	bne.n	8006862 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	330c      	adds	r3, #12
 8006844:	7812      	ldrb	r2, [r2, #0]
 8006846:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006860:	e011      	b.n	8006886 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006862:	f7fb fd35 	bl	80022d0 <HAL_GetTick>
 8006866:	4602      	mov	r2, r0
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	683a      	ldr	r2, [r7, #0]
 800686e:	429a      	cmp	r2, r3
 8006870:	d803      	bhi.n	800687a <HAL_SPI_Transmit+0x204>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006878:	d102      	bne.n	8006880 <HAL_SPI_Transmit+0x20a>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d102      	bne.n	8006886 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006880:	2303      	movs	r3, #3
 8006882:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006884:	e026      	b.n	80068d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800688a:	b29b      	uxth	r3, r3
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1cd      	bne.n	800682c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	6839      	ldr	r1, [r7, #0]
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 f8b3 	bl	8006a00 <SPI_EndRxTxTransaction>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10a      	bne.n	80068c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80068ae:	2300      	movs	r3, #0
 80068b0:	613b      	str	r3, [r7, #16]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	613b      	str	r3, [r7, #16]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	77fb      	strb	r3, [r7, #31]
 80068d0:	e000      	b.n	80068d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80068d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80068e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006900:	f7fb fce6 	bl	80022d0 <HAL_GetTick>
 8006904:	4602      	mov	r2, r0
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	1a9b      	subs	r3, r3, r2
 800690a:	683a      	ldr	r2, [r7, #0]
 800690c:	4413      	add	r3, r2
 800690e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006910:	f7fb fcde 	bl	80022d0 <HAL_GetTick>
 8006914:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006916:	4b39      	ldr	r3, [pc, #228]	; (80069fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	015b      	lsls	r3, r3, #5
 800691c:	0d1b      	lsrs	r3, r3, #20
 800691e:	69fa      	ldr	r2, [r7, #28]
 8006920:	fb02 f303 	mul.w	r3, r2, r3
 8006924:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006926:	e054      	b.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800692e:	d050      	beq.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006930:	f7fb fcce 	bl	80022d0 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	429a      	cmp	r2, r3
 800693e:	d902      	bls.n	8006946 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006940:	69fb      	ldr	r3, [r7, #28]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d13d      	bne.n	80069c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006954:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695e:	d111      	bne.n	8006984 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006968:	d004      	beq.n	8006974 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006972:	d107      	bne.n	8006984 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681a      	ldr	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006982:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698c:	d10f      	bne.n	80069ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	681a      	ldr	r2, [r3, #0]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e017      	b.n	80069f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	3b01      	subs	r3, #1
 80069d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4013      	ands	r3, r2
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	bf0c      	ite	eq
 80069e2:	2301      	moveq	r3, #1
 80069e4:	2300      	movne	r3, #0
 80069e6:	b2db      	uxtb	r3, r3
 80069e8:	461a      	mov	r2, r3
 80069ea:	79fb      	ldrb	r3, [r7, #7]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d19b      	bne.n	8006928 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80069f0:	2300      	movs	r3, #0
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3720      	adds	r7, #32
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	20000010 	.word	0x20000010

08006a00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b088      	sub	sp, #32
 8006a04:	af02      	add	r7, sp, #8
 8006a06:	60f8      	str	r0, [r7, #12]
 8006a08:	60b9      	str	r1, [r7, #8]
 8006a0a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a0c:	4b1b      	ldr	r3, [pc, #108]	; (8006a7c <SPI_EndRxTxTransaction+0x7c>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a1b      	ldr	r2, [pc, #108]	; (8006a80 <SPI_EndRxTxTransaction+0x80>)
 8006a12:	fba2 2303 	umull	r2, r3, r2, r3
 8006a16:	0d5b      	lsrs	r3, r3, #21
 8006a18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a1c:	fb02 f303 	mul.w	r3, r2, r3
 8006a20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a2a:	d112      	bne.n	8006a52 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2200      	movs	r2, #0
 8006a34:	2180      	movs	r1, #128	; 0x80
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7ff ff5a 	bl	80068f0 <SPI_WaitFlagStateUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d016      	beq.n	8006a70 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	f043 0220 	orr.w	r2, r3, #32
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e00f      	b.n	8006a72 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	3b01      	subs	r3, #1
 8006a5c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a68:	2b80      	cmp	r3, #128	; 0x80
 8006a6a:	d0f2      	beq.n	8006a52 <SPI_EndRxTxTransaction+0x52>
 8006a6c:	e000      	b.n	8006a70 <SPI_EndRxTxTransaction+0x70>
        break;
 8006a6e:	bf00      	nop
  }

  return HAL_OK;
 8006a70:	2300      	movs	r3, #0
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20000010 	.word	0x20000010
 8006a80:	165e9f81 	.word	0x165e9f81

08006a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e041      	b.n	8006b1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fb fa6a 	bl	8001f84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4610      	mov	r0, r2
 8006ac4:	f000 fd68 	bl	8007598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3708      	adds	r7, #8
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
	...

08006b24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d001      	beq.n	8006b3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e04e      	b.n	8006bda <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a23      	ldr	r2, [pc, #140]	; (8006be8 <HAL_TIM_Base_Start_IT+0xc4>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d022      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0x80>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b66:	d01d      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0x80>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a1f      	ldr	r2, [pc, #124]	; (8006bec <HAL_TIM_Base_Start_IT+0xc8>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d018      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0x80>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a1e      	ldr	r2, [pc, #120]	; (8006bf0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d013      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0x80>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a1c      	ldr	r2, [pc, #112]	; (8006bf4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00e      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0x80>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1b      	ldr	r2, [pc, #108]	; (8006bf8 <HAL_TIM_Base_Start_IT+0xd4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0x80>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a19      	ldr	r2, [pc, #100]	; (8006bfc <HAL_TIM_Base_Start_IT+0xd8>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d004      	beq.n	8006ba4 <HAL_TIM_Base_Start_IT+0x80>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d111      	bne.n	8006bc8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2b06      	cmp	r3, #6
 8006bb4:	d010      	beq.n	8006bd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f042 0201 	orr.w	r2, r2, #1
 8006bc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc6:	e007      	b.n	8006bd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f042 0201 	orr.w	r2, r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3714      	adds	r7, #20
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	40010000 	.word	0x40010000
 8006bec:	40000400 	.word	0x40000400
 8006bf0:	40000800 	.word	0x40000800
 8006bf4:	40000c00 	.word	0x40000c00
 8006bf8:	40010400 	.word	0x40010400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40001800 	.word	0x40001800

08006c04 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d109      	bne.n	8006c28 <HAL_TIM_OC_Start_IT+0x24>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	bf14      	ite	ne
 8006c20:	2301      	movne	r3, #1
 8006c22:	2300      	moveq	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	e022      	b.n	8006c6e <HAL_TIM_OC_Start_IT+0x6a>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d109      	bne.n	8006c42 <HAL_TIM_OC_Start_IT+0x3e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	bf14      	ite	ne
 8006c3a:	2301      	movne	r3, #1
 8006c3c:	2300      	moveq	r3, #0
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	e015      	b.n	8006c6e <HAL_TIM_OC_Start_IT+0x6a>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d109      	bne.n	8006c5c <HAL_TIM_OC_Start_IT+0x58>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	bf14      	ite	ne
 8006c54:	2301      	movne	r3, #1
 8006c56:	2300      	moveq	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	e008      	b.n	8006c6e <HAL_TIM_OC_Start_IT+0x6a>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d001      	beq.n	8006c76 <HAL_TIM_OC_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e0c2      	b.n	8006dfc <HAL_TIM_OC_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d104      	bne.n	8006c86 <HAL_TIM_OC_Start_IT+0x82>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c84:	e013      	b.n	8006cae <HAL_TIM_OC_Start_IT+0xaa>
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	2b04      	cmp	r3, #4
 8006c8a:	d104      	bne.n	8006c96 <HAL_TIM_OC_Start_IT+0x92>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2202      	movs	r2, #2
 8006c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c94:	e00b      	b.n	8006cae <HAL_TIM_OC_Start_IT+0xaa>
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d104      	bne.n	8006ca6 <HAL_TIM_OC_Start_IT+0xa2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2202      	movs	r2, #2
 8006ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca4:	e003      	b.n	8006cae <HAL_TIM_OC_Start_IT+0xaa>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2202      	movs	r2, #2
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b0c      	cmp	r3, #12
 8006cb2:	d841      	bhi.n	8006d38 <HAL_TIM_OC_Start_IT+0x134>
 8006cb4:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <HAL_TIM_OC_Start_IT+0xb8>)
 8006cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cba:	bf00      	nop
 8006cbc:	08006cf1 	.word	0x08006cf1
 8006cc0:	08006d39 	.word	0x08006d39
 8006cc4:	08006d39 	.word	0x08006d39
 8006cc8:	08006d39 	.word	0x08006d39
 8006ccc:	08006d03 	.word	0x08006d03
 8006cd0:	08006d39 	.word	0x08006d39
 8006cd4:	08006d39 	.word	0x08006d39
 8006cd8:	08006d39 	.word	0x08006d39
 8006cdc:	08006d15 	.word	0x08006d15
 8006ce0:	08006d39 	.word	0x08006d39
 8006ce4:	08006d39 	.word	0x08006d39
 8006ce8:	08006d39 	.word	0x08006d39
 8006cec:	08006d27 	.word	0x08006d27
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68da      	ldr	r2, [r3, #12]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0202 	orr.w	r2, r2, #2
 8006cfe:	60da      	str	r2, [r3, #12]
      break;
 8006d00:	e01b      	b.n	8006d3a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	68da      	ldr	r2, [r3, #12]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f042 0204 	orr.w	r2, r2, #4
 8006d10:	60da      	str	r2, [r3, #12]
      break;
 8006d12:	e012      	b.n	8006d3a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	68da      	ldr	r2, [r3, #12]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0208 	orr.w	r2, r2, #8
 8006d22:	60da      	str	r2, [r3, #12]
      break;
 8006d24:	e009      	b.n	8006d3a <HAL_TIM_OC_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68da      	ldr	r2, [r3, #12]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0210 	orr.w	r2, r2, #16
 8006d34:	60da      	str	r2, [r3, #12]
      break;
 8006d36:	e000      	b.n	8006d3a <HAL_TIM_OC_Start_IT+0x136>
    }

    default:
      break;
 8006d38:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	6839      	ldr	r1, [r7, #0]
 8006d42:	4618      	mov	r0, r3
 8006d44:	f000 ff12 	bl	8007b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a2d      	ldr	r2, [pc, #180]	; (8006e04 <HAL_TIM_OC_Start_IT+0x200>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d004      	beq.n	8006d5c <HAL_TIM_OC_Start_IT+0x158>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a2c      	ldr	r2, [pc, #176]	; (8006e08 <HAL_TIM_OC_Start_IT+0x204>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIM_OC_Start_IT+0x15c>
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <HAL_TIM_OC_Start_IT+0x15e>
 8006d60:	2300      	movs	r3, #0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <HAL_TIM_OC_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a22      	ldr	r2, [pc, #136]	; (8006e04 <HAL_TIM_OC_Start_IT+0x200>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d022      	beq.n	8006dc6 <HAL_TIM_OC_Start_IT+0x1c2>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d88:	d01d      	beq.n	8006dc6 <HAL_TIM_OC_Start_IT+0x1c2>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a1f      	ldr	r2, [pc, #124]	; (8006e0c <HAL_TIM_OC_Start_IT+0x208>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d018      	beq.n	8006dc6 <HAL_TIM_OC_Start_IT+0x1c2>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a1d      	ldr	r2, [pc, #116]	; (8006e10 <HAL_TIM_OC_Start_IT+0x20c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d013      	beq.n	8006dc6 <HAL_TIM_OC_Start_IT+0x1c2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1c      	ldr	r2, [pc, #112]	; (8006e14 <HAL_TIM_OC_Start_IT+0x210>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d00e      	beq.n	8006dc6 <HAL_TIM_OC_Start_IT+0x1c2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a16      	ldr	r2, [pc, #88]	; (8006e08 <HAL_TIM_OC_Start_IT+0x204>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d009      	beq.n	8006dc6 <HAL_TIM_OC_Start_IT+0x1c2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <HAL_TIM_OC_Start_IT+0x214>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d004      	beq.n	8006dc6 <HAL_TIM_OC_Start_IT+0x1c2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a16      	ldr	r2, [pc, #88]	; (8006e1c <HAL_TIM_OC_Start_IT+0x218>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d111      	bne.n	8006dea <HAL_TIM_OC_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 0307 	and.w	r3, r3, #7
 8006dd0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2b06      	cmp	r3, #6
 8006dd6:	d010      	beq.n	8006dfa <HAL_TIM_OC_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de8:	e007      	b.n	8006dfa <HAL_TIM_OC_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0201 	orr.w	r2, r2, #1
 8006df8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	40010000 	.word	0x40010000
 8006e08:	40010400 	.word	0x40010400
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40014000 	.word	0x40014000
 8006e1c:	40001800 	.word	0x40001800

08006e20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e041      	b.n	8006eb6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d106      	bne.n	8006e4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 f839 	bl	8006ebe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	3304      	adds	r3, #4
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	4610      	mov	r0, r2
 8006e60:	f000 fb9a 	bl	8007598 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2201      	movs	r2, #1
 8006e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2201      	movs	r2, #1
 8006e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3708      	adds	r7, #8
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bd80      	pop	{r7, pc}

08006ebe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b083      	sub	sp, #12
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006ed2:	b580      	push	{r7, lr}
 8006ed4:	b086      	sub	sp, #24
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e097      	b.n	8007016 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d106      	bne.n	8006f00 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fa fffa 	bl	8001ef4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f16:	f023 0307 	bic.w	r3, r3, #7
 8006f1a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3304      	adds	r3, #4
 8006f24:	4619      	mov	r1, r3
 8006f26:	4610      	mov	r0, r2
 8006f28:	f000 fb36 	bl	8007598 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	689b      	ldr	r3, [r3, #8]
 8006f32:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	6a1b      	ldr	r3, [r3, #32]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f54:	f023 0303 	bic.w	r3, r3, #3
 8006f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	021b      	lsls	r3, r3, #8
 8006f64:	4313      	orrs	r3, r2
 8006f66:	693a      	ldr	r2, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006f72:	f023 030c 	bic.w	r3, r3, #12
 8006f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68da      	ldr	r2, [r3, #12]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	69db      	ldr	r3, [r3, #28]
 8006f8c:	021b      	lsls	r3, r3, #8
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	011a      	lsls	r2, r3, #4
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	031b      	lsls	r3, r3, #12
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	693a      	ldr	r2, [r7, #16]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006fb0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006fb8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007014:	2300      	movs	r3, #0
}
 8007016:	4618      	mov	r0, r3
 8007018:	3718      	adds	r7, #24
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}

0800701e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b082      	sub	sp, #8
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	f003 0302 	and.w	r3, r3, #2
 8007030:	2b02      	cmp	r3, #2
 8007032:	d122      	bne.n	800707a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f003 0302 	and.w	r3, r3, #2
 800703e:	2b02      	cmp	r3, #2
 8007040:	d11b      	bne.n	800707a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f06f 0202 	mvn.w	r2, #2
 800704a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	f003 0303 	and.w	r3, r3, #3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 fa7b 	bl	800755c <HAL_TIM_IC_CaptureCallback>
 8007066:	e005      	b.n	8007074 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fa6d 	bl	8007548 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 fa7e 	bl	8007570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	f003 0304 	and.w	r3, r3, #4
 8007084:	2b04      	cmp	r3, #4
 8007086:	d122      	bne.n	80070ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f003 0304 	and.w	r3, r3, #4
 8007092:	2b04      	cmp	r3, #4
 8007094:	d11b      	bne.n	80070ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f06f 0204 	mvn.w	r2, #4
 800709e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fa51 	bl	800755c <HAL_TIM_IC_CaptureCallback>
 80070ba:	e005      	b.n	80070c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fa43 	bl	8007548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fa54 	bl	8007570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f003 0308 	and.w	r3, r3, #8
 80070d8:	2b08      	cmp	r3, #8
 80070da:	d122      	bne.n	8007122 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	f003 0308 	and.w	r3, r3, #8
 80070e6:	2b08      	cmp	r3, #8
 80070e8:	d11b      	bne.n	8007122 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f06f 0208 	mvn.w	r2, #8
 80070f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2204      	movs	r2, #4
 80070f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	f003 0303 	and.w	r3, r3, #3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d003      	beq.n	8007110 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fa27 	bl	800755c <HAL_TIM_IC_CaptureCallback>
 800710e:	e005      	b.n	800711c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa19 	bl	8007548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 fa2a 	bl	8007570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b10      	cmp	r3, #16
 800712e:	d122      	bne.n	8007176 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0310 	and.w	r3, r3, #16
 800713a:	2b10      	cmp	r3, #16
 800713c:	d11b      	bne.n	8007176 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f06f 0210 	mvn.w	r2, #16
 8007146:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2208      	movs	r2, #8
 800714c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	69db      	ldr	r3, [r3, #28]
 8007154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007158:	2b00      	cmp	r3, #0
 800715a:	d003      	beq.n	8007164 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f9fd 	bl	800755c <HAL_TIM_IC_CaptureCallback>
 8007162:	e005      	b.n	8007170 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f9ef 	bl	8007548 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fa00 	bl	8007570 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	691b      	ldr	r3, [r3, #16]
 800717c:	f003 0301 	and.w	r3, r3, #1
 8007180:	2b01      	cmp	r3, #1
 8007182:	d10e      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b01      	cmp	r3, #1
 8007190:	d107      	bne.n	80071a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f06f 0201 	mvn.w	r2, #1
 800719a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f9c9 	bl	8007534 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ac:	2b80      	cmp	r3, #128	; 0x80
 80071ae:	d10e      	bne.n	80071ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68db      	ldr	r3, [r3, #12]
 80071b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ba:	2b80      	cmp	r3, #128	; 0x80
 80071bc:	d107      	bne.n	80071ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80071c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f000 fd7b 	bl	8007cc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	691b      	ldr	r3, [r3, #16]
 80071d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071d8:	2b40      	cmp	r3, #64	; 0x40
 80071da:	d10e      	bne.n	80071fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e6:	2b40      	cmp	r3, #64	; 0x40
 80071e8:	d107      	bne.n	80071fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 f9c5 	bl	8007584 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	f003 0320 	and.w	r3, r3, #32
 8007204:	2b20      	cmp	r3, #32
 8007206:	d10e      	bne.n	8007226 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b20      	cmp	r3, #32
 8007214:	d107      	bne.n	8007226 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f06f 0220 	mvn.w	r2, #32
 800721e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fd45 	bl	8007cb0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007226:	bf00      	nop
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
	...

08007230 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007246:	2302      	movs	r3, #2
 8007248:	e0ac      	b.n	80073a4 <HAL_TIM_PWM_ConfigChannel+0x174>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2b0c      	cmp	r3, #12
 8007256:	f200 809f 	bhi.w	8007398 <HAL_TIM_PWM_ConfigChannel+0x168>
 800725a:	a201      	add	r2, pc, #4	; (adr r2, 8007260 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800725c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007260:	08007295 	.word	0x08007295
 8007264:	08007399 	.word	0x08007399
 8007268:	08007399 	.word	0x08007399
 800726c:	08007399 	.word	0x08007399
 8007270:	080072d5 	.word	0x080072d5
 8007274:	08007399 	.word	0x08007399
 8007278:	08007399 	.word	0x08007399
 800727c:	08007399 	.word	0x08007399
 8007280:	08007317 	.word	0x08007317
 8007284:	08007399 	.word	0x08007399
 8007288:	08007399 	.word	0x08007399
 800728c:	08007399 	.word	0x08007399
 8007290:	08007357 	.word	0x08007357
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68b9      	ldr	r1, [r7, #8]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fa1c 	bl	80076d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f042 0208 	orr.w	r2, r2, #8
 80072ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f022 0204 	bic.w	r2, r2, #4
 80072be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	6999      	ldr	r1, [r3, #24]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	691a      	ldr	r2, [r3, #16]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	430a      	orrs	r2, r1
 80072d0:	619a      	str	r2, [r3, #24]
      break;
 80072d2:	e062      	b.n	800739a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	4618      	mov	r0, r3
 80072dc:	f000 fa6c 	bl	80077b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80072ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	699a      	ldr	r2, [r3, #24]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6999      	ldr	r1, [r3, #24]
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	021a      	lsls	r2, r3, #8
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	619a      	str	r2, [r3, #24]
      break;
 8007314:	e041      	b.n	800739a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	4618      	mov	r0, r3
 800731e:	f000 fac1 	bl	80078a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	69da      	ldr	r2, [r3, #28]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f042 0208 	orr.w	r2, r2, #8
 8007330:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69da      	ldr	r2, [r3, #28]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0204 	bic.w	r2, r2, #4
 8007340:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	69d9      	ldr	r1, [r3, #28]
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	691a      	ldr	r2, [r3, #16]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	430a      	orrs	r2, r1
 8007352:	61da      	str	r2, [r3, #28]
      break;
 8007354:	e021      	b.n	800739a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68b9      	ldr	r1, [r7, #8]
 800735c:	4618      	mov	r0, r3
 800735e:	f000 fb15 	bl	800798c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	69da      	ldr	r2, [r3, #28]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69da      	ldr	r2, [r3, #28]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	69d9      	ldr	r1, [r3, #28]
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	691b      	ldr	r3, [r3, #16]
 800738c:	021a      	lsls	r2, r3, #8
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	61da      	str	r2, [r3, #28]
      break;
 8007396:	e000      	b.n	800739a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007398:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3710      	adds	r7, #16
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_TIM_ConfigClockSource+0x18>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e0b3      	b.n	800752c <HAL_TIM_ConfigClockSource+0x180>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2202      	movs	r2, #2
 80073d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80073e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80073ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073fc:	d03e      	beq.n	800747c <HAL_TIM_ConfigClockSource+0xd0>
 80073fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007402:	f200 8087 	bhi.w	8007514 <HAL_TIM_ConfigClockSource+0x168>
 8007406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800740a:	f000 8085 	beq.w	8007518 <HAL_TIM_ConfigClockSource+0x16c>
 800740e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007412:	d87f      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x168>
 8007414:	2b70      	cmp	r3, #112	; 0x70
 8007416:	d01a      	beq.n	800744e <HAL_TIM_ConfigClockSource+0xa2>
 8007418:	2b70      	cmp	r3, #112	; 0x70
 800741a:	d87b      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x168>
 800741c:	2b60      	cmp	r3, #96	; 0x60
 800741e:	d050      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0x116>
 8007420:	2b60      	cmp	r3, #96	; 0x60
 8007422:	d877      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x168>
 8007424:	2b50      	cmp	r3, #80	; 0x50
 8007426:	d03c      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0xf6>
 8007428:	2b50      	cmp	r3, #80	; 0x50
 800742a:	d873      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x168>
 800742c:	2b40      	cmp	r3, #64	; 0x40
 800742e:	d058      	beq.n	80074e2 <HAL_TIM_ConfigClockSource+0x136>
 8007430:	2b40      	cmp	r3, #64	; 0x40
 8007432:	d86f      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x168>
 8007434:	2b30      	cmp	r3, #48	; 0x30
 8007436:	d064      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x156>
 8007438:	2b30      	cmp	r3, #48	; 0x30
 800743a:	d86b      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x168>
 800743c:	2b20      	cmp	r3, #32
 800743e:	d060      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x156>
 8007440:	2b20      	cmp	r3, #32
 8007442:	d867      	bhi.n	8007514 <HAL_TIM_ConfigClockSource+0x168>
 8007444:	2b00      	cmp	r3, #0
 8007446:	d05c      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x156>
 8007448:	2b10      	cmp	r3, #16
 800744a:	d05a      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800744c:	e062      	b.n	8007514 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6818      	ldr	r0, [r3, #0]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	6899      	ldr	r1, [r3, #8]
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	f000 fb65 	bl	8007b2c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007470:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	609a      	str	r2, [r3, #8]
      break;
 800747a:	e04e      	b.n	800751a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6818      	ldr	r0, [r3, #0]
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	6899      	ldr	r1, [r3, #8]
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	f000 fb4e 	bl	8007b2c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	689a      	ldr	r2, [r3, #8]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800749e:	609a      	str	r2, [r3, #8]
      break;
 80074a0:	e03b      	b.n	800751a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	6859      	ldr	r1, [r3, #4]
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	461a      	mov	r2, r3
 80074b0:	f000 fac2 	bl	8007a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2150      	movs	r1, #80	; 0x50
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 fb1b 	bl	8007af6 <TIM_ITRx_SetConfig>
      break;
 80074c0:	e02b      	b.n	800751a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	6859      	ldr	r1, [r3, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f000 fae1 	bl	8007a96 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2160      	movs	r1, #96	; 0x60
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 fb0b 	bl	8007af6 <TIM_ITRx_SetConfig>
      break;
 80074e0:	e01b      	b.n	800751a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6859      	ldr	r1, [r3, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f000 faa2 	bl	8007a38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2140      	movs	r1, #64	; 0x40
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 fafb 	bl	8007af6 <TIM_ITRx_SetConfig>
      break;
 8007500:	e00b      	b.n	800751a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4619      	mov	r1, r3
 800750c:	4610      	mov	r0, r2
 800750e:	f000 faf2 	bl	8007af6 <TIM_ITRx_SetConfig>
        break;
 8007512:	e002      	b.n	800751a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007518:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a40      	ldr	r2, [pc, #256]	; (80076ac <TIM_Base_SetConfig+0x114>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d013      	beq.n	80075d8 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075b6:	d00f      	beq.n	80075d8 <TIM_Base_SetConfig+0x40>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a3d      	ldr	r2, [pc, #244]	; (80076b0 <TIM_Base_SetConfig+0x118>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d00b      	beq.n	80075d8 <TIM_Base_SetConfig+0x40>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a3c      	ldr	r2, [pc, #240]	; (80076b4 <TIM_Base_SetConfig+0x11c>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d007      	beq.n	80075d8 <TIM_Base_SetConfig+0x40>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a3b      	ldr	r2, [pc, #236]	; (80076b8 <TIM_Base_SetConfig+0x120>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d003      	beq.n	80075d8 <TIM_Base_SetConfig+0x40>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a3a      	ldr	r2, [pc, #232]	; (80076bc <TIM_Base_SetConfig+0x124>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d108      	bne.n	80075ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a2f      	ldr	r2, [pc, #188]	; (80076ac <TIM_Base_SetConfig+0x114>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d02b      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075f8:	d027      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a2c      	ldr	r2, [pc, #176]	; (80076b0 <TIM_Base_SetConfig+0x118>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d023      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a2b      	ldr	r2, [pc, #172]	; (80076b4 <TIM_Base_SetConfig+0x11c>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d01f      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a2a      	ldr	r2, [pc, #168]	; (80076b8 <TIM_Base_SetConfig+0x120>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01b      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a29      	ldr	r2, [pc, #164]	; (80076bc <TIM_Base_SetConfig+0x124>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d017      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a28      	ldr	r2, [pc, #160]	; (80076c0 <TIM_Base_SetConfig+0x128>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d013      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a27      	ldr	r2, [pc, #156]	; (80076c4 <TIM_Base_SetConfig+0x12c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d00f      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a26      	ldr	r2, [pc, #152]	; (80076c8 <TIM_Base_SetConfig+0x130>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00b      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a25      	ldr	r2, [pc, #148]	; (80076cc <TIM_Base_SetConfig+0x134>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d007      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a24      	ldr	r2, [pc, #144]	; (80076d0 <TIM_Base_SetConfig+0x138>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d003      	beq.n	800764a <TIM_Base_SetConfig+0xb2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a23      	ldr	r2, [pc, #140]	; (80076d4 <TIM_Base_SetConfig+0x13c>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d108      	bne.n	800765c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	68fa      	ldr	r2, [r7, #12]
 8007658:	4313      	orrs	r3, r2
 800765a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	4313      	orrs	r3, r2
 8007668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	68fa      	ldr	r2, [r7, #12]
 800766e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a0a      	ldr	r2, [pc, #40]	; (80076ac <TIM_Base_SetConfig+0x114>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d003      	beq.n	8007690 <TIM_Base_SetConfig+0xf8>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <TIM_Base_SetConfig+0x124>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d103      	bne.n	8007698 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	615a      	str	r2, [r3, #20]
}
 800769e:	bf00      	nop
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010000 	.word	0x40010000
 80076b0:	40000400 	.word	0x40000400
 80076b4:	40000800 	.word	0x40000800
 80076b8:	40000c00 	.word	0x40000c00
 80076bc:	40010400 	.word	0x40010400
 80076c0:	40014000 	.word	0x40014000
 80076c4:	40014400 	.word	0x40014400
 80076c8:	40014800 	.word	0x40014800
 80076cc:	40001800 	.word	0x40001800
 80076d0:	40001c00 	.word	0x40001c00
 80076d4:	40002000 	.word	0x40002000

080076d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076d8:	b480      	push	{r7}
 80076da:	b087      	sub	sp, #28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f023 0201 	bic.w	r2, r3, #1
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f023 0303 	bic.w	r3, r3, #3
 800770e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4313      	orrs	r3, r2
 8007718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800771a:	697b      	ldr	r3, [r7, #20]
 800771c:	f023 0302 	bic.w	r3, r3, #2
 8007720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	4313      	orrs	r3, r2
 800772a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	4a20      	ldr	r2, [pc, #128]	; (80077b0 <TIM_OC1_SetConfig+0xd8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d003      	beq.n	800773c <TIM_OC1_SetConfig+0x64>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a1f      	ldr	r2, [pc, #124]	; (80077b4 <TIM_OC1_SetConfig+0xdc>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d10c      	bne.n	8007756 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f023 0308 	bic.w	r3, r3, #8
 8007742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	68db      	ldr	r3, [r3, #12]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	f023 0304 	bic.w	r3, r3, #4
 8007754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a15      	ldr	r2, [pc, #84]	; (80077b0 <TIM_OC1_SetConfig+0xd8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d003      	beq.n	8007766 <TIM_OC1_SetConfig+0x8e>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a14      	ldr	r2, [pc, #80]	; (80077b4 <TIM_OC1_SetConfig+0xdc>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d111      	bne.n	800778a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800776c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	4313      	orrs	r3, r2
 800777e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	699b      	ldr	r3, [r3, #24]
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	4313      	orrs	r3, r2
 8007788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	685a      	ldr	r2, [r3, #4]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	697a      	ldr	r2, [r7, #20]
 80077a2:	621a      	str	r2, [r3, #32]
}
 80077a4:	bf00      	nop
 80077a6:	371c      	adds	r7, #28
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr
 80077b0:	40010000 	.word	0x40010000
 80077b4:	40010400 	.word	0x40010400

080077b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a1b      	ldr	r3, [r3, #32]
 80077c6:	f023 0210 	bic.w	r2, r3, #16
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a1b      	ldr	r3, [r3, #32]
 80077d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f023 0320 	bic.w	r3, r3, #32
 8007802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	011b      	lsls	r3, r3, #4
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	4313      	orrs	r3, r2
 800780e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a22      	ldr	r2, [pc, #136]	; (800789c <TIM_OC2_SetConfig+0xe4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d003      	beq.n	8007820 <TIM_OC2_SetConfig+0x68>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a21      	ldr	r2, [pc, #132]	; (80078a0 <TIM_OC2_SetConfig+0xe8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d10d      	bne.n	800783c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800783a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a17      	ldr	r2, [pc, #92]	; (800789c <TIM_OC2_SetConfig+0xe4>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_OC2_SetConfig+0x94>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a16      	ldr	r2, [pc, #88]	; (80078a0 <TIM_OC2_SetConfig+0xe8>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d113      	bne.n	8007874 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007852:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800785a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	695b      	ldr	r3, [r3, #20]
 8007860:	009b      	lsls	r3, r3, #2
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	4313      	orrs	r3, r2
 8007872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	685a      	ldr	r2, [r3, #4]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	621a      	str	r2, [r3, #32]
}
 800788e:	bf00      	nop
 8007890:	371c      	adds	r7, #28
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	40010000 	.word	0x40010000
 80078a0:	40010400 	.word	0x40010400

080078a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 0303 	bic.w	r3, r3, #3
 80078da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80078ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a21      	ldr	r2, [pc, #132]	; (8007984 <TIM_OC3_SetConfig+0xe0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d003      	beq.n	800790a <TIM_OC3_SetConfig+0x66>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a20      	ldr	r2, [pc, #128]	; (8007988 <TIM_OC3_SetConfig+0xe4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d10d      	bne.n	8007926 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	021b      	lsls	r3, r3, #8
 8007918:	697a      	ldr	r2, [r7, #20]
 800791a:	4313      	orrs	r3, r2
 800791c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4a16      	ldr	r2, [pc, #88]	; (8007984 <TIM_OC3_SetConfig+0xe0>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d003      	beq.n	8007936 <TIM_OC3_SetConfig+0x92>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a15      	ldr	r2, [pc, #84]	; (8007988 <TIM_OC3_SetConfig+0xe4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d113      	bne.n	800795e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800793c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800793e:	693b      	ldr	r3, [r7, #16]
 8007940:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	695b      	ldr	r3, [r3, #20]
 800794a:	011b      	lsls	r3, r3, #4
 800794c:	693a      	ldr	r2, [r7, #16]
 800794e:	4313      	orrs	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	011b      	lsls	r3, r3, #4
 8007958:	693a      	ldr	r2, [r7, #16]
 800795a:	4313      	orrs	r3, r2
 800795c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	697a      	ldr	r2, [r7, #20]
 8007976:	621a      	str	r2, [r3, #32]
}
 8007978:	bf00      	nop
 800797a:	371c      	adds	r7, #28
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	40010000 	.word	0x40010000
 8007988:	40010400 	.word	0x40010400

0800798c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800798c:	b480      	push	{r7}
 800798e:	b087      	sub	sp, #28
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	69db      	ldr	r3, [r3, #28]
 80079b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	021b      	lsls	r3, r3, #8
 80079ca:	68fa      	ldr	r2, [r7, #12]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80079d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	031b      	lsls	r3, r3, #12
 80079de:	693a      	ldr	r2, [r7, #16]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a12      	ldr	r2, [pc, #72]	; (8007a30 <TIM_OC4_SetConfig+0xa4>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_OC4_SetConfig+0x68>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a11      	ldr	r2, [pc, #68]	; (8007a34 <TIM_OC4_SetConfig+0xa8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d109      	bne.n	8007a08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	019b      	lsls	r3, r3, #6
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	697a      	ldr	r2, [r7, #20]
 8007a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	621a      	str	r2, [r3, #32]
}
 8007a22:	bf00      	nop
 8007a24:	371c      	adds	r7, #28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	40010000 	.word	0x40010000
 8007a34:	40010400 	.word	0x40010400

08007a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b087      	sub	sp, #28
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6a1b      	ldr	r3, [r3, #32]
 8007a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	f023 0201 	bic.w	r2, r3, #1
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	699b      	ldr	r3, [r3, #24]
 8007a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	f023 030a 	bic.w	r3, r3, #10
 8007a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a76:	697a      	ldr	r2, [r7, #20]
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	621a      	str	r2, [r3, #32]
}
 8007a8a:	bf00      	nop
 8007a8c:	371c      	adds	r7, #28
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b087      	sub	sp, #28
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	60f8      	str	r0, [r7, #12]
 8007a9e:	60b9      	str	r1, [r7, #8]
 8007aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a1b      	ldr	r3, [r3, #32]
 8007aa6:	f023 0210 	bic.w	r2, r3, #16
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	699b      	ldr	r3, [r3, #24]
 8007ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	031b      	lsls	r3, r3, #12
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	4313      	orrs	r3, r2
 8007adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	697a      	ldr	r2, [r7, #20]
 8007ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	621a      	str	r2, [r3, #32]
}
 8007aea:	bf00      	nop
 8007aec:	371c      	adds	r7, #28
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b085      	sub	sp, #20
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	f043 0307 	orr.w	r3, r3, #7
 8007b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	68fa      	ldr	r2, [r7, #12]
 8007b1e:	609a      	str	r2, [r3, #8]
}
 8007b20:	bf00      	nop
 8007b22:	3714      	adds	r7, #20
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b087      	sub	sp, #28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	021a      	lsls	r2, r3, #8
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	4313      	orrs	r3, r2
 8007b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	697a      	ldr	r2, [r7, #20]
 8007b5e:	609a      	str	r2, [r3, #8]
}
 8007b60:	bf00      	nop
 8007b62:	371c      	adds	r7, #28
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	f003 031f 	and.w	r3, r3, #31
 8007b7e:	2201      	movs	r2, #1
 8007b80:	fa02 f303 	lsl.w	r3, r2, r3
 8007b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	6a1a      	ldr	r2, [r3, #32]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	43db      	mvns	r3, r3
 8007b8e:	401a      	ands	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6a1a      	ldr	r2, [r3, #32]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f003 031f 	and.w	r3, r3, #31
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	621a      	str	r2, [r3, #32]
}
 8007baa:	bf00      	nop
 8007bac:	371c      	adds	r7, #28
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
	...

08007bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
 8007bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e05a      	b.n	8007c86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	4a21      	ldr	r2, [pc, #132]	; (8007c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d022      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c1c:	d01d      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a1d      	ldr	r2, [pc, #116]	; (8007c98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d018      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a1b      	ldr	r2, [pc, #108]	; (8007c9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d013      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4a1a      	ldr	r2, [pc, #104]	; (8007ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d00e      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a18      	ldr	r2, [pc, #96]	; (8007ca4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d009      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a17      	ldr	r2, [pc, #92]	; (8007ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d004      	beq.n	8007c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a15      	ldr	r2, [pc, #84]	; (8007cac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d10c      	bne.n	8007c74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3714      	adds	r7, #20
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr
 8007c92:	bf00      	nop
 8007c94:	40010000 	.word	0x40010000
 8007c98:	40000400 	.word	0x40000400
 8007c9c:	40000800 	.word	0x40000800
 8007ca0:	40000c00 	.word	0x40000c00
 8007ca4:	40010400 	.word	0x40010400
 8007ca8:	40014000 	.word	0x40014000
 8007cac:	40001800 	.word	0x40001800

08007cb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007cd8:	b084      	sub	sp, #16
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	f107 001c 	add.w	r0, r7, #28
 8007ce6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d122      	bne.n	8007d36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d105      	bne.n	8007d2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f94a 	bl	8007fc4 <USB_CoreReset>
 8007d30:	4603      	mov	r3, r0
 8007d32:	73fb      	strb	r3, [r7, #15]
 8007d34:	e01a      	b.n	8007d6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 f93e 	bl	8007fc4 <USB_CoreReset>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38
 8007d5e:	e005      	b.n	8007d6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d10b      	bne.n	8007d8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	f043 0206 	orr.w	r2, r3, #6
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	689b      	ldr	r3, [r3, #8]
 8007d82:	f043 0220 	orr.w	r2, r3, #32
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d96:	b004      	add	sp, #16
 8007d98:	4770      	bx	lr

08007d9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d9a:	b480      	push	{r7}
 8007d9c:	b083      	sub	sp, #12
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f043 0201 	orr.w	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f023 0201 	bic.w	r2, r3, #1
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	460b      	mov	r3, r1
 8007de8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007df6:	78fb      	ldrb	r3, [r7, #3]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d106      	bne.n	8007e0a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	60da      	str	r2, [r3, #12]
 8007e08:	e00b      	b.n	8007e22 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8007e0a:	78fb      	ldrb	r3, [r7, #3]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d106      	bne.n	8007e1e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	68db      	ldr	r3, [r3, #12]
 8007e14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	60da      	str	r2, [r3, #12]
 8007e1c:	e001      	b.n	8007e22 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e003      	b.n	8007e2a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8007e22:	2032      	movs	r0, #50	; 0x32
 8007e24:	f7fa fa60 	bl	80022e8 <HAL_Delay>

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b085      	sub	sp, #20
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	019b      	lsls	r3, r3, #6
 8007e46:	f043 0220 	orr.w	r2, r3, #32
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3301      	adds	r3, #1
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <USB_FlushTxFifo+0x48>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d901      	bls.n	8007e60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007e5c:	2303      	movs	r3, #3
 8007e5e:	e006      	b.n	8007e6e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	691b      	ldr	r3, [r3, #16]
 8007e64:	f003 0320 	and.w	r3, r3, #32
 8007e68:	2b20      	cmp	r3, #32
 8007e6a:	d0f0      	beq.n	8007e4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	00030d40 	.word	0x00030d40

08007e80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2210      	movs	r2, #16
 8007e90:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3301      	adds	r3, #1
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	4a09      	ldr	r2, [pc, #36]	; (8007ec0 <USB_FlushRxFifo+0x40>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d901      	bls.n	8007ea4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	e006      	b.n	8007eb2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	691b      	ldr	r3, [r3, #16]
 8007ea8:	f003 0310 	and.w	r3, r3, #16
 8007eac:	2b10      	cmp	r3, #16
 8007eae:	d0f0      	beq.n	8007e92 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	00030d40 	.word	0x00030d40

08007ec4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b089      	sub	sp, #36	; 0x24
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4611      	mov	r1, r2
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	71fb      	strb	r3, [r7, #7]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007ede:	68bb      	ldr	r3, [r7, #8]
 8007ee0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007ee2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d11a      	bne.n	8007f20 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007eea:	88bb      	ldrh	r3, [r7, #4]
 8007eec:	3303      	adds	r3, #3
 8007eee:	089b      	lsrs	r3, r3, #2
 8007ef0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	e00f      	b.n	8007f18 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	031a      	lsls	r2, r3, #12
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f04:	461a      	mov	r2, r3
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	3304      	adds	r3, #4
 8007f10:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	3301      	adds	r3, #1
 8007f16:	61bb      	str	r3, [r7, #24]
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	693b      	ldr	r3, [r7, #16]
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d3eb      	bcc.n	8007ef8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007f20:	2300      	movs	r3, #0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3724      	adds	r7, #36	; 0x24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr

08007f2e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007f2e:	b480      	push	{r7}
 8007f30:	b089      	sub	sp, #36	; 0x24
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	60f8      	str	r0, [r7, #12]
 8007f36:	60b9      	str	r1, [r7, #8]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007f44:	88fb      	ldrh	r3, [r7, #6]
 8007f46:	3303      	adds	r3, #3
 8007f48:	089b      	lsrs	r3, r3, #2
 8007f4a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	e00b      	b.n	8007f6a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	601a      	str	r2, [r3, #0]
    pDest++;
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	3304      	adds	r3, #4
 8007f62:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	3301      	adds	r3, #1
 8007f68:	61bb      	str	r3, [r7, #24]
 8007f6a:	69ba      	ldr	r2, [r7, #24]
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d3ef      	bcc.n	8007f52 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007f72:	69fb      	ldr	r3, [r7, #28]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3724      	adds	r7, #36	; 0x24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	695b      	ldr	r3, [r3, #20]
 8007f8c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	4013      	ands	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007f98:	68fb      	ldr	r3, [r7, #12]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3714      	adds	r7, #20
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa4:	4770      	bx	lr

08007fa6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	695b      	ldr	r3, [r3, #20]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
}
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4a13      	ldr	r2, [pc, #76]	; (8008028 <USB_CoreReset+0x64>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d901      	bls.n	8007fe2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e01b      	b.n	800801a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	daf2      	bge.n	8007fd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	691b      	ldr	r3, [r3, #16]
 8007ff2:	f043 0201 	orr.w	r2, r3, #1
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	4a09      	ldr	r2, [pc, #36]	; (8008028 <USB_CoreReset+0x64>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d901      	bls.n	800800c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008008:	2303      	movs	r3, #3
 800800a:	e006      	b.n	800801a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	f003 0301 	and.w	r3, r3, #1
 8008014:	2b01      	cmp	r3, #1
 8008016:	d0f0      	beq.n	8007ffa <USB_CoreReset+0x36>

  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	00030d40 	.word	0x00030d40

0800802c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800802c:	b084      	sub	sp, #16
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	f107 001c 	add.w	r0, r7, #28
 800803a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008048:	461a      	mov	r2, r3
 800804a:	2300      	movs	r3, #0
 800804c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008052:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800807a:	2b00      	cmp	r3, #0
 800807c:	d018      	beq.n	80080b0 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	2b01      	cmp	r3, #1
 8008082:	d10a      	bne.n	800809a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	68ba      	ldr	r2, [r7, #8]
 800808e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008092:	f043 0304 	orr.w	r3, r3, #4
 8008096:	6013      	str	r3, [r2, #0]
 8008098:	e014      	b.n	80080c4 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080a8:	f023 0304 	bic.w	r3, r3, #4
 80080ac:	6013      	str	r3, [r2, #0]
 80080ae:	e009      	b.n	80080c4 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68ba      	ldr	r2, [r7, #8]
 80080ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80080be:	f023 0304 	bic.w	r3, r3, #4
 80080c2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80080c4:	2110      	movs	r1, #16
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff feb4 	bl	8007e34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff fed7 	bl	8007e80 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
 80080d6:	e015      	b.n	8008104 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080e4:	461a      	mov	r2, r3
 80080e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80080ea:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	015a      	lsls	r2, r3, #5
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80080f8:	461a      	mov	r2, r3
 80080fa:	2300      	movs	r3, #0
 80080fc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3301      	adds	r3, #1
 8008102:	60fb      	str	r3, [r7, #12]
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	429a      	cmp	r2, r3
 800810a:	d3e5      	bcc.n	80080d8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800810c:	2101      	movs	r1, #1
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f000 f8ac 	bl	800826c <USB_DriveVbus>

  HAL_Delay(200U);
 8008114:	20c8      	movs	r0, #200	; 0xc8
 8008116:	f7fa f8e7 	bl	80022e8 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008126:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800812c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f44f 7200 	mov.w	r2, #512	; 0x200
 800813a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	4a14      	ldr	r2, [pc, #80]	; (8008190 <USB_HostInit+0x164>)
 8008140:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	4a13      	ldr	r2, [pc, #76]	; (8008194 <USB_HostInit+0x168>)
 8008146:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800814a:	e009      	b.n	8008160 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2280      	movs	r2, #128	; 0x80
 8008150:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a10      	ldr	r2, [pc, #64]	; (8008198 <USB_HostInit+0x16c>)
 8008156:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a10      	ldr	r2, [pc, #64]	; (800819c <USB_HostInit+0x170>)
 800815c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	699b      	ldr	r3, [r3, #24]
 800816a:	f043 0210 	orr.w	r2, r3, #16
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	699a      	ldr	r2, [r3, #24]
 8008176:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <USB_HostInit+0x174>)
 8008178:	4313      	orrs	r3, r2
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800818a:	b004      	add	sp, #16
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	01000200 	.word	0x01000200
 8008194:	00e00300 	.word	0x00e00300
 8008198:	00600080 	.word	0x00600080
 800819c:	004000e0 	.word	0x004000e0
 80081a0:	a3200008 	.word	0xa3200008

080081a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80081c2:	f023 0303 	bic.w	r3, r3, #3
 80081c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	f003 0303 	and.w	r3, r3, #3
 80081d6:	68f9      	ldr	r1, [r7, #12]
 80081d8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80081dc:	4313      	orrs	r3, r2
 80081de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80081e0:	78fb      	ldrb	r3, [r7, #3]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d107      	bne.n	80081f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80081ec:	461a      	mov	r2, r3
 80081ee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80081f2:	6053      	str	r3, [r2, #4]
 80081f4:	e009      	b.n	800820a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80081f6:	78fb      	ldrb	r3, [r7, #3]
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d106      	bne.n	800820a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008202:	461a      	mov	r2, r3
 8008204:	f241 7370 	movw	r3, #6000	; 0x1770
 8008208:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800820a:	2300      	movs	r3, #0
}
 800820c:	4618      	mov	r0, r3
 800820e:	3714      	adds	r7, #20
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008238:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008246:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008248:	2064      	movs	r0, #100	; 0x64
 800824a:	f7fa f84d 	bl	80022e8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8008256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800825a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800825c:	200a      	movs	r0, #10
 800825e:	f7fa f843 	bl	80022e8 <HAL_Delay>

  return HAL_OK;
 8008262:	2300      	movs	r3, #0
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	460b      	mov	r3, r1
 8008276:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008290:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008298:	2b00      	cmp	r3, #0
 800829a:	d109      	bne.n	80082b0 <USB_DriveVbus+0x44>
 800829c:	78fb      	ldrb	r3, [r7, #3]
 800829e:	2b01      	cmp	r3, #1
 80082a0:	d106      	bne.n	80082b0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80082ae:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082ba:	d109      	bne.n	80082d0 <USB_DriveVbus+0x64>
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d106      	bne.n	80082d0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80082ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082ce:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3714      	adds	r7, #20
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80082de:	b480      	push	{r7}
 80082e0:	b085      	sub	sp, #20
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80082ea:	2300      	movs	r3, #0
 80082ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	0c5b      	lsrs	r3, r3, #17
 80082fc:	f003 0303 	and.w	r3, r3, #3
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800830c:	b480      	push	{r7}
 800830e:	b085      	sub	sp, #20
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	b29b      	uxth	r3, r3
}
 8008322:	4618      	mov	r0, r3
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
	...

08008330 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b088      	sub	sp, #32
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	4608      	mov	r0, r1
 800833a:	4611      	mov	r1, r2
 800833c:	461a      	mov	r2, r3
 800833e:	4603      	mov	r3, r0
 8008340:	70fb      	strb	r3, [r7, #3]
 8008342:	460b      	mov	r3, r1
 8008344:	70bb      	strb	r3, [r7, #2]
 8008346:	4613      	mov	r3, r2
 8008348:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir, HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	015a      	lsls	r2, r3, #5
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	4413      	add	r3, r2
 800835a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800835e:	461a      	mov	r2, r3
 8008360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008364:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008366:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800836a:	2b03      	cmp	r3, #3
 800836c:	d87e      	bhi.n	800846c <USB_HC_Init+0x13c>
 800836e:	a201      	add	r2, pc, #4	; (adr r2, 8008374 <USB_HC_Init+0x44>)
 8008370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008374:	08008385 	.word	0x08008385
 8008378:	0800842f 	.word	0x0800842f
 800837c:	08008385 	.word	0x08008385
 8008380:	080083f1 	.word	0x080083f1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008384:	78fb      	ldrb	r3, [r7, #3]
 8008386:	015a      	lsls	r2, r3, #5
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	4413      	add	r3, r2
 800838c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008390:	461a      	mov	r2, r3
 8008392:	f240 439d 	movw	r3, #1181	; 0x49d
 8008396:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008398:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800839c:	2b00      	cmp	r3, #0
 800839e:	da10      	bge.n	80083c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80083a0:	78fb      	ldrb	r3, [r7, #3]
 80083a2:	015a      	lsls	r2, r3, #5
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	4413      	add	r3, r2
 80083a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	0151      	lsls	r1, r2, #5
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	440a      	add	r2, r1
 80083b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083be:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80083c0:	e057      	b.n	8008472 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d051      	beq.n	8008472 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80083ce:	78fb      	ldrb	r3, [r7, #3]
 80083d0:	015a      	lsls	r2, r3, #5
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	4413      	add	r3, r2
 80083d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	78fa      	ldrb	r2, [r7, #3]
 80083de:	0151      	lsls	r1, r2, #5
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	440a      	add	r2, r1
 80083e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80083e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80083ec:	60d3      	str	r3, [r2, #12]
      break;
 80083ee:	e040      	b.n	8008472 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	015a      	lsls	r2, r3, #5
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	4413      	add	r3, r2
 80083f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80083fc:	461a      	mov	r2, r3
 80083fe:	f240 639d 	movw	r3, #1693	; 0x69d
 8008402:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008404:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008408:	2b00      	cmp	r3, #0
 800840a:	da34      	bge.n	8008476 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	4413      	add	r3, r2
 8008414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	78fa      	ldrb	r2, [r7, #3]
 800841c:	0151      	lsls	r1, r2, #5
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	440a      	add	r2, r1
 8008422:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800842a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800842c:	e023      	b.n	8008476 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800842e:	78fb      	ldrb	r3, [r7, #3]
 8008430:	015a      	lsls	r2, r3, #5
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	4413      	add	r3, r2
 8008436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800843a:	461a      	mov	r2, r3
 800843c:	f240 2325 	movw	r3, #549	; 0x225
 8008440:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008442:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008446:	2b00      	cmp	r3, #0
 8008448:	da17      	bge.n	800847a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800844a:	78fb      	ldrb	r3, [r7, #3]
 800844c:	015a      	lsls	r2, r3, #5
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	4413      	add	r3, r2
 8008452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	0151      	lsls	r1, r2, #5
 800845c:	693a      	ldr	r2, [r7, #16]
 800845e:	440a      	add	r2, r1
 8008460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008464:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8008468:	60d3      	str	r3, [r2, #12]
      }
      break;
 800846a:	e006      	b.n	800847a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	77fb      	strb	r3, [r7, #31]
      break;
 8008470:	e004      	b.n	800847c <USB_HC_Init+0x14c>
      break;
 8008472:	bf00      	nop
 8008474:	e002      	b.n	800847c <USB_HC_Init+0x14c>
      break;
 8008476:	bf00      	nop
 8008478:	e000      	b.n	800847c <USB_HC_Init+0x14c>
      break;
 800847a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800847c:	693b      	ldr	r3, [r7, #16]
 800847e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008482:	699a      	ldr	r2, [r3, #24]
 8008484:	78fb      	ldrb	r3, [r7, #3]
 8008486:	f003 030f 	and.w	r3, r3, #15
 800848a:	2101      	movs	r1, #1
 800848c:	fa01 f303 	lsl.w	r3, r1, r3
 8008490:	6939      	ldr	r1, [r7, #16]
 8008492:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008496:	4313      	orrs	r3, r2
 8008498:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	699b      	ldr	r3, [r3, #24]
 800849e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80084a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	da03      	bge.n	80084b6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80084ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084b2:	61bb      	str	r3, [r7, #24]
 80084b4:	e001      	b.n	80084ba <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff ff0f 	bl	80082de <USB_GetHostSpeed>
 80084c0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80084c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d106      	bne.n	80084d8 <USB_HC_Init+0x1a8>
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2b02      	cmp	r3, #2
 80084ce:	d003      	beq.n	80084d8 <USB_HC_Init+0x1a8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80084d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80084d4:	617b      	str	r3, [r7, #20]
 80084d6:	e001      	b.n	80084dc <USB_HC_Init+0x1ac>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80084d8:	2300      	movs	r3, #0
 80084da:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084dc:	787b      	ldrb	r3, [r7, #1]
 80084de:	059b      	lsls	r3, r3, #22
 80084e0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084e4:	78bb      	ldrb	r3, [r7, #2]
 80084e6:	02db      	lsls	r3, r3, #11
 80084e8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80084ec:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80084ee:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80084f2:	049b      	lsls	r3, r3, #18
 80084f4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80084f8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80084fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80084fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008500:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008506:	78fb      	ldrb	r3, [r7, #3]
 8008508:	0159      	lsls	r1, r3, #5
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	440b      	add	r3, r1
 800850e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008512:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008518:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800851a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800851e:	2b03      	cmp	r3, #3
 8008520:	d10f      	bne.n	8008542 <USB_HC_Init+0x212>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8008522:	78fb      	ldrb	r3, [r7, #3]
 8008524:	015a      	lsls	r2, r3, #5
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4413      	add	r3, r2
 800852a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	78fa      	ldrb	r2, [r7, #3]
 8008532:	0151      	lsls	r1, r2, #5
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	440a      	add	r2, r1
 8008538:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800853c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008540:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008542:	7ffb      	ldrb	r3, [r7, #31]
}
 8008544:	4618      	mov	r0, r3
 8008546:	3720      	adds	r7, #32
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}

0800854c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08c      	sub	sp, #48	; 0x30
 8008550:	af02      	add	r7, sp, #8
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	785b      	ldrb	r3, [r3, #1]
 8008562:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008564:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008568:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800856e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008572:	2b00      	cmp	r3, #0
 8008574:	d02d      	beq.n	80085d2 <USB_HC_StartXfer+0x86>
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	791b      	ldrb	r3, [r3, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d129      	bne.n	80085d2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800857e:	79fb      	ldrb	r3, [r7, #7]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d117      	bne.n	80085b4 <USB_HC_StartXfer+0x68>
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	79db      	ldrb	r3, [r3, #7]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d003      	beq.n	8008594 <USB_HC_StartXfer+0x48>
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	79db      	ldrb	r3, [r3, #7]
 8008590:	2b02      	cmp	r3, #2
 8008592:	d10f      	bne.n	80085b4 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008594:	69fb      	ldr	r3, [r7, #28]
 8008596:	015a      	lsls	r2, r3, #5
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	4413      	add	r3, r2
 800859c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	69fa      	ldr	r2, [r7, #28]
 80085a4:	0151      	lsls	r1, r2, #5
 80085a6:	6a3a      	ldr	r2, [r7, #32]
 80085a8:	440a      	add	r2, r1
 80085aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80085ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b2:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80085b4:	79fb      	ldrb	r3, [r7, #7]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d10b      	bne.n	80085d2 <USB_HC_StartXfer+0x86>
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	795b      	ldrb	r3, [r3, #5]
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d107      	bne.n	80085d2 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	785b      	ldrb	r3, [r3, #1]
 80085c6:	4619      	mov	r1, r3
 80085c8:	68f8      	ldr	r0, [r7, #12]
 80085ca:	f000 fa2f 	bl	8008a2c <USB_DoPing>
      return HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	e0f8      	b.n	80087c4 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d018      	beq.n	800860c <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	695b      	ldr	r3, [r3, #20]
 80085de:	68ba      	ldr	r2, [r7, #8]
 80085e0:	8912      	ldrh	r2, [r2, #8]
 80085e2:	4413      	add	r3, r2
 80085e4:	3b01      	subs	r3, #1
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	8912      	ldrh	r2, [r2, #8]
 80085ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80085ee:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80085f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80085f2:	8b7b      	ldrh	r3, [r7, #26]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d90b      	bls.n	8008610 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80085f8:	8b7b      	ldrh	r3, [r7, #26]
 80085fa:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80085fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	8912      	ldrh	r2, [r2, #8]
 8008602:	fb02 f203 	mul.w	r2, r2, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	611a      	str	r2, [r3, #16]
 800860a:	e001      	b.n	8008610 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800860c:	2301      	movs	r3, #1
 800860e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	78db      	ldrb	r3, [r3, #3]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008618:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	8912      	ldrh	r2, [r2, #8]
 800861e:	fb02 f203 	mul.w	r2, r2, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	611a      	str	r2, [r3, #16]
 8008626:	e003      	b.n	8008630 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	695a      	ldr	r2, [r3, #20]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008638:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800863a:	04d9      	lsls	r1, r3, #19
 800863c:	4b63      	ldr	r3, [pc, #396]	; (80087cc <USB_HC_StartXfer+0x280>)
 800863e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008640:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	7a9b      	ldrb	r3, [r3, #10]
 8008646:	075b      	lsls	r3, r3, #29
 8008648:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800864c:	69f9      	ldr	r1, [r7, #28]
 800864e:	0148      	lsls	r0, r1, #5
 8008650:	6a39      	ldr	r1, [r7, #32]
 8008652:	4401      	add	r1, r0
 8008654:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008658:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800865a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	68d9      	ldr	r1, [r3, #12]
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	015a      	lsls	r2, r3, #5
 800866a:	6a3b      	ldr	r3, [r7, #32]
 800866c:	4413      	add	r3, r2
 800866e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008672:	460a      	mov	r2, r1
 8008674:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008676:	6a3b      	ldr	r3, [r7, #32]
 8008678:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	2b00      	cmp	r3, #0
 8008684:	bf0c      	ite	eq
 8008686:	2301      	moveq	r3, #1
 8008688:	2300      	movne	r3, #0
 800868a:	b2db      	uxtb	r3, r3
 800868c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800868e:	69fb      	ldr	r3, [r7, #28]
 8008690:	015a      	lsls	r2, r3, #5
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	4413      	add	r3, r2
 8008696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	69fa      	ldr	r2, [r7, #28]
 800869e:	0151      	lsls	r1, r2, #5
 80086a0:	6a3a      	ldr	r2, [r7, #32]
 80086a2:	440a      	add	r2, r1
 80086a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80086ac:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80086ae:	69fb      	ldr	r3, [r7, #28]
 80086b0:	015a      	lsls	r2, r3, #5
 80086b2:	6a3b      	ldr	r3, [r7, #32]
 80086b4:	4413      	add	r3, r2
 80086b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	7e7b      	ldrb	r3, [r7, #25]
 80086be:	075b      	lsls	r3, r3, #29
 80086c0:	69f9      	ldr	r1, [r7, #28]
 80086c2:	0148      	lsls	r0, r1, #5
 80086c4:	6a39      	ldr	r1, [r7, #32]
 80086c6:	4401      	add	r1, r0
 80086c8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80086cc:	4313      	orrs	r3, r2
 80086ce:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80086d0:	69fb      	ldr	r3, [r7, #28]
 80086d2:	015a      	lsls	r2, r3, #5
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	4413      	add	r3, r2
 80086d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80086e6:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80086e8:	68bb      	ldr	r3, [r7, #8]
 80086ea:	78db      	ldrb	r3, [r3, #3]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d004      	beq.n	80086fa <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086f6:	613b      	str	r3, [r7, #16]
 80086f8:	e003      	b.n	8008702 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008700:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008708:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	015a      	lsls	r2, r3, #5
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	4413      	add	r3, r2
 8008712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008716:	461a      	mov	r2, r3
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	e04e      	b.n	80087c4 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	78db      	ldrb	r3, [r3, #3]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d149      	bne.n	80087c2 <USB_HC_StartXfer+0x276>
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	695b      	ldr	r3, [r3, #20]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d045      	beq.n	80087c2 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	79db      	ldrb	r3, [r3, #7]
 800873a:	2b03      	cmp	r3, #3
 800873c:	d830      	bhi.n	80087a0 <USB_HC_StartXfer+0x254>
 800873e:	a201      	add	r2, pc, #4	; (adr r2, 8008744 <USB_HC_StartXfer+0x1f8>)
 8008740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008744:	08008755 	.word	0x08008755
 8008748:	08008779 	.word	0x08008779
 800874c:	08008755 	.word	0x08008755
 8008750:	08008779 	.word	0x08008779
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	695b      	ldr	r3, [r3, #20]
 8008758:	3303      	adds	r3, #3
 800875a:	089b      	lsrs	r3, r3, #2
 800875c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800875e:	8afa      	ldrh	r2, [r7, #22]
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	b29b      	uxth	r3, r3
 8008766:	429a      	cmp	r2, r3
 8008768:	d91c      	bls.n	80087a4 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	699b      	ldr	r3, [r3, #24]
 800876e:	f043 0220 	orr.w	r2, r3, #32
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	619a      	str	r2, [r3, #24]
        }
        break;
 8008776:	e015      	b.n	80087a4 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	695b      	ldr	r3, [r3, #20]
 800877c:	3303      	adds	r3, #3
 800877e:	089b      	lsrs	r3, r3, #2
 8008780:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008782:	8afa      	ldrh	r2, [r7, #22]
 8008784:	6a3b      	ldr	r3, [r7, #32]
 8008786:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	b29b      	uxth	r3, r3
 800878e:	429a      	cmp	r2, r3
 8008790:	d90a      	bls.n	80087a8 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	619a      	str	r2, [r3, #24]
        }
        break;
 800879e:	e003      	b.n	80087a8 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80087a0:	bf00      	nop
 80087a2:	e002      	b.n	80087aa <USB_HC_StartXfer+0x25e>
        break;
 80087a4:	bf00      	nop
 80087a6:	e000      	b.n	80087aa <USB_HC_StartXfer+0x25e>
        break;
 80087a8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	68d9      	ldr	r1, [r3, #12]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	785a      	ldrb	r2, [r3, #1]
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	2000      	movs	r0, #0
 80087ba:	9000      	str	r0, [sp, #0]
 80087bc:	68f8      	ldr	r0, [r7, #12]
 80087be:	f7ff fb81 	bl	8007ec4 <USB_WritePacket>
  }

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3728      	adds	r7, #40	; 0x28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	1ff80000 	.word	0x1ff80000

080087d0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	b29b      	uxth	r3, r3
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b089      	sub	sp, #36	; 0x24
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	460b      	mov	r3, r1
 80087fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	61bb      	str	r3, [r7, #24]
  uint32_t hcnum = (uint32_t)hc_num;
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	617b      	str	r3, [r7, #20]
  uint32_t count = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	61fb      	str	r3, [r7, #28]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	015a      	lsls	r2, r3, #5
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	4413      	add	r3, r2
 8008812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	0c9b      	lsrs	r3, r3, #18
 800881a:	f003 0303 	and.w	r3, r3, #3
 800881e:	613b      	str	r3, [r7, #16]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	015a      	lsls	r2, r3, #5
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	4413      	add	r3, r2
 8008828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	0fdb      	lsrs	r3, r3, #31
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	60fb      	str	r3, [r7, #12]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f003 0320 	and.w	r3, r3, #32
 800883e:	2b20      	cmp	r3, #32
 8008840:	d104      	bne.n	800884c <USB_HC_Halt+0x5a>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d101      	bne.n	800884c <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008848:	2300      	movs	r3, #0
 800884a:	e0e8      	b.n	8008a1e <USB_HC_Halt+0x22c>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <USB_HC_Halt+0x66>
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	2b02      	cmp	r3, #2
 8008856:	d173      	bne.n	8008940 <USB_HC_Halt+0x14e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	4413      	add	r3, r2
 8008860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	0151      	lsls	r1, r2, #5
 800886a:	69ba      	ldr	r2, [r7, #24]
 800886c:	440a      	add	r2, r1
 800886e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008872:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008876:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	689b      	ldr	r3, [r3, #8]
 800887c:	f003 0320 	and.w	r3, r3, #32
 8008880:	2b00      	cmp	r3, #0
 8008882:	f040 80cb 	bne.w	8008a1c <USB_HC_Halt+0x22a>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800888a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800888e:	2b00      	cmp	r3, #0
 8008890:	d143      	bne.n	800891a <USB_HC_Halt+0x128>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	69bb      	ldr	r3, [r7, #24]
 8008898:	4413      	add	r3, r2
 800889a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	0151      	lsls	r1, r2, #5
 80088a4:	69ba      	ldr	r2, [r7, #24]
 80088a6:	440a      	add	r2, r1
 80088a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80088b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	0151      	lsls	r1, r2, #5
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	440a      	add	r2, r1
 80088c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80088d0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	69bb      	ldr	r3, [r7, #24]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	0151      	lsls	r1, r2, #5
 80088e4:	69ba      	ldr	r2, [r7, #24]
 80088e6:	440a      	add	r2, r1
 80088e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80088ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088f0:	6013      	str	r3, [r2, #0]
        do
        {
          if (++count > 1000U)
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	3301      	adds	r3, #1
 80088f6:	61fb      	str	r3, [r7, #28]
 80088f8:	69fb      	ldr	r3, [r7, #28]
 80088fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088fe:	d81d      	bhi.n	800893c <USB_HC_Halt+0x14a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	015a      	lsls	r2, r3, #5
 8008904:	69bb      	ldr	r3, [r7, #24]
 8008906:	4413      	add	r3, r2
 8008908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008912:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008916:	d0ec      	beq.n	80088f2 <USB_HC_Halt+0x100>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008918:	e080      	b.n	8008a1c <USB_HC_Halt+0x22a>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	015a      	lsls	r2, r3, #5
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	4413      	add	r3, r2
 8008922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	697a      	ldr	r2, [r7, #20]
 800892a:	0151      	lsls	r1, r2, #5
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	440a      	add	r2, r1
 8008930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008934:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008938:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800893a:	e06f      	b.n	8008a1c <USB_HC_Halt+0x22a>
            break;
 800893c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800893e:	e06d      	b.n	8008a1c <USB_HC_Halt+0x22a>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	69bb      	ldr	r3, [r7, #24]
 8008946:	4413      	add	r3, r2
 8008948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	0151      	lsls	r1, r2, #5
 8008952:	69ba      	ldr	r2, [r7, #24]
 8008954:	440a      	add	r2, r1
 8008956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800895a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800895e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008960:	69bb      	ldr	r3, [r7, #24]
 8008962:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800896c:	2b00      	cmp	r3, #0
 800896e:	d143      	bne.n	80089f8 <USB_HC_Halt+0x206>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	4413      	add	r3, r2
 8008978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	0151      	lsls	r1, r2, #5
 8008982:	69ba      	ldr	r2, [r7, #24]
 8008984:	440a      	add	r2, r1
 8008986:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800898a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800898e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	4413      	add	r3, r2
 8008998:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	697a      	ldr	r2, [r7, #20]
 80089a0:	0151      	lsls	r1, r2, #5
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	440a      	add	r2, r1
 80089a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	697a      	ldr	r2, [r7, #20]
 80089c0:	0151      	lsls	r1, r2, #5
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	440a      	add	r2, r1
 80089c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80089ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089ce:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	3301      	adds	r3, #1
 80089d4:	61fb      	str	r3, [r7, #28]
 80089d6:	69fb      	ldr	r3, [r7, #28]
 80089d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089dc:	d81d      	bhi.n	8008a1a <USB_HC_Halt+0x228>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089f4:	d0ec      	beq.n	80089d0 <USB_HC_Halt+0x1de>
 80089f6:	e011      	b.n	8008a1c <USB_HC_Halt+0x22a>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	015a      	lsls	r2, r3, #5
 80089fc:	69bb      	ldr	r3, [r7, #24]
 80089fe:	4413      	add	r3, r2
 8008a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	0151      	lsls	r1, r2, #5
 8008a0a:	69ba      	ldr	r2, [r7, #24]
 8008a0c:	440a      	add	r2, r1
 8008a0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	e000      	b.n	8008a1c <USB_HC_Halt+0x22a>
          break;
 8008a1a:	bf00      	nop
    }
  }

  return HAL_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3724      	adds	r7, #36	; 0x24
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr
	...

08008a2c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b087      	sub	sp, #28
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	460b      	mov	r3, r1
 8008a36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008a3c:	78fb      	ldrb	r3, [r7, #3]
 8008a3e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008a40:	2301      	movs	r3, #1
 8008a42:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	04da      	lsls	r2, r3, #19
 8008a48:	4b15      	ldr	r3, [pc, #84]	; (8008aa0 <USB_DoPing+0x74>)
 8008a4a:	4013      	ands	r3, r2
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	0151      	lsls	r1, r2, #5
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	440a      	add	r2, r1
 8008a54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a5c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008a74:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a7c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	697b      	ldr	r3, [r7, #20]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	1ff80000 	.word	0x1ff80000

08008aa4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff f981 	bl	8007dbc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8008aba:	2110      	movs	r1, #16
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff f9b9 	bl	8007e34 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f7ff f9dc 	bl	8007e80 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008ac8:	2300      	movs	r3, #0
 8008aca:	613b      	str	r3, [r7, #16]
 8008acc:	e01f      	b.n	8008b0e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ae4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aec:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008af4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	015a      	lsls	r2, r3, #5
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4413      	add	r3, r2
 8008afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b02:	461a      	mov	r2, r3
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	613b      	str	r3, [r7, #16]
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b0f      	cmp	r3, #15
 8008b12:	d9dc      	bls.n	8008ace <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008b14:	2300      	movs	r3, #0
 8008b16:	613b      	str	r3, [r7, #16]
 8008b18:	e034      	b.n	8008b84 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b30:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b38:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b40:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4e:	461a      	mov	r2, r3
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	3301      	adds	r3, #1
 8008b58:	617b      	str	r3, [r7, #20]
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b60:	d80c      	bhi.n	8008b7c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	015a      	lsls	r2, r3, #5
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	4413      	add	r3, r2
 8008b6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b78:	d0ec      	beq.n	8008b54 <USB_StopHost+0xb0>
 8008b7a:	e000      	b.n	8008b7e <USB_StopHost+0xda>
        break;
 8008b7c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	3301      	adds	r3, #1
 8008b82:	613b      	str	r3, [r7, #16]
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	2b0f      	cmp	r3, #15
 8008b88:	d9c7      	bls.n	8008b1a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b90:	461a      	mov	r2, r3
 8008b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b96:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b9e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f7ff f8fa 	bl	8007d9a <USB_EnableGlobalInt>

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008bb0:	b590      	push	{r4, r7, lr}
 8008bb2:	b089      	sub	sp, #36	; 0x24
 8008bb4:	af04      	add	r7, sp, #16
 8008bb6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008bb8:	2301      	movs	r3, #1
 8008bba:	2202      	movs	r2, #2
 8008bbc:	2102      	movs	r1, #2
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fc66 	bl	8009490 <USBH_FindInterface>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	2bff      	cmp	r3, #255	; 0xff
 8008bcc:	d002      	beq.n	8008bd4 <USBH_CDC_InterfaceInit+0x24>
 8008bce:	7bfb      	ldrb	r3, [r7, #15]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d901      	bls.n	8008bd8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008bd4:	2302      	movs	r3, #2
 8008bd6:	e13d      	b.n	8008e54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008bd8:	7bfb      	ldrb	r3, [r7, #15]
 8008bda:	4619      	mov	r1, r3
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	f000 fc3b 	bl	8009458 <USBH_SelectInterface>
 8008be2:	4603      	mov	r3, r0
 8008be4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008be6:	7bbb      	ldrb	r3, [r7, #14]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d001      	beq.n	8008bf0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008bec:	2302      	movs	r3, #2
 8008bee:	e131      	b.n	8008e54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008bf6:	2050      	movs	r0, #80	; 0x50
 8008bf8:	f002 fa00 	bl	800affc <malloc>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008c10:	2302      	movs	r3, #2
 8008c12:	e11f      	b.n	8008e54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008c14:	2250      	movs	r2, #80	; 0x50
 8008c16:	2100      	movs	r1, #0
 8008c18:	68b8      	ldr	r0, [r7, #8]
 8008c1a:	f002 f9ff 	bl	800b01c <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	687a      	ldr	r2, [r7, #4]
 8008c22:	211a      	movs	r1, #26
 8008c24:	fb01 f303 	mul.w	r3, r1, r3
 8008c28:	4413      	add	r3, r2
 8008c2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008c2e:	781b      	ldrb	r3, [r3, #0]
 8008c30:	b25b      	sxtb	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	da15      	bge.n	8008c62 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	687a      	ldr	r2, [r7, #4]
 8008c3a:	211a      	movs	r1, #26
 8008c3c:	fb01 f303 	mul.w	r3, r1, r3
 8008c40:	4413      	add	r3, r2
 8008c42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008c46:	781a      	ldrb	r2, [r3, #0]
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	211a      	movs	r1, #26
 8008c52:	fb01 f303 	mul.w	r3, r1, r3
 8008c56:	4413      	add	r3, r2
 8008c58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008c5c:	881a      	ldrh	r2, [r3, #0]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	4619      	mov	r1, r3
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 fe32 	bl	800a8d2 <USBH_AllocPipe>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	461a      	mov	r2, r3
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	7819      	ldrb	r1, [r3, #0]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	7858      	ldrb	r0, [r3, #1]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	8952      	ldrh	r2, [r2, #10]
 8008c8e:	9202      	str	r2, [sp, #8]
 8008c90:	2203      	movs	r2, #3
 8008c92:	9201      	str	r2, [sp, #4]
 8008c94:	9300      	str	r3, [sp, #0]
 8008c96:	4623      	mov	r3, r4
 8008c98:	4602      	mov	r2, r0
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 fdea 	bl	800a874 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f002 f8f9 	bl	800aea0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008cae:	2300      	movs	r3, #0
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	210a      	movs	r1, #10
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f000 fbeb 	bl	8009490 <USBH_FindInterface>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
 8008cc0:	2bff      	cmp	r3, #255	; 0xff
 8008cc2:	d002      	beq.n	8008cca <USBH_CDC_InterfaceInit+0x11a>
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d901      	bls.n	8008cce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008cca:	2302      	movs	r3, #2
 8008ccc:	e0c2      	b.n	8008e54 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	211a      	movs	r1, #26
 8008cd4:	fb01 f303 	mul.w	r3, r1, r3
 8008cd8:	4413      	add	r3, r2
 8008cda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	b25b      	sxtb	r3, r3
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	da16      	bge.n	8008d14 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008ce6:	7bfb      	ldrb	r3, [r7, #15]
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	211a      	movs	r1, #26
 8008cec:	fb01 f303 	mul.w	r3, r1, r3
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008cf6:	781a      	ldrb	r2, [r3, #0]
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	211a      	movs	r1, #26
 8008d02:	fb01 f303 	mul.w	r3, r1, r3
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d0c:	881a      	ldrh	r2, [r3, #0]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	835a      	strh	r2, [r3, #26]
 8008d12:	e015      	b.n	8008d40 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d14:	7bfb      	ldrb	r3, [r7, #15]
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	211a      	movs	r1, #26
 8008d1a:	fb01 f303 	mul.w	r3, r1, r3
 8008d1e:	4413      	add	r3, r2
 8008d20:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008d24:	781a      	ldrb	r2, [r3, #0]
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	211a      	movs	r1, #26
 8008d30:	fb01 f303 	mul.w	r3, r1, r3
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008d3a:	881a      	ldrh	r2, [r3, #0]
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	211a      	movs	r1, #26
 8008d46:	fb01 f303 	mul.w	r3, r1, r3
 8008d4a:	4413      	add	r3, r2
 8008d4c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d50:	781b      	ldrb	r3, [r3, #0]
 8008d52:	b25b      	sxtb	r3, r3
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da16      	bge.n	8008d86 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	211a      	movs	r1, #26
 8008d5e:	fb01 f303 	mul.w	r3, r1, r3
 8008d62:	4413      	add	r3, r2
 8008d64:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d68:	781a      	ldrb	r2, [r3, #0]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	211a      	movs	r1, #26
 8008d74:	fb01 f303 	mul.w	r3, r1, r3
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008d7e:	881a      	ldrh	r2, [r3, #0]
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	835a      	strh	r2, [r3, #26]
 8008d84:	e015      	b.n	8008db2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	687a      	ldr	r2, [r7, #4]
 8008d8a:	211a      	movs	r1, #26
 8008d8c:	fb01 f303 	mul.w	r3, r1, r3
 8008d90:	4413      	add	r3, r2
 8008d92:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008d96:	781a      	ldrb	r2, [r3, #0]
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	211a      	movs	r1, #26
 8008da2:	fb01 f303 	mul.w	r3, r1, r3
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8008dac:	881a      	ldrh	r2, [r3, #0]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	7b9b      	ldrb	r3, [r3, #14]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 fd8a 	bl	800a8d2 <USBH_AllocPipe>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	7bdb      	ldrb	r3, [r3, #15]
 8008dca:	4619      	mov	r1, r3
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f001 fd80 	bl	800a8d2 <USBH_AllocPipe>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	7b59      	ldrb	r1, [r3, #13]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	7b98      	ldrb	r0, [r3, #14]
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	8b12      	ldrh	r2, [r2, #24]
 8008df2:	9202      	str	r2, [sp, #8]
 8008df4:	2202      	movs	r2, #2
 8008df6:	9201      	str	r2, [sp, #4]
 8008df8:	9300      	str	r3, [sp, #0]
 8008dfa:	4623      	mov	r3, r4
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f001 fd38 	bl	800a874 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	7b19      	ldrb	r1, [r3, #12]
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	7bd8      	ldrb	r0, [r3, #15]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008e18:	68ba      	ldr	r2, [r7, #8]
 8008e1a:	8b52      	ldrh	r2, [r2, #26]
 8008e1c:	9202      	str	r2, [sp, #8]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	9201      	str	r2, [sp, #4]
 8008e22:	9300      	str	r3, [sp, #0]
 8008e24:	4623      	mov	r3, r4
 8008e26:	4602      	mov	r2, r0
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f001 fd23 	bl	800a874 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	7b5b      	ldrb	r3, [r3, #13]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f002 f82e 	bl	800aea0 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	7b1b      	ldrb	r3, [r3, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f002 f827 	bl	800aea0 <USBH_LL_SetToggle>

  return USBH_OK;
 8008e52:	2300      	movs	r3, #0
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	3714      	adds	r7, #20
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bd90      	pop	{r4, r7, pc}

08008e5c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b084      	sub	sp, #16
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e6a:	69db      	ldr	r3, [r3, #28]
 8008e6c:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00e      	beq.n	8008e94 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f001 fd18 	bl	800a8b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 fd43 	bl	800a914 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2200      	movs	r2, #0
 8008e92:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	7b1b      	ldrb	r3, [r3, #12]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00e      	beq.n	8008eba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	7b1b      	ldrb	r3, [r3, #12]
 8008ea0:	4619      	mov	r1, r3
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f001 fd05 	bl	800a8b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	7b1b      	ldrb	r3, [r3, #12]
 8008eac:	4619      	mov	r1, r3
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f001 fd30 	bl	800a914 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	7b5b      	ldrb	r3, [r3, #13]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00e      	beq.n	8008ee0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	7b5b      	ldrb	r3, [r3, #13]
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f001 fcf2 	bl	800a8b2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	7b5b      	ldrb	r3, [r3, #13]
 8008ed2:	4619      	mov	r1, r3
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f001 fd1d 	bl	800a914 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ef2:	69db      	ldr	r3, [r3, #28]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f002 f889 	bl	800b00c <free>
    phost->pActiveClass->pData = 0U;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f00:	2200      	movs	r2, #0
 8008f02:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008f04:	2300      	movs	r3, #0
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}

08008f0e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f1c:	69db      	ldr	r3, [r3, #28]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	3340      	adds	r3, #64	; 0x40
 8008f24:	4619      	mov	r1, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f8b1 	bl	800908e <GetLineCoding>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008f30:	7afb      	ldrb	r3, [r7, #11]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d105      	bne.n	8008f42 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008f3c:	2102      	movs	r1, #2
 8008f3e:	6878      	ldr	r0, [r7, #4]
 8008f40:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008f42:	7afb      	ldrb	r3, [r7, #11]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008f54:	2301      	movs	r3, #1
 8008f56:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f62:	69db      	ldr	r3, [r3, #28]
 8008f64:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008f6c:	2b04      	cmp	r3, #4
 8008f6e:	d877      	bhi.n	8009060 <USBH_CDC_Process+0x114>
 8008f70:	a201      	add	r2, pc, #4	; (adr r2, 8008f78 <USBH_CDC_Process+0x2c>)
 8008f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f76:	bf00      	nop
 8008f78:	08008f8d 	.word	0x08008f8d
 8008f7c:	08008f93 	.word	0x08008f93
 8008f80:	08008fc3 	.word	0x08008fc3
 8008f84:	08009037 	.word	0x08009037
 8008f88:	08009045 	.word	0x08009045
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8008f90:	e06d      	b.n	800906e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 f897 	bl	80090cc <SetLineCoding>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008fa2:	7bbb      	ldrb	r3, [r7, #14]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d104      	bne.n	8008fb2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008fb0:	e058      	b.n	8009064 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	d055      	beq.n	8009064 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2204      	movs	r2, #4
 8008fbc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8008fc0:	e050      	b.n	8009064 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	3340      	adds	r3, #64	; 0x40
 8008fc6:	4619      	mov	r1, r3
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 f860 	bl	800908e <GetLineCoding>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d126      	bne.n	8009026 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fea:	791b      	ldrb	r3, [r3, #4]
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d13b      	bne.n	8009068 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ffa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d133      	bne.n	8009068 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800900a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800900c:	429a      	cmp	r2, r3
 800900e:	d12b      	bne.n	8009068 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009010:	68bb      	ldr	r3, [r7, #8]
 8009012:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009018:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800901a:	429a      	cmp	r2, r3
 800901c:	d124      	bne.n	8009068 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 f958 	bl	80092d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009024:	e020      	b.n	8009068 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009026:	7bbb      	ldrb	r3, [r7, #14]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d01d      	beq.n	8009068 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	2204      	movs	r2, #4
 8009030:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009034:	e018      	b.n	8009068 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009036:	6878      	ldr	r0, [r7, #4]
 8009038:	f000 f867 	bl	800910a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 f8da 	bl	80091f6 <CDC_ProcessReception>
      break;
 8009042:	e014      	b.n	800906e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009044:	2100      	movs	r1, #0
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 ffe3 	bl	800a012 <USBH_ClrFeature>
 800904c:	4603      	mov	r3, r0
 800904e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009050:	7bbb      	ldrb	r3, [r7, #14]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10a      	bne.n	800906c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2200      	movs	r2, #0
 800905a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800905e:	e005      	b.n	800906c <USBH_CDC_Process+0x120>

    default:
      break;
 8009060:	bf00      	nop
 8009062:	e004      	b.n	800906e <USBH_CDC_Process+0x122>
      break;
 8009064:	bf00      	nop
 8009066:	e002      	b.n	800906e <USBH_CDC_Process+0x122>
      break;
 8009068:	bf00      	nop
 800906a:	e000      	b.n	800906e <USBH_CDC_Process+0x122>
      break;
 800906c:	bf00      	nop

  }

  return status;
 800906e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009070:	4618      	mov	r0, r3
 8009072:	3710      	adds	r7, #16
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009080:	2300      	movs	r3, #0
}
 8009082:	4618      	mov	r0, r3
 8009084:	370c      	adds	r7, #12
 8009086:	46bd      	mov	sp, r7
 8009088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908c:	4770      	bx	lr

0800908e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b082      	sub	sp, #8
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
 8009096:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	22a1      	movs	r2, #161	; 0xa1
 800909c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2221      	movs	r2, #33	; 0x21
 80090a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2207      	movs	r2, #7
 80090b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2207      	movs	r2, #7
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f001 f988 	bl	800a3d2 <USBH_CtlReq>
 80090c2:	4603      	mov	r3, r0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2221      	movs	r2, #33	; 0x21
 80090da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2220      	movs	r2, #32
 80090e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2200      	movs	r2, #0
 80090e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2200      	movs	r2, #0
 80090ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2207      	movs	r2, #7
 80090f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	2207      	movs	r2, #7
 80090f8:	4619      	mov	r1, r3
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f001 f969 	bl	800a3d2 <USBH_CtlReq>
 8009100:	4603      	mov	r3, r0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}

0800910a <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800910a:	b580      	push	{r7, lr}
 800910c:	b086      	sub	sp, #24
 800910e:	af02      	add	r7, sp, #8
 8009110:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009118:	69db      	ldr	r3, [r3, #28]
 800911a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800911c:	2300      	movs	r3, #0
 800911e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009126:	2b01      	cmp	r3, #1
 8009128:	d002      	beq.n	8009130 <CDC_ProcessTransmission+0x26>
 800912a:	2b02      	cmp	r3, #2
 800912c:	d023      	beq.n	8009176 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800912e:	e05e      	b.n	80091ee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009134:	68fa      	ldr	r2, [r7, #12]
 8009136:	8b12      	ldrh	r2, [r2, #24]
 8009138:	4293      	cmp	r3, r2
 800913a:	d90b      	bls.n	8009154 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	69d9      	ldr	r1, [r3, #28]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	8b1a      	ldrh	r2, [r3, #24]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	7b5b      	ldrb	r3, [r3, #13]
 8009148:	2001      	movs	r0, #1
 800914a:	9000      	str	r0, [sp, #0]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 fb4e 	bl	800a7ee <USBH_BulkSendData>
 8009152:	e00b      	b.n	800916c <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800915c:	b29a      	uxth	r2, r3
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	7b5b      	ldrb	r3, [r3, #13]
 8009162:	2001      	movs	r0, #1
 8009164:	9000      	str	r0, [sp, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f001 fb41 	bl	800a7ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2202      	movs	r2, #2
 8009170:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009174:	e03b      	b.n	80091ee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	7b5b      	ldrb	r3, [r3, #13]
 800917a:	4619      	mov	r1, r3
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 fe65 	bl	800ae4c <USBH_LL_GetURBState>
 8009182:	4603      	mov	r3, r0
 8009184:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009186:	7afb      	ldrb	r3, [r7, #11]
 8009188:	2b01      	cmp	r3, #1
 800918a:	d128      	bne.n	80091de <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	68fa      	ldr	r2, [r7, #12]
 8009192:	8b12      	ldrh	r2, [r2, #24]
 8009194:	4293      	cmp	r3, r2
 8009196:	d90e      	bls.n	80091b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	8b12      	ldrh	r2, [r2, #24]
 80091a0:	1a9a      	subs	r2, r3, r2
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	8b12      	ldrh	r2, [r2, #24]
 80091ae:	441a      	add	r2, r3
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	61da      	str	r2, [r3, #28]
 80091b4:	e002      	b.n	80091bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2200      	movs	r2, #0
 80091ba:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2201      	movs	r2, #1
 80091c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80091cc:	e00e      	b.n	80091ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 f868 	bl	80092ac <USBH_CDC_TransmitCallback>
      break;
 80091dc:	e006      	b.n	80091ec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80091de:	7afb      	ldrb	r3, [r7, #11]
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d103      	bne.n	80091ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80091ec:	bf00      	nop
  }
}
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b086      	sub	sp, #24
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009208:	2300      	movs	r3, #0
 800920a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009212:	2b03      	cmp	r3, #3
 8009214:	d002      	beq.n	800921c <CDC_ProcessReception+0x26>
 8009216:	2b04      	cmp	r3, #4
 8009218:	d00e      	beq.n	8009238 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800921a:	e043      	b.n	80092a4 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800921c:	697b      	ldr	r3, [r7, #20]
 800921e:	6a19      	ldr	r1, [r3, #32]
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	8b5a      	ldrh	r2, [r3, #26]
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	7b1b      	ldrb	r3, [r3, #12]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f001 fb05 	bl	800a838 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	2204      	movs	r2, #4
 8009232:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009236:	e035      	b.n	80092a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	7b1b      	ldrb	r3, [r3, #12]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f001 fe04 	bl	800ae4c <USBH_LL_GetURBState>
 8009244:	4603      	mov	r3, r0
 8009246:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009248:	7cfb      	ldrb	r3, [r7, #19]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d129      	bne.n	80092a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	7b1b      	ldrb	r3, [r3, #12]
 8009252:	4619      	mov	r1, r3
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f001 fd67 	bl	800ad28 <USBH_LL_GetLastXferSize>
 800925a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	429a      	cmp	r2, r3
 8009264:	d016      	beq.n	8009294 <CDC_ProcessReception+0x9e>
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	8b5b      	ldrh	r3, [r3, #26]
 800926a:	461a      	mov	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4293      	cmp	r3, r2
 8009270:	d910      	bls.n	8009294 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	1ad2      	subs	r2, r2, r3
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	6a1a      	ldr	r2, [r3, #32]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	441a      	add	r2, r3
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	2203      	movs	r2, #3
 800928e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009292:	e006      	b.n	80092a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	f000 f80f 	bl	80092c0 <USBH_CDC_ReceiveCallback>
      break;
 80092a2:	bf00      	nop
  }
}
 80092a4:	bf00      	nop
 80092a6:	3718      	adds	r7, #24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80092b4:	bf00      	nop
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b083      	sub	sp, #12
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d2:	4770      	bx	lr

080092d4 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80092d4:	b480      	push	{r7}
 80092d6:	b083      	sub	sp, #12
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80092dc:	bf00      	nop
 80092de:	370c      	adds	r7, #12
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr

080092e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	4613      	mov	r3, r2
 80092f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d101      	bne.n	8009300 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80092fc:	2302      	movs	r3, #2
 80092fe:	e029      	b.n	8009354 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	79fa      	ldrb	r2, [r7, #7]
 8009304:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2200      	movs	r2, #0
 800930c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f81f 	bl	800935c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d003      	beq.n	800934c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f001 fc37 	bl	800abc0 <USBH_LL_Init>

  return USBH_OK;
 8009352:	2300      	movs	r3, #0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3710      	adds	r7, #16
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]
 800936c:	e009      	b.n	8009382 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800936e:	687a      	ldr	r2, [r7, #4]
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	33e0      	adds	r3, #224	; 0xe0
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	4413      	add	r3, r2
 8009378:	2200      	movs	r2, #0
 800937a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3301      	adds	r3, #1
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b0e      	cmp	r3, #14
 8009386:	d9f2      	bls.n	800936e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009388:	2300      	movs	r3, #0
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	e009      	b.n	80093a2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009398:	2200      	movs	r2, #0
 800939a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	3301      	adds	r3, #1
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80093a8:	d3f1      	bcc.n	800938e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2200      	movs	r2, #0
 80093ae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2200      	movs	r2, #0
 80093b4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2240      	movs	r2, #64	; 0x40
 80093ce:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2200      	movs	r2, #0
 80093d4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2200      	movs	r2, #0
 80093da:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d016      	beq.n	8009446 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10e      	bne.n	8009440 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009428:	1c59      	adds	r1, r3, #1
 800942a:	687a      	ldr	r2, [r7, #4]
 800942c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	33de      	adds	r3, #222	; 0xde
 8009434:	6839      	ldr	r1, [r7, #0]
 8009436:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800943a:	2300      	movs	r3, #0
 800943c:	73fb      	strb	r3, [r7, #15]
 800943e:	e004      	b.n	800944a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009440:	2302      	movs	r3, #2
 8009442:	73fb      	strb	r3, [r7, #15]
 8009444:	e001      	b.n	800944a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009446:	2302      	movs	r3, #2
 8009448:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800944a:	7bfb      	ldrb	r3, [r7, #15]
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009464:	2300      	movs	r3, #0
 8009466:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800946e:	78fa      	ldrb	r2, [r7, #3]
 8009470:	429a      	cmp	r2, r3
 8009472:	d204      	bcs.n	800947e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	78fa      	ldrb	r2, [r7, #3]
 8009478:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800947c:	e001      	b.n	8009482 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800947e:	2302      	movs	r3, #2
 8009480:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009482:	7bfb      	ldrb	r3, [r7, #15]
}
 8009484:	4618      	mov	r0, r3
 8009486:	3714      	adds	r7, #20
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	4608      	mov	r0, r1
 800949a:	4611      	mov	r1, r2
 800949c:	461a      	mov	r2, r3
 800949e:	4603      	mov	r3, r0
 80094a0:	70fb      	strb	r3, [r7, #3]
 80094a2:	460b      	mov	r3, r1
 80094a4:	70bb      	strb	r3, [r7, #2]
 80094a6:	4613      	mov	r3, r2
 80094a8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80094aa:	2300      	movs	r3, #0
 80094ac:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 80094ae:	2300      	movs	r3, #0
 80094b0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80094b8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80094ba:	e025      	b.n	8009508 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80094bc:	7dfb      	ldrb	r3, [r7, #23]
 80094be:	221a      	movs	r2, #26
 80094c0:	fb02 f303 	mul.w	r3, r2, r3
 80094c4:	3308      	adds	r3, #8
 80094c6:	68fa      	ldr	r2, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	3302      	adds	r3, #2
 80094cc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	795b      	ldrb	r3, [r3, #5]
 80094d2:	78fa      	ldrb	r2, [r7, #3]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d002      	beq.n	80094de <USBH_FindInterface+0x4e>
 80094d8:	78fb      	ldrb	r3, [r7, #3]
 80094da:	2bff      	cmp	r3, #255	; 0xff
 80094dc:	d111      	bne.n	8009502 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80094e2:	78ba      	ldrb	r2, [r7, #2]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d002      	beq.n	80094ee <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094e8:	78bb      	ldrb	r3, [r7, #2]
 80094ea:	2bff      	cmp	r3, #255	; 0xff
 80094ec:	d109      	bne.n	8009502 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80094f2:	787a      	ldrb	r2, [r7, #1]
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d002      	beq.n	80094fe <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80094f8:	787b      	ldrb	r3, [r7, #1]
 80094fa:	2bff      	cmp	r3, #255	; 0xff
 80094fc:	d101      	bne.n	8009502 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80094fe:	7dfb      	ldrb	r3, [r7, #23]
 8009500:	e006      	b.n	8009510 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009502:	7dfb      	ldrb	r3, [r7, #23]
 8009504:	3301      	adds	r3, #1
 8009506:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d9d6      	bls.n	80094bc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800950e:	23ff      	movs	r3, #255	; 0xff
}
 8009510:	4618      	mov	r0, r3
 8009512:	371c      	adds	r7, #28
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f001 fb87 	bl	800ac38 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800952a:	2101      	movs	r1, #1
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 fca0 	bl	800ae72 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009532:	2300      	movs	r3, #0
}
 8009534:	4618      	mov	r0, r3
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b088      	sub	sp, #32
 8009540:	af04      	add	r7, sp, #16
 8009542:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009544:	2302      	movs	r3, #2
 8009546:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009552:	b2db      	uxtb	r3, r3
 8009554:	2b01      	cmp	r3, #1
 8009556:	d102      	bne.n	800955e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2203      	movs	r2, #3
 800955c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	781b      	ldrb	r3, [r3, #0]
 8009562:	b2db      	uxtb	r3, r3
 8009564:	2b0b      	cmp	r3, #11
 8009566:	f200 81b3 	bhi.w	80098d0 <USBH_Process+0x394>
 800956a:	a201      	add	r2, pc, #4	; (adr r2, 8009570 <USBH_Process+0x34>)
 800956c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009570:	080095a1 	.word	0x080095a1
 8009574:	080095d3 	.word	0x080095d3
 8009578:	0800963b 	.word	0x0800963b
 800957c:	0800986b 	.word	0x0800986b
 8009580:	080098d1 	.word	0x080098d1
 8009584:	080096df 	.word	0x080096df
 8009588:	08009811 	.word	0x08009811
 800958c:	08009715 	.word	0x08009715
 8009590:	08009735 	.word	0x08009735
 8009594:	08009755 	.word	0x08009755
 8009598:	08009783 	.word	0x08009783
 800959c:	08009853 	.word	0x08009853
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 8193 	beq.w	80098d4 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2201      	movs	r2, #1
 80095b2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80095b4:	20c8      	movs	r0, #200	; 0xc8
 80095b6:	f001 fca3 	bl	800af00 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f001 fb99 	bl	800acf2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2200      	movs	r2, #0
 80095c4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2200      	movs	r2, #0
 80095cc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 80095d0:	e180      	b.n	80098d4 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d107      	bne.n	80095ec <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2202      	movs	r2, #2
 80095e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80095ea:	e182      	b.n	80098f2 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80095f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80095f6:	d914      	bls.n	8009622 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80095fe:	3301      	adds	r3, #1
 8009600:	b2da      	uxtb	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800960e:	2b03      	cmp	r3, #3
 8009610:	d903      	bls.n	800961a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	220d      	movs	r2, #13
 8009616:	701a      	strb	r2, [r3, #0]
      break;
 8009618:	e16b      	b.n	80098f2 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]
      break;
 8009620:	e167      	b.n	80098f2 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009628:	f103 020a 	add.w	r2, r3, #10
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009632:	200a      	movs	r0, #10
 8009634:	f001 fc64 	bl	800af00 <USBH_Delay>
      break;
 8009638:	e15b      	b.n	80098f2 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800964a:	2104      	movs	r1, #4
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009650:	2064      	movs	r0, #100	; 0x64
 8009652:	f001 fc55 	bl	800af00 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	f001 fb24 	bl	800aca4 <USBH_LL_GetSpeed>
 800965c:	4603      	mov	r3, r0
 800965e:	461a      	mov	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2205      	movs	r2, #5
 800966a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800966c:	2100      	movs	r1, #0
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f001 f92f 	bl	800a8d2 <USBH_AllocPipe>
 8009674:	4603      	mov	r3, r0
 8009676:	461a      	mov	r2, r3
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800967c:	2180      	movs	r1, #128	; 0x80
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f001 f927 	bl	800a8d2 <USBH_AllocPipe>
 8009684:	4603      	mov	r3, r0
 8009686:	461a      	mov	r2, r3
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	7919      	ldrb	r1, [r3, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800969c:	687a      	ldr	r2, [r7, #4]
 800969e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80096a0:	b292      	uxth	r2, r2
 80096a2:	9202      	str	r2, [sp, #8]
 80096a4:	2200      	movs	r2, #0
 80096a6:	9201      	str	r2, [sp, #4]
 80096a8:	9300      	str	r3, [sp, #0]
 80096aa:	4603      	mov	r3, r0
 80096ac:	2280      	movs	r2, #128	; 0x80
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f001 f8e0 	bl	800a874 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	7959      	ldrb	r1, [r3, #5]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80096c8:	b292      	uxth	r2, r2
 80096ca:	9202      	str	r2, [sp, #8]
 80096cc:	2200      	movs	r2, #0
 80096ce:	9201      	str	r2, [sp, #4]
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	4603      	mov	r3, r0
 80096d4:	2200      	movs	r2, #0
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f001 f8cc 	bl	800a874 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80096dc:	e109      	b.n	80098f2 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f90c 	bl	80098fc <USBH_HandleEnum>
 80096e4:	4603      	mov	r3, r0
 80096e6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80096e8:	7bbb      	ldrb	r3, [r7, #14]
 80096ea:	b2db      	uxtb	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f040 80f3 	bne.w	80098d8 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2200      	movs	r2, #0
 80096f6:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009700:	2b01      	cmp	r3, #1
 8009702:	d103      	bne.n	800970c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2208      	movs	r2, #8
 8009708:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800970a:	e0e5      	b.n	80098d8 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2207      	movs	r2, #7
 8009710:	701a      	strb	r2, [r3, #0]
      break;
 8009712:	e0e1      	b.n	80098d8 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800971a:	2b00      	cmp	r3, #0
 800971c:	f000 80de 	beq.w	80098dc <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009726:	2101      	movs	r1, #1
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2208      	movs	r2, #8
 8009730:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8009732:	e0d3      	b.n	80098dc <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800973a:	b29b      	uxth	r3, r3
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fc20 	bl	8009f84 <USBH_SetCfg>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	f040 80ca 	bne.w	80098e0 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2209      	movs	r2, #9
 8009750:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009752:	e0c5      	b.n	80098e0 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800975a:	f003 0320 	and.w	r3, r3, #32
 800975e:	2b00      	cmp	r3, #0
 8009760:	d00b      	beq.n	800977a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8009762:	2101      	movs	r1, #1
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fc30 	bl	8009fca <USBH_SetFeature>
 800976a:	4603      	mov	r3, r0
 800976c:	2b00      	cmp	r3, #0
 800976e:	f040 80b9 	bne.w	80098e4 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	220a      	movs	r2, #10
 8009776:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009778:	e0b4      	b.n	80098e4 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	220a      	movs	r2, #10
 800977e:	701a      	strb	r2, [r3, #0]
      break;
 8009780:	e0b0      	b.n	80098e4 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 80ad 	beq.w	80098e8 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	2200      	movs	r2, #0
 8009792:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009796:	2300      	movs	r3, #0
 8009798:	73fb      	strb	r3, [r7, #15]
 800979a:	e016      	b.n	80097ca <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800979c:	7bfa      	ldrb	r2, [r7, #15]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	32de      	adds	r2, #222	; 0xde
 80097a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097a6:	791a      	ldrb	r2, [r3, #4]
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80097ae:	429a      	cmp	r2, r3
 80097b0:	d108      	bne.n	80097c4 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 80097b2:	7bfa      	ldrb	r2, [r7, #15]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	32de      	adds	r2, #222	; 0xde
 80097b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80097c2:	e005      	b.n	80097d0 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80097c4:	7bfb      	ldrb	r3, [r7, #15]
 80097c6:	3301      	adds	r3, #1
 80097c8:	73fb      	strb	r3, [r7, #15]
 80097ca:	7bfb      	ldrb	r3, [r7, #15]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0e5      	beq.n	800979c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d016      	beq.n	8009808 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
 80097e6:	4603      	mov	r3, r0
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d109      	bne.n	8009800 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2206      	movs	r2, #6
 80097f0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80097f8:	2103      	movs	r1, #3
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80097fe:	e073      	b.n	80098e8 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	220d      	movs	r2, #13
 8009804:	701a      	strb	r2, [r3, #0]
      break;
 8009806:	e06f      	b.n	80098e8 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	220d      	movs	r2, #13
 800980c:	701a      	strb	r2, [r3, #0]
      break;
 800980e:	e06b      	b.n	80098e8 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009816:	2b00      	cmp	r3, #0
 8009818:	d017      	beq.n	800984a <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	4798      	blx	r3
 8009826:	4603      	mov	r3, r0
 8009828:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800982a:	7bbb      	ldrb	r3, [r7, #14]
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d103      	bne.n	800983a <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	220b      	movs	r2, #11
 8009836:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8009838:	e058      	b.n	80098ec <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800983a:	7bbb      	ldrb	r3, [r7, #14]
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b02      	cmp	r3, #2
 8009840:	d154      	bne.n	80098ec <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	220d      	movs	r2, #13
 8009846:	701a      	strb	r2, [r3, #0]
      break;
 8009848:	e050      	b.n	80098ec <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	220d      	movs	r2, #13
 800984e:	701a      	strb	r2, [r3, #0]
      break;
 8009850:	e04c      	b.n	80098ec <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009858:	2b00      	cmp	r3, #0
 800985a:	d049      	beq.n	80098f0 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009862:	695b      	ldr	r3, [r3, #20]
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	4798      	blx	r3
      }
      break;
 8009868:	e042      	b.n	80098f0 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7ff fd72 	bl	800935c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800987e:	2b00      	cmp	r3, #0
 8009880:	d009      	beq.n	8009896 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009888:	68db      	ldr	r3, [r3, #12]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2200      	movs	r2, #0
 8009892:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800989c:	2b00      	cmp	r3, #0
 800989e:	d005      	beq.n	80098ac <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098a6:	2105      	movs	r1, #5
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d107      	bne.n	80098c8 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7ff fe2b 	bl	800951c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80098c6:	e014      	b.n	80098f2 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f001 f9b5 	bl	800ac38 <USBH_LL_Start>
      break;
 80098ce:	e010      	b.n	80098f2 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 80098d0:	bf00      	nop
 80098d2:	e00e      	b.n	80098f2 <USBH_Process+0x3b6>
      break;
 80098d4:	bf00      	nop
 80098d6:	e00c      	b.n	80098f2 <USBH_Process+0x3b6>
      break;
 80098d8:	bf00      	nop
 80098da:	e00a      	b.n	80098f2 <USBH_Process+0x3b6>
    break;
 80098dc:	bf00      	nop
 80098de:	e008      	b.n	80098f2 <USBH_Process+0x3b6>
      break;
 80098e0:	bf00      	nop
 80098e2:	e006      	b.n	80098f2 <USBH_Process+0x3b6>
      break;
 80098e4:	bf00      	nop
 80098e6:	e004      	b.n	80098f2 <USBH_Process+0x3b6>
      break;
 80098e8:	bf00      	nop
 80098ea:	e002      	b.n	80098f2 <USBH_Process+0x3b6>
      break;
 80098ec:	bf00      	nop
 80098ee:	e000      	b.n	80098f2 <USBH_Process+0x3b6>
      break;
 80098f0:	bf00      	nop
  }
  return USBH_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af04      	add	r7, sp, #16
 8009902:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009904:	2301      	movs	r3, #1
 8009906:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009908:	2301      	movs	r3, #1
 800990a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	785b      	ldrb	r3, [r3, #1]
 8009910:	2b07      	cmp	r3, #7
 8009912:	f200 81c1 	bhi.w	8009c98 <USBH_HandleEnum+0x39c>
 8009916:	a201      	add	r2, pc, #4	; (adr r2, 800991c <USBH_HandleEnum+0x20>)
 8009918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991c:	0800993d 	.word	0x0800993d
 8009920:	080099fb 	.word	0x080099fb
 8009924:	08009a65 	.word	0x08009a65
 8009928:	08009af3 	.word	0x08009af3
 800992c:	08009b5d 	.word	0x08009b5d
 8009930:	08009bcd 	.word	0x08009bcd
 8009934:	08009c13 	.word	0x08009c13
 8009938:	08009c59 	.word	0x08009c59
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800993c:	2108      	movs	r1, #8
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fa50 	bl	8009de4 <USBH_Get_DevDesc>
 8009944:	4603      	mov	r3, r0
 8009946:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009948:	7bbb      	ldrb	r3, [r7, #14]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d130      	bne.n	80099b0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	7919      	ldrb	r1, [r3, #4]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800996e:	687a      	ldr	r2, [r7, #4]
 8009970:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009972:	b292      	uxth	r2, r2
 8009974:	9202      	str	r2, [sp, #8]
 8009976:	2200      	movs	r2, #0
 8009978:	9201      	str	r2, [sp, #4]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	4603      	mov	r3, r0
 800997e:	2280      	movs	r2, #128	; 0x80
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 ff77 	bl	800a874 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	7959      	ldrb	r1, [r3, #5]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800999a:	b292      	uxth	r2, r2
 800999c:	9202      	str	r2, [sp, #8]
 800999e:	2200      	movs	r2, #0
 80099a0:	9201      	str	r2, [sp, #4]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	4603      	mov	r3, r0
 80099a6:	2200      	movs	r2, #0
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 ff63 	bl	800a874 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80099ae:	e175      	b.n	8009c9c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80099b0:	7bbb      	ldrb	r3, [r7, #14]
 80099b2:	2b03      	cmp	r3, #3
 80099b4:	f040 8172 	bne.w	8009c9c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099be:	3301      	adds	r3, #1
 80099c0:	b2da      	uxtb	r2, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80099ce:	2b03      	cmp	r3, #3
 80099d0:	d903      	bls.n	80099da <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	220d      	movs	r2, #13
 80099d6:	701a      	strb	r2, [r3, #0]
      break;
 80099d8:	e160      	b.n	8009c9c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	795b      	ldrb	r3, [r3, #5]
 80099de:	4619      	mov	r1, r3
 80099e0:	6878      	ldr	r0, [r7, #4]
 80099e2:	f000 ff97 	bl	800a914 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	791b      	ldrb	r3, [r3, #4]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 ff91 	bl	800a914 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	701a      	strb	r2, [r3, #0]
      break;
 80099f8:	e150      	b.n	8009c9c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80099fa:	2112      	movs	r1, #18
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f9f1 	bl	8009de4 <USBH_Get_DevDesc>
 8009a02:	4603      	mov	r3, r0
 8009a04:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a06:	7bbb      	ldrb	r3, [r7, #14]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d103      	bne.n	8009a14 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2202      	movs	r2, #2
 8009a10:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009a12:	e145      	b.n	8009ca0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009a14:	7bbb      	ldrb	r3, [r7, #14]
 8009a16:	2b03      	cmp	r3, #3
 8009a18:	f040 8142 	bne.w	8009ca0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a22:	3301      	adds	r3, #1
 8009a24:	b2da      	uxtb	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d903      	bls.n	8009a3e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	220d      	movs	r2, #13
 8009a3a:	701a      	strb	r2, [r3, #0]
      break;
 8009a3c:	e130      	b.n	8009ca0 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	795b      	ldrb	r3, [r3, #5]
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 ff65 	bl	800a914 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	791b      	ldrb	r3, [r3, #4]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	f000 ff5f 	bl	800a914 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2200      	movs	r2, #0
 8009a5a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	2200      	movs	r2, #0
 8009a60:	701a      	strb	r2, [r3, #0]
      break;
 8009a62:	e11d      	b.n	8009ca0 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009a64:	2101      	movs	r1, #1
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 fa68 	bl	8009f3c <USBH_SetAddress>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a70:	7bbb      	ldrb	r3, [r7, #14]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d132      	bne.n	8009adc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009a76:	2002      	movs	r0, #2
 8009a78:	f001 fa42 	bl	800af00 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2201      	movs	r2, #1
 8009a80:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2203      	movs	r2, #3
 8009a88:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	7919      	ldrb	r1, [r3, #4]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009a9e:	b292      	uxth	r2, r2
 8009aa0:	9202      	str	r2, [sp, #8]
 8009aa2:	2200      	movs	r2, #0
 8009aa4:	9201      	str	r2, [sp, #4]
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2280      	movs	r2, #128	; 0x80
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fee1 	bl	800a874 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	7959      	ldrb	r1, [r3, #5]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ac6:	b292      	uxth	r2, r2
 8009ac8:	9202      	str	r2, [sp, #8]
 8009aca:	2200      	movs	r2, #0
 8009acc:	9201      	str	r2, [sp, #4]
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fecd 	bl	800a874 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ada:	e0e3      	b.n	8009ca4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009adc:	7bbb      	ldrb	r3, [r7, #14]
 8009ade:	2b03      	cmp	r3, #3
 8009ae0:	f040 80e0 	bne.w	8009ca4 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	220d      	movs	r2, #13
 8009ae8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	705a      	strb	r2, [r3, #1]
      break;
 8009af0:	e0d8      	b.n	8009ca4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009af2:	2109      	movs	r1, #9
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f000 f99d 	bl	8009e34 <USBH_Get_CfgDesc>
 8009afa:	4603      	mov	r3, r0
 8009afc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d103      	bne.n	8009b0c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2204      	movs	r2, #4
 8009b08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b0a:	e0cd      	b.n	8009ca8 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b03      	cmp	r3, #3
 8009b10:	f040 80ca 	bne.w	8009ca8 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	b2da      	uxtb	r2, r3
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b2a:	2b03      	cmp	r3, #3
 8009b2c:	d903      	bls.n	8009b36 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	220d      	movs	r2, #13
 8009b32:	701a      	strb	r2, [r3, #0]
      break;
 8009b34:	e0b8      	b.n	8009ca8 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	795b      	ldrb	r3, [r3, #5]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f000 fee9 	bl	800a914 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	791b      	ldrb	r3, [r3, #4]
 8009b46:	4619      	mov	r1, r3
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fee3 	bl	800a914 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2200      	movs	r2, #0
 8009b58:	701a      	strb	r2, [r3, #0]
      break;
 8009b5a:	e0a5      	b.n	8009ca8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f965 	bl	8009e34 <USBH_Get_CfgDesc>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d103      	bne.n	8009b7c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2205      	movs	r2, #5
 8009b78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b7a:	e097      	b.n	8009cac <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	f040 8094 	bne.w	8009cac <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d903      	bls.n	8009ba6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	220d      	movs	r2, #13
 8009ba2:	701a      	strb	r2, [r3, #0]
      break;
 8009ba4:	e082      	b.n	8009cac <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	795b      	ldrb	r3, [r3, #5]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 feb1 	bl	800a914 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	791b      	ldrb	r3, [r3, #4]
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 feab 	bl	800a914 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	701a      	strb	r2, [r3, #0]
      break;
 8009bca:	e06f      	b.n	8009cac <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d019      	beq.n	8009c0a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009be2:	23ff      	movs	r3, #255	; 0xff
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	f000 f949 	bl	8009e7c <USBH_Get_StringDesc>
 8009bea:	4603      	mov	r3, r0
 8009bec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009bee:	7bbb      	ldrb	r3, [r7, #14]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d103      	bne.n	8009bfc <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2206      	movs	r2, #6
 8009bf8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009bfa:	e059      	b.n	8009cb0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d156      	bne.n	8009cb0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2206      	movs	r2, #6
 8009c06:	705a      	strb	r2, [r3, #1]
      break;
 8009c08:	e052      	b.n	8009cb0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2206      	movs	r2, #6
 8009c0e:	705a      	strb	r2, [r3, #1]
      break;
 8009c10:	e04e      	b.n	8009cb0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d019      	beq.n	8009c50 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009c28:	23ff      	movs	r3, #255	; 0xff
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f926 	bl	8009e7c <USBH_Get_StringDesc>
 8009c30:	4603      	mov	r3, r0
 8009c32:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c34:	7bbb      	ldrb	r3, [r7, #14]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d103      	bne.n	8009c42 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2207      	movs	r2, #7
 8009c3e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8009c40:	e038      	b.n	8009cb4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c42:	7bbb      	ldrb	r3, [r7, #14]
 8009c44:	2b03      	cmp	r3, #3
 8009c46:	d135      	bne.n	8009cb4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2207      	movs	r2, #7
 8009c4c:	705a      	strb	r2, [r3, #1]
      break;
 8009c4e:	e031      	b.n	8009cb4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2207      	movs	r2, #7
 8009c54:	705a      	strb	r2, [r3, #1]
      break;
 8009c56:	e02d      	b.n	8009cb4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d017      	beq.n	8009c92 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009c6e:	23ff      	movs	r3, #255	; 0xff
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f903 	bl	8009e7c <USBH_Get_StringDesc>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d102      	bne.n	8009c86 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009c84:	e018      	b.n	8009cb8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
 8009c88:	2b03      	cmp	r3, #3
 8009c8a:	d115      	bne.n	8009cb8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c90:	e012      	b.n	8009cb8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]
      break;
 8009c96:	e00f      	b.n	8009cb8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009c98:	bf00      	nop
 8009c9a:	e00e      	b.n	8009cba <USBH_HandleEnum+0x3be>
      break;
 8009c9c:	bf00      	nop
 8009c9e:	e00c      	b.n	8009cba <USBH_HandleEnum+0x3be>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e00a      	b.n	8009cba <USBH_HandleEnum+0x3be>
      break;
 8009ca4:	bf00      	nop
 8009ca6:	e008      	b.n	8009cba <USBH_HandleEnum+0x3be>
      break;
 8009ca8:	bf00      	nop
 8009caa:	e006      	b.n	8009cba <USBH_HandleEnum+0x3be>
      break;
 8009cac:	bf00      	nop
 8009cae:	e004      	b.n	8009cba <USBH_HandleEnum+0x3be>
      break;
 8009cb0:	bf00      	nop
 8009cb2:	e002      	b.n	8009cba <USBH_HandleEnum+0x3be>
      break;
 8009cb4:	bf00      	nop
 8009cb6:	e000      	b.n	8009cba <USBH_HandleEnum+0x3be>
      break;
 8009cb8:	bf00      	nop
  }
  return Status;
 8009cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3710      	adds	r7, #16
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}

08009cc4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009cc4:	b480      	push	{r7}
 8009cc6:	b083      	sub	sp, #12
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
 8009ccc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	683a      	ldr	r2, [r7, #0]
 8009cd2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009cd6:	bf00      	nop
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr

08009ce2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b082      	sub	sp, #8
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009cf0:	1c5a      	adds	r2, r3, #1
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f804 	bl	8009d06 <USBH_HandleSof>
}
 8009cfe:	bf00      	nop
 8009d00:	3708      	adds	r7, #8
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}

08009d06 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b082      	sub	sp, #8
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b0b      	cmp	r3, #11
 8009d16:	d10a      	bne.n	8009d2e <USBH_HandleSof+0x28>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d005      	beq.n	8009d2e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d28:	699b      	ldr	r3, [r3, #24]
 8009d2a:	6878      	ldr	r0, [r7, #4]
 8009d2c:	4798      	blx	r3
  }
}
 8009d2e:	bf00      	nop
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	2201      	movs	r2, #1
 8009d42:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8009d46:	bf00      	nop
}
 8009d48:	370c      	adds	r7, #12
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr

08009d52 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009d52:	b480      	push	{r7}
 8009d54:	b083      	sub	sp, #12
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009d62:	bf00      	nop
}
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6c:	4770      	bx	lr

08009d6e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009d6e:	b480      	push	{r7}
 8009d70:	b083      	sub	sp, #12
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009d8e:	2300      	movs	r3, #0
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b082      	sub	sp, #8
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 ff56 	bl	800ac6e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	791b      	ldrb	r3, [r3, #4]
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 fda3 	bl	800a914 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	795b      	ldrb	r3, [r3, #5]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 fd9d 	bl	800a914 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3708      	adds	r7, #8
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b086      	sub	sp, #24
 8009de8:	af02      	add	r7, sp, #8
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009df6:	78fb      	ldrb	r3, [r7, #3]
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	4613      	mov	r3, r2
 8009dfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e02:	2100      	movs	r1, #0
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f864 	bl	8009ed2 <USBH_GetDescriptor>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	73fb      	strb	r3, [r7, #15]
 8009e0e:	7bfb      	ldrb	r3, [r7, #15]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10a      	bne.n	8009e2a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009e20:	78fa      	ldrb	r2, [r7, #3]
 8009e22:	b292      	uxth	r2, r2
 8009e24:	4619      	mov	r1, r3
 8009e26:	f000 f918 	bl	800a05a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af02      	add	r7, sp, #8
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	331c      	adds	r3, #28
 8009e44:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009e46:	887b      	ldrh	r3, [r7, #2]
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009e50:	2100      	movs	r1, #0
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f83d 	bl	8009ed2 <USBH_GetDescriptor>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	72fb      	strb	r3, [r7, #11]
 8009e5c:	7afb      	ldrb	r3, [r7, #11]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d107      	bne.n	8009e72 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8009e68:	887a      	ldrh	r2, [r7, #2]
 8009e6a:	68f9      	ldr	r1, [r7, #12]
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	f000 f964 	bl	800a13a <USBH_ParseCfgDesc>
  }

  return status;
 8009e72:	7afb      	ldrb	r3, [r7, #11]
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}

08009e7c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b088      	sub	sp, #32
 8009e80:	af02      	add	r7, sp, #8
 8009e82:	60f8      	str	r0, [r7, #12]
 8009e84:	607a      	str	r2, [r7, #4]
 8009e86:	461a      	mov	r2, r3
 8009e88:	460b      	mov	r3, r1
 8009e8a:	72fb      	strb	r3, [r7, #11]
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	b29b      	uxth	r3, r3
 8009e94:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e98:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8009ea0:	893b      	ldrh	r3, [r7, #8]
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	2100      	movs	r1, #0
 8009ea8:	68f8      	ldr	r0, [r7, #12]
 8009eaa:	f000 f812 	bl	8009ed2 <USBH_GetDescriptor>
 8009eae:	4603      	mov	r3, r0
 8009eb0:	75fb      	strb	r3, [r7, #23]
 8009eb2:	7dfb      	ldrb	r3, [r7, #23]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d107      	bne.n	8009ec8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009ebe:	893a      	ldrh	r2, [r7, #8]
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 fa37 	bl	800a336 <USBH_ParseStringDesc>
  }

  return status;
 8009ec8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3718      	adds	r7, #24
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b084      	sub	sp, #16
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	60f8      	str	r0, [r7, #12]
 8009eda:	607b      	str	r3, [r7, #4]
 8009edc:	460b      	mov	r3, r1
 8009ede:	72fb      	strb	r3, [r7, #11]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	789b      	ldrb	r3, [r3, #2]
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d11c      	bne.n	8009f26 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2206      	movs	r2, #6
 8009efc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	893a      	ldrh	r2, [r7, #8]
 8009f02:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009f04:	893b      	ldrh	r3, [r7, #8]
 8009f06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009f0e:	d104      	bne.n	8009f1a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	f240 4209 	movw	r2, #1033	; 0x409
 8009f16:	829a      	strh	r2, [r3, #20]
 8009f18:	e002      	b.n	8009f20 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	8b3a      	ldrh	r2, [r7, #24]
 8009f24:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009f26:	8b3b      	ldrh	r3, [r7, #24]
 8009f28:	461a      	mov	r2, r3
 8009f2a:	6879      	ldr	r1, [r7, #4]
 8009f2c:	68f8      	ldr	r0, [r7, #12]
 8009f2e:	f000 fa50 	bl	800a3d2 <USBH_CtlReq>
 8009f32:	4603      	mov	r3, r0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3710      	adds	r7, #16
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	460b      	mov	r3, r1
 8009f46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	789b      	ldrb	r3, [r3, #2]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d10f      	bne.n	8009f70 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2200      	movs	r2, #0
 8009f54:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2205      	movs	r2, #5
 8009f5a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009f5c:	78fb      	ldrb	r3, [r7, #3]
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009f70:	2200      	movs	r2, #0
 8009f72:	2100      	movs	r1, #0
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 fa2c 	bl	800a3d2 <USBH_CtlReq>
 8009f7a:	4603      	mov	r3, r0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3708      	adds	r7, #8
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	789b      	ldrb	r3, [r3, #2]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d10e      	bne.n	8009fb6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2209      	movs	r2, #9
 8009fa2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	887a      	ldrh	r2, [r7, #2]
 8009fa8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	2100      	movs	r1, #0
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fa09 	bl	800a3d2 <USBH_CtlReq>
 8009fc0:	4603      	mov	r3, r0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3708      	adds	r7, #8
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b082      	sub	sp, #8
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	789b      	ldrb	r3, [r3, #2]
 8009fda:	2b01      	cmp	r3, #1
 8009fdc:	d10f      	bne.n	8009ffe <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2203      	movs	r2, #3
 8009fe8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009fea:	78fb      	ldrb	r3, [r7, #3]
 8009fec:	b29a      	uxth	r2, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8009ffe:	2200      	movs	r2, #0
 800a000:	2100      	movs	r1, #0
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f000 f9e5 	bl	800a3d2 <USBH_CtlReq>
 800a008:	4603      	mov	r3, r0
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3708      	adds	r7, #8
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}

0800a012 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a012:	b580      	push	{r7, lr}
 800a014:	b082      	sub	sp, #8
 800a016:	af00      	add	r7, sp, #0
 800a018:	6078      	str	r0, [r7, #4]
 800a01a:	460b      	mov	r3, r1
 800a01c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	789b      	ldrb	r3, [r3, #2]
 800a022:	2b01      	cmp	r3, #1
 800a024:	d10f      	bne.n	800a046 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2202      	movs	r2, #2
 800a02a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2201      	movs	r2, #1
 800a030:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2200      	movs	r2, #0
 800a036:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800a046:	2200      	movs	r2, #0
 800a048:	2100      	movs	r1, #0
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 f9c1 	bl	800a3d2 <USBH_CtlReq>
 800a050:	4603      	mov	r3, r0
}
 800a052:	4618      	mov	r0, r3
 800a054:	3708      	adds	r7, #8
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}

0800a05a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a05a:	b480      	push	{r7}
 800a05c:	b085      	sub	sp, #20
 800a05e:	af00      	add	r7, sp, #0
 800a060:	60f8      	str	r0, [r7, #12]
 800a062:	60b9      	str	r1, [r7, #8]
 800a064:	4613      	mov	r3, r2
 800a066:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	781a      	ldrb	r2, [r3, #0]
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	785a      	ldrb	r2, [r3, #1]
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	3302      	adds	r3, #2
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	b29a      	uxth	r2, r3
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	3303      	adds	r3, #3
 800a084:	781b      	ldrb	r3, [r3, #0]
 800a086:	b29b      	uxth	r3, r3
 800a088:	021b      	lsls	r3, r3, #8
 800a08a:	b29b      	uxth	r3, r3
 800a08c:	4313      	orrs	r3, r2
 800a08e:	b29a      	uxth	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	791a      	ldrb	r2, [r3, #4]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	795a      	ldrb	r2, [r3, #5]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	799a      	ldrb	r2, [r3, #6]
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	79da      	ldrb	r2, [r3, #7]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800a0b4:	88fb      	ldrh	r3, [r7, #6]
 800a0b6:	2b08      	cmp	r3, #8
 800a0b8:	d939      	bls.n	800a12e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a0ba:	68bb      	ldr	r3, [r7, #8]
 800a0bc:	3308      	adds	r3, #8
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	b29a      	uxth	r2, r3
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	3309      	adds	r3, #9
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	b29b      	uxth	r3, r3
 800a0ca:	021b      	lsls	r3, r3, #8
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	4313      	orrs	r3, r2
 800a0d0:	b29a      	uxth	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	330a      	adds	r3, #10
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	b29a      	uxth	r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	330b      	adds	r3, #11
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	b29b      	uxth	r3, r3
 800a0e6:	021b      	lsls	r3, r3, #8
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a0f2:	68bb      	ldr	r3, [r7, #8]
 800a0f4:	330c      	adds	r3, #12
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	330d      	adds	r3, #13
 800a0fe:	781b      	ldrb	r3, [r3, #0]
 800a100:	b29b      	uxth	r3, r3
 800a102:	021b      	lsls	r3, r3, #8
 800a104:	b29b      	uxth	r3, r3
 800a106:	4313      	orrs	r3, r2
 800a108:	b29a      	uxth	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	7b9a      	ldrb	r2, [r3, #14]
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	7bda      	ldrb	r2, [r3, #15]
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	7c1a      	ldrb	r2, [r3, #16]
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	7c5a      	ldrb	r2, [r3, #17]
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	745a      	strb	r2, [r3, #17]
  }
}
 800a12e:	bf00      	nop
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b08a      	sub	sp, #40	; 0x28
 800a13e:	af00      	add	r7, sp, #0
 800a140:	60f8      	str	r0, [r7, #12]
 800a142:	60b9      	str	r1, [r7, #8]
 800a144:	4613      	mov	r3, r2
 800a146:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a14c:	2300      	movs	r3, #0
 800a14e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	781a      	ldrb	r2, [r3, #0]
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	785a      	ldrb	r2, [r3, #1]
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	3302      	adds	r3, #2
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	b29a      	uxth	r2, r3
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	3303      	adds	r3, #3
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	021b      	lsls	r3, r3, #8
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4313      	orrs	r3, r2
 800a182:	b29a      	uxth	r2, r3
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	791a      	ldrb	r2, [r3, #4]
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	795a      	ldrb	r2, [r3, #5]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	799a      	ldrb	r2, [r3, #6]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	79da      	ldrb	r2, [r3, #7]
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	7a1a      	ldrb	r2, [r3, #8]
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a1b0:	88fb      	ldrh	r3, [r7, #6]
 800a1b2:	2b09      	cmp	r3, #9
 800a1b4:	d95f      	bls.n	800a276 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800a1b6:	2309      	movs	r3, #9
 800a1b8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a1be:	e051      	b.n	800a264 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a1c0:	f107 0316 	add.w	r3, r7, #22
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a1c8:	f000 f8e8 	bl	800a39c <USBH_GetNextDesc>
 800a1cc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	785b      	ldrb	r3, [r3, #1]
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	d146      	bne.n	800a264 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800a1d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a1da:	221a      	movs	r2, #26
 800a1dc:	fb02 f303 	mul.w	r3, r2, r3
 800a1e0:	3308      	adds	r3, #8
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	3302      	adds	r3, #2
 800a1e8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a1ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a1ec:	69f8      	ldr	r0, [r7, #28]
 800a1ee:	f000 f846 	bl	800a27e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a1fc:	e022      	b.n	800a244 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a1fe:	f107 0316 	add.w	r3, r7, #22
 800a202:	4619      	mov	r1, r3
 800a204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a206:	f000 f8c9 	bl	800a39c <USBH_GetNextDesc>
 800a20a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800a20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20e:	785b      	ldrb	r3, [r3, #1]
 800a210:	2b05      	cmp	r3, #5
 800a212:	d117      	bne.n	800a244 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a218:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a21c:	3201      	adds	r2, #1
 800a21e:	00d2      	lsls	r2, r2, #3
 800a220:	211a      	movs	r1, #26
 800a222:	fb01 f303 	mul.w	r3, r1, r3
 800a226:	4413      	add	r3, r2
 800a228:	3308      	adds	r3, #8
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	4413      	add	r3, r2
 800a22e:	3304      	adds	r3, #4
 800a230:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800a232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a234:	69b8      	ldr	r0, [r7, #24]
 800a236:	f000 f851 	bl	800a2dc <USBH_ParseEPDesc>
            ep_ix++;
 800a23a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a23e:	3301      	adds	r3, #1
 800a240:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a244:	69fb      	ldr	r3, [r7, #28]
 800a246:	791b      	ldrb	r3, [r3, #4]
 800a248:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d204      	bcs.n	800a25a <USBH_ParseCfgDesc+0x120>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	885a      	ldrh	r2, [r3, #2]
 800a254:	8afb      	ldrh	r3, [r7, #22]
 800a256:	429a      	cmp	r2, r3
 800a258:	d8d1      	bhi.n	800a1fe <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800a25a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a25e:	3301      	adds	r3, #1
 800a260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a264:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d804      	bhi.n	800a276 <USBH_ParseCfgDesc+0x13c>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	885a      	ldrh	r2, [r3, #2]
 800a270:	8afb      	ldrh	r3, [r7, #22]
 800a272:	429a      	cmp	r2, r3
 800a274:	d8a4      	bhi.n	800a1c0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800a276:	bf00      	nop
 800a278:	3728      	adds	r7, #40	; 0x28
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a27e:	b480      	push	{r7}
 800a280:	b083      	sub	sp, #12
 800a282:	af00      	add	r7, sp, #0
 800a284:	6078      	str	r0, [r7, #4]
 800a286:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	781a      	ldrb	r2, [r3, #0]
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	785a      	ldrb	r2, [r3, #1]
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	789a      	ldrb	r2, [r3, #2]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	78da      	ldrb	r2, [r3, #3]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	791a      	ldrb	r2, [r3, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	795a      	ldrb	r2, [r3, #5]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	799a      	ldrb	r2, [r3, #6]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	79da      	ldrb	r2, [r3, #7]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	7a1a      	ldrb	r2, [r3, #8]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	721a      	strb	r2, [r3, #8]
}
 800a2d0:	bf00      	nop
 800a2d2:	370c      	adds	r7, #12
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b083      	sub	sp, #12
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781a      	ldrb	r2, [r3, #0]
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	785a      	ldrb	r2, [r3, #1]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	789a      	ldrb	r2, [r3, #2]
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	78da      	ldrb	r2, [r3, #3]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	3304      	adds	r3, #4
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	3305      	adds	r3, #5
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	b29b      	uxth	r3, r3
 800a316:	021b      	lsls	r3, r3, #8
 800a318:	b29b      	uxth	r3, r3
 800a31a:	4313      	orrs	r3, r2
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	799a      	ldrb	r2, [r3, #6]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	719a      	strb	r2, [r3, #6]
}
 800a32a:	bf00      	nop
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a336:	b480      	push	{r7}
 800a338:	b087      	sub	sp, #28
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	60f8      	str	r0, [r7, #12]
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	4613      	mov	r3, r2
 800a342:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	3301      	adds	r3, #1
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	d120      	bne.n	800a390 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	1e9a      	subs	r2, r3, #2
 800a354:	88fb      	ldrh	r3, [r7, #6]
 800a356:	4293      	cmp	r3, r2
 800a358:	bf28      	it	cs
 800a35a:	4613      	movcs	r3, r2
 800a35c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	3302      	adds	r3, #2
 800a362:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a364:	2300      	movs	r3, #0
 800a366:	82fb      	strh	r3, [r7, #22]
 800a368:	e00b      	b.n	800a382 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a36a:	8afb      	ldrh	r3, [r7, #22]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	4413      	add	r3, r2
 800a370:	781a      	ldrb	r2, [r3, #0]
 800a372:	68bb      	ldr	r3, [r7, #8]
 800a374:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	3301      	adds	r3, #1
 800a37a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a37c:	8afb      	ldrh	r3, [r7, #22]
 800a37e:	3302      	adds	r3, #2
 800a380:	82fb      	strh	r3, [r7, #22]
 800a382:	8afa      	ldrh	r2, [r7, #22]
 800a384:	8abb      	ldrh	r3, [r7, #20]
 800a386:	429a      	cmp	r2, r3
 800a388:	d3ef      	bcc.n	800a36a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2200      	movs	r2, #0
 800a38e:	701a      	strb	r2, [r3, #0]
  }
}
 800a390:	bf00      	nop
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b085      	sub	sp, #20
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	881a      	ldrh	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	781b      	ldrb	r3, [r3, #0]
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	4413      	add	r3, r2
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	781b      	ldrb	r3, [r3, #0]
 800a3bc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b086      	sub	sp, #24
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	60f8      	str	r0, [r7, #12]
 800a3da:	60b9      	str	r1, [r7, #8]
 800a3dc:	4613      	mov	r3, r2
 800a3de:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	789b      	ldrb	r3, [r3, #2]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d002      	beq.n	800a3f2 <USBH_CtlReq+0x20>
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d00f      	beq.n	800a410 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a3f0:	e027      	b.n	800a442 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	68ba      	ldr	r2, [r7, #8]
 800a3f6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	88fa      	ldrh	r2, [r7, #6]
 800a3fc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2201      	movs	r2, #1
 800a402:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	2202      	movs	r2, #2
 800a408:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a40a:	2301      	movs	r3, #1
 800a40c:	75fb      	strb	r3, [r7, #23]
      break;
 800a40e:	e018      	b.n	800a442 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a410:	68f8      	ldr	r0, [r7, #12]
 800a412:	f000 f81b 	bl	800a44c <USBH_HandleControl>
 800a416:	4603      	mov	r3, r0
 800a418:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a41a:	7dfb      	ldrb	r3, [r7, #23]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <USBH_CtlReq+0x54>
 800a420:	7dfb      	ldrb	r3, [r7, #23]
 800a422:	2b03      	cmp	r3, #3
 800a424:	d106      	bne.n	800a434 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2201      	movs	r2, #1
 800a42a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2200      	movs	r2, #0
 800a430:	761a      	strb	r2, [r3, #24]
      break;
 800a432:	e005      	b.n	800a440 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a434:	7dfb      	ldrb	r3, [r7, #23]
 800a436:	2b02      	cmp	r3, #2
 800a438:	d102      	bne.n	800a440 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2201      	movs	r2, #1
 800a43e:	709a      	strb	r2, [r3, #2]
      break;
 800a440:	bf00      	nop
  }
  return status;
 800a442:	7dfb      	ldrb	r3, [r7, #23]
}
 800a444:	4618      	mov	r0, r3
 800a446:	3718      	adds	r7, #24
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b086      	sub	sp, #24
 800a450:	af02      	add	r7, sp, #8
 800a452:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a454:	2301      	movs	r3, #1
 800a456:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a458:	2300      	movs	r3, #0
 800a45a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	7e1b      	ldrb	r3, [r3, #24]
 800a460:	3b01      	subs	r3, #1
 800a462:	2b0a      	cmp	r3, #10
 800a464:	f200 8156 	bhi.w	800a714 <USBH_HandleControl+0x2c8>
 800a468:	a201      	add	r2, pc, #4	; (adr r2, 800a470 <USBH_HandleControl+0x24>)
 800a46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a46e:	bf00      	nop
 800a470:	0800a49d 	.word	0x0800a49d
 800a474:	0800a4b7 	.word	0x0800a4b7
 800a478:	0800a521 	.word	0x0800a521
 800a47c:	0800a547 	.word	0x0800a547
 800a480:	0800a57f 	.word	0x0800a57f
 800a484:	0800a5a9 	.word	0x0800a5a9
 800a488:	0800a5fb 	.word	0x0800a5fb
 800a48c:	0800a61d 	.word	0x0800a61d
 800a490:	0800a659 	.word	0x0800a659
 800a494:	0800a67f 	.word	0x0800a67f
 800a498:	0800a6bd 	.word	0x0800a6bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f103 0110 	add.w	r1, r3, #16
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	795b      	ldrb	r3, [r3, #5]
 800a4a6:	461a      	mov	r2, r3
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 f943 	bl	800a734 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2202      	movs	r2, #2
 800a4b2:	761a      	strb	r2, [r3, #24]
      break;
 800a4b4:	e139      	b.n	800a72a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	795b      	ldrb	r3, [r3, #5]
 800a4ba:	4619      	mov	r1, r3
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fcc5 	bl	800ae4c <USBH_LL_GetURBState>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a4c6:	7bbb      	ldrb	r3, [r7, #14]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d11e      	bne.n	800a50a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	7c1b      	ldrb	r3, [r3, #16]
 800a4d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a4d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	8adb      	ldrh	r3, [r3, #22]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a4de:	7b7b      	ldrb	r3, [r7, #13]
 800a4e0:	2b80      	cmp	r3, #128	; 0x80
 800a4e2:	d103      	bne.n	800a4ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2203      	movs	r2, #3
 800a4e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a4ea:	e115      	b.n	800a718 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	2205      	movs	r2, #5
 800a4f0:	761a      	strb	r2, [r3, #24]
      break;
 800a4f2:	e111      	b.n	800a718 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a4f4:	7b7b      	ldrb	r3, [r7, #13]
 800a4f6:	2b80      	cmp	r3, #128	; 0x80
 800a4f8:	d103      	bne.n	800a502 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2209      	movs	r2, #9
 800a4fe:	761a      	strb	r2, [r3, #24]
      break;
 800a500:	e10a      	b.n	800a718 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2207      	movs	r2, #7
 800a506:	761a      	strb	r2, [r3, #24]
      break;
 800a508:	e106      	b.n	800a718 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a50a:	7bbb      	ldrb	r3, [r7, #14]
 800a50c:	2b04      	cmp	r3, #4
 800a50e:	d003      	beq.n	800a518 <USBH_HandleControl+0xcc>
 800a510:	7bbb      	ldrb	r3, [r7, #14]
 800a512:	2b02      	cmp	r3, #2
 800a514:	f040 8100 	bne.w	800a718 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	220b      	movs	r2, #11
 800a51c:	761a      	strb	r2, [r3, #24]
      break;
 800a51e:	e0fb      	b.n	800a718 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a526:	b29a      	uxth	r2, r3
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6899      	ldr	r1, [r3, #8]
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	899a      	ldrh	r2, [r3, #12]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	791b      	ldrb	r3, [r3, #4]
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f000 f93a 	bl	800a7b2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2204      	movs	r2, #4
 800a542:	761a      	strb	r2, [r3, #24]
      break;
 800a544:	e0f1      	b.n	800a72a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	791b      	ldrb	r3, [r3, #4]
 800a54a:	4619      	mov	r1, r3
 800a54c:	6878      	ldr	r0, [r7, #4]
 800a54e:	f000 fc7d 	bl	800ae4c <USBH_LL_GetURBState>
 800a552:	4603      	mov	r3, r0
 800a554:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a556:	7bbb      	ldrb	r3, [r7, #14]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d102      	bne.n	800a562 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2209      	movs	r2, #9
 800a560:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a562:	7bbb      	ldrb	r3, [r7, #14]
 800a564:	2b05      	cmp	r3, #5
 800a566:	d102      	bne.n	800a56e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a568:	2303      	movs	r3, #3
 800a56a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a56c:	e0d6      	b.n	800a71c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a56e:	7bbb      	ldrb	r3, [r7, #14]
 800a570:	2b04      	cmp	r3, #4
 800a572:	f040 80d3 	bne.w	800a71c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	220b      	movs	r2, #11
 800a57a:	761a      	strb	r2, [r3, #24]
      break;
 800a57c:	e0ce      	b.n	800a71c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6899      	ldr	r1, [r3, #8]
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	899a      	ldrh	r2, [r3, #12]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	795b      	ldrb	r3, [r3, #5]
 800a58a:	2001      	movs	r0, #1
 800a58c:	9000      	str	r0, [sp, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 f8ea 	bl	800a768 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	2206      	movs	r2, #6
 800a5a4:	761a      	strb	r2, [r3, #24]
      break;
 800a5a6:	e0c0      	b.n	800a72a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	795b      	ldrb	r3, [r3, #5]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 fc4c 	bl	800ae4c <USBH_LL_GetURBState>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a5b8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d103      	bne.n	800a5c6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2207      	movs	r2, #7
 800a5c2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a5c4:	e0ac      	b.n	800a720 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a5c6:	7bbb      	ldrb	r3, [r7, #14]
 800a5c8:	2b05      	cmp	r3, #5
 800a5ca:	d105      	bne.n	800a5d8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	220c      	movs	r2, #12
 800a5d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d6:	e0a3      	b.n	800a720 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d103      	bne.n	800a5e6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2205      	movs	r2, #5
 800a5e2:	761a      	strb	r2, [r3, #24]
      break;
 800a5e4:	e09c      	b.n	800a720 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
 800a5e8:	2b04      	cmp	r3, #4
 800a5ea:	f040 8099 	bne.w	800a720 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	220b      	movs	r2, #11
 800a5f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f8:	e092      	b.n	800a720 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	791b      	ldrb	r3, [r3, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	2100      	movs	r1, #0
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f000 f8d5 	bl	800a7b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a60e:	b29a      	uxth	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2208      	movs	r2, #8
 800a618:	761a      	strb	r2, [r3, #24]

      break;
 800a61a:	e086      	b.n	800a72a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	791b      	ldrb	r3, [r3, #4]
 800a620:	4619      	mov	r1, r3
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 fc12 	bl	800ae4c <USBH_LL_GetURBState>
 800a628:	4603      	mov	r3, r0
 800a62a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	2b01      	cmp	r3, #1
 800a630:	d105      	bne.n	800a63e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	220d      	movs	r2, #13
 800a636:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a63c:	e072      	b.n	800a724 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
 800a640:	2b04      	cmp	r3, #4
 800a642:	d103      	bne.n	800a64c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	220b      	movs	r2, #11
 800a648:	761a      	strb	r2, [r3, #24]
      break;
 800a64a:	e06b      	b.n	800a724 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a64c:	7bbb      	ldrb	r3, [r7, #14]
 800a64e:	2b05      	cmp	r3, #5
 800a650:	d168      	bne.n	800a724 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a652:	2303      	movs	r3, #3
 800a654:	73fb      	strb	r3, [r7, #15]
      break;
 800a656:	e065      	b.n	800a724 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	795b      	ldrb	r3, [r3, #5]
 800a65c:	2201      	movs	r2, #1
 800a65e:	9200      	str	r2, [sp, #0]
 800a660:	2200      	movs	r2, #0
 800a662:	2100      	movs	r1, #0
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 f87f 	bl	800a768 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a670:	b29a      	uxth	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	220a      	movs	r2, #10
 800a67a:	761a      	strb	r2, [r3, #24]
      break;
 800a67c:	e055      	b.n	800a72a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	795b      	ldrb	r3, [r3, #5]
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fbe1 	bl	800ae4c <USBH_LL_GetURBState>
 800a68a:	4603      	mov	r3, r0
 800a68c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a68e:	7bbb      	ldrb	r3, [r7, #14]
 800a690:	2b01      	cmp	r3, #1
 800a692:	d105      	bne.n	800a6a0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a694:	2300      	movs	r3, #0
 800a696:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	220d      	movs	r2, #13
 800a69c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800a69e:	e043      	b.n	800a728 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
 800a6a2:	2b02      	cmp	r3, #2
 800a6a4:	d103      	bne.n	800a6ae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2209      	movs	r2, #9
 800a6aa:	761a      	strb	r2, [r3, #24]
      break;
 800a6ac:	e03c      	b.n	800a728 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a6ae:	7bbb      	ldrb	r3, [r7, #14]
 800a6b0:	2b04      	cmp	r3, #4
 800a6b2:	d139      	bne.n	800a728 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	220b      	movs	r2, #11
 800a6b8:	761a      	strb	r2, [r3, #24]
      break;
 800a6ba:	e035      	b.n	800a728 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	7e5b      	ldrb	r3, [r3, #25]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	b2da      	uxtb	r2, r3
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	765a      	strb	r2, [r3, #25]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	7e5b      	ldrb	r3, [r3, #25]
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d806      	bhi.n	800a6de <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a6dc:	e025      	b.n	800a72a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6e4:	2106      	movs	r1, #6
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	795b      	ldrb	r3, [r3, #5]
 800a6f4:	4619      	mov	r1, r3
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 f90c 	bl	800a914 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	791b      	ldrb	r3, [r3, #4]
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f906 	bl	800a914 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a70e:	2302      	movs	r3, #2
 800a710:	73fb      	strb	r3, [r7, #15]
      break;
 800a712:	e00a      	b.n	800a72a <USBH_HandleControl+0x2de>

    default:
      break;
 800a714:	bf00      	nop
 800a716:	e008      	b.n	800a72a <USBH_HandleControl+0x2de>
      break;
 800a718:	bf00      	nop
 800a71a:	e006      	b.n	800a72a <USBH_HandleControl+0x2de>
      break;
 800a71c:	bf00      	nop
 800a71e:	e004      	b.n	800a72a <USBH_HandleControl+0x2de>
      break;
 800a720:	bf00      	nop
 800a722:	e002      	b.n	800a72a <USBH_HandleControl+0x2de>
      break;
 800a724:	bf00      	nop
 800a726:	e000      	b.n	800a72a <USBH_HandleControl+0x2de>
      break;
 800a728:	bf00      	nop
  }

  return status;
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	3710      	adds	r7, #16
 800a730:	46bd      	mov	sp, r7
 800a732:	bd80      	pop	{r7, pc}

0800a734 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b088      	sub	sp, #32
 800a738:	af04      	add	r7, sp, #16
 800a73a:	60f8      	str	r0, [r7, #12]
 800a73c:	60b9      	str	r1, [r7, #8]
 800a73e:	4613      	mov	r3, r2
 800a740:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a742:	79f9      	ldrb	r1, [r7, #7]
 800a744:	2300      	movs	r3, #0
 800a746:	9303      	str	r3, [sp, #12]
 800a748:	2308      	movs	r3, #8
 800a74a:	9302      	str	r3, [sp, #8]
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	9301      	str	r3, [sp, #4]
 800a750:	2300      	movs	r3, #0
 800a752:	9300      	str	r3, [sp, #0]
 800a754:	2300      	movs	r3, #0
 800a756:	2200      	movs	r2, #0
 800a758:	68f8      	ldr	r0, [r7, #12]
 800a75a:	f000 fb46 	bl	800adea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800a75e:	2300      	movs	r3, #0
}
 800a760:	4618      	mov	r0, r3
 800a762:	3710      	adds	r7, #16
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af04      	add	r7, sp, #16
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	4611      	mov	r1, r2
 800a774:	461a      	mov	r2, r3
 800a776:	460b      	mov	r3, r1
 800a778:	80fb      	strh	r3, [r7, #6]
 800a77a:	4613      	mov	r3, r2
 800a77c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a784:	2b00      	cmp	r3, #0
 800a786:	d001      	beq.n	800a78c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a788:	2300      	movs	r3, #0
 800a78a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a78c:	7979      	ldrb	r1, [r7, #5]
 800a78e:	7e3b      	ldrb	r3, [r7, #24]
 800a790:	9303      	str	r3, [sp, #12]
 800a792:	88fb      	ldrh	r3, [r7, #6]
 800a794:	9302      	str	r3, [sp, #8]
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	9301      	str	r3, [sp, #4]
 800a79a:	2301      	movs	r3, #1
 800a79c:	9300      	str	r3, [sp, #0]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 fb21 	bl	800adea <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3710      	adds	r7, #16
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b088      	sub	sp, #32
 800a7b6:	af04      	add	r7, sp, #16
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	4611      	mov	r1, r2
 800a7be:	461a      	mov	r2, r3
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	80fb      	strh	r3, [r7, #6]
 800a7c4:	4613      	mov	r3, r2
 800a7c6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a7c8:	7979      	ldrb	r1, [r7, #5]
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	9303      	str	r3, [sp, #12]
 800a7ce:	88fb      	ldrh	r3, [r7, #6]
 800a7d0:	9302      	str	r3, [sp, #8]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	9300      	str	r3, [sp, #0]
 800a7da:	2300      	movs	r3, #0
 800a7dc:	2201      	movs	r2, #1
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 fb03 	bl	800adea <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a7e4:	2300      	movs	r3, #0

}
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	3710      	adds	r7, #16
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b088      	sub	sp, #32
 800a7f2:	af04      	add	r7, sp, #16
 800a7f4:	60f8      	str	r0, [r7, #12]
 800a7f6:	60b9      	str	r1, [r7, #8]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	80fb      	strh	r3, [r7, #6]
 800a800:	4613      	mov	r3, r2
 800a802:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a80e:	2300      	movs	r3, #0
 800a810:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a812:	7979      	ldrb	r1, [r7, #5]
 800a814:	7e3b      	ldrb	r3, [r7, #24]
 800a816:	9303      	str	r3, [sp, #12]
 800a818:	88fb      	ldrh	r3, [r7, #6]
 800a81a:	9302      	str	r3, [sp, #8]
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	9301      	str	r3, [sp, #4]
 800a820:	2301      	movs	r3, #1
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	2302      	movs	r3, #2
 800a826:	2200      	movs	r2, #0
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 fade 	bl	800adea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a82e:	2300      	movs	r3, #0
}
 800a830:	4618      	mov	r0, r3
 800a832:	3710      	adds	r7, #16
 800a834:	46bd      	mov	sp, r7
 800a836:	bd80      	pop	{r7, pc}

0800a838 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b088      	sub	sp, #32
 800a83c:	af04      	add	r7, sp, #16
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	4611      	mov	r1, r2
 800a844:	461a      	mov	r2, r3
 800a846:	460b      	mov	r3, r1
 800a848:	80fb      	strh	r3, [r7, #6]
 800a84a:	4613      	mov	r3, r2
 800a84c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800a84e:	7979      	ldrb	r1, [r7, #5]
 800a850:	2300      	movs	r3, #0
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	88fb      	ldrh	r3, [r7, #6]
 800a856:	9302      	str	r3, [sp, #8]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	9301      	str	r3, [sp, #4]
 800a85c:	2301      	movs	r3, #1
 800a85e:	9300      	str	r3, [sp, #0]
 800a860:	2302      	movs	r3, #2
 800a862:	2201      	movs	r2, #1
 800a864:	68f8      	ldr	r0, [r7, #12]
 800a866:	f000 fac0 	bl	800adea <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b086      	sub	sp, #24
 800a878:	af04      	add	r7, sp, #16
 800a87a:	6078      	str	r0, [r7, #4]
 800a87c:	4608      	mov	r0, r1
 800a87e:	4611      	mov	r1, r2
 800a880:	461a      	mov	r2, r3
 800a882:	4603      	mov	r3, r0
 800a884:	70fb      	strb	r3, [r7, #3]
 800a886:	460b      	mov	r3, r1
 800a888:	70bb      	strb	r3, [r7, #2]
 800a88a:	4613      	mov	r3, r2
 800a88c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a88e:	7878      	ldrb	r0, [r7, #1]
 800a890:	78ba      	ldrb	r2, [r7, #2]
 800a892:	78f9      	ldrb	r1, [r7, #3]
 800a894:	8b3b      	ldrh	r3, [r7, #24]
 800a896:	9302      	str	r3, [sp, #8]
 800a898:	7d3b      	ldrb	r3, [r7, #20]
 800a89a:	9301      	str	r3, [sp, #4]
 800a89c:	7c3b      	ldrb	r3, [r7, #16]
 800a89e:	9300      	str	r3, [sp, #0]
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fa53 	bl	800ad4e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a8a8:	2300      	movs	r3, #0
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3708      	adds	r7, #8
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b082      	sub	sp, #8
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800a8be:	78fb      	ldrb	r3, [r7, #3]
 800a8c0:	4619      	mov	r1, r3
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 fa72 	bl	800adac <USBH_LL_ClosePipe>

  return USBH_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b084      	sub	sp, #16
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f000 f836 	bl	800a950 <USBH_GetFreePipe>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a8e8:	89fb      	ldrh	r3, [r7, #14]
 800a8ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d00a      	beq.n	800a908 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800a8f2:	78fa      	ldrb	r2, [r7, #3]
 800a8f4:	89fb      	ldrh	r3, [r7, #14]
 800a8f6:	f003 030f 	and.w	r3, r3, #15
 800a8fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	33e0      	adds	r3, #224	; 0xe0
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	440b      	add	r3, r1
 800a906:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a908:	89fb      	ldrh	r3, [r7, #14]
 800a90a:	b2db      	uxtb	r3, r3
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	460b      	mov	r3, r1
 800a91e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800a920:	78fb      	ldrb	r3, [r7, #3]
 800a922:	2b0a      	cmp	r3, #10
 800a924:	d80d      	bhi.n	800a942 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a926:	78fb      	ldrb	r3, [r7, #3]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	33e0      	adds	r3, #224	; 0xe0
 800a92c:	009b      	lsls	r3, r3, #2
 800a92e:	4413      	add	r3, r2
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	78fb      	ldrb	r3, [r7, #3]
 800a934:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a938:	6879      	ldr	r1, [r7, #4]
 800a93a:	33e0      	adds	r3, #224	; 0xe0
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	440b      	add	r3, r1
 800a940:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a958:	2300      	movs	r3, #0
 800a95a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800a95c:	2300      	movs	r3, #0
 800a95e:	73fb      	strb	r3, [r7, #15]
 800a960:	e00f      	b.n	800a982 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a962:	7bfb      	ldrb	r3, [r7, #15]
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	33e0      	adds	r3, #224	; 0xe0
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	4413      	add	r3, r2
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a972:	2b00      	cmp	r3, #0
 800a974:	d102      	bne.n	800a97c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a976:	7bfb      	ldrb	r3, [r7, #15]
 800a978:	b29b      	uxth	r3, r3
 800a97a:	e007      	b.n	800a98c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800a97c:	7bfb      	ldrb	r3, [r7, #15]
 800a97e:	3301      	adds	r3, #1
 800a980:	73fb      	strb	r3, [r7, #15]
 800a982:	7bfb      	ldrb	r3, [r7, #15]
 800a984:	2b0a      	cmp	r3, #10
 800a986:	d9ec      	bls.n	800a962 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a988:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3714      	adds	r7, #20
 800a990:	46bd      	mov	sp, r7
 800a992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a996:	4770      	bx	lr

0800a998 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a99c:	2201      	movs	r2, #1
 800a99e:	490e      	ldr	r1, [pc, #56]	; (800a9d8 <MX_USB_HOST_Init+0x40>)
 800a9a0:	480e      	ldr	r0, [pc, #56]	; (800a9dc <MX_USB_HOST_Init+0x44>)
 800a9a2:	f7fe fca1 	bl	80092e8 <USBH_Init>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d001      	beq.n	800a9b0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a9ac:	f7f7 f8da 	bl	8001b64 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a9b0:	490b      	ldr	r1, [pc, #44]	; (800a9e0 <MX_USB_HOST_Init+0x48>)
 800a9b2:	480a      	ldr	r0, [pc, #40]	; (800a9dc <MX_USB_HOST_Init+0x44>)
 800a9b4:	f7fe fd26 	bl	8009404 <USBH_RegisterClass>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a9be:	f7f7 f8d1 	bl	8001b64 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a9c2:	4806      	ldr	r0, [pc, #24]	; (800a9dc <MX_USB_HOST_Init+0x44>)
 800a9c4:	f7fe fdaa 	bl	800951c <USBH_Start>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a9ce:	f7f7 f8c9 	bl	8001b64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a9d2:	bf00      	nop
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800a9f9 	.word	0x0800a9f9
 800a9dc:	20000338 	.word	0x20000338
 800a9e0:	2000001c 	.word	0x2000001c

0800a9e4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a9e8:	4802      	ldr	r0, [pc, #8]	; (800a9f4 <MX_USB_HOST_Process+0x10>)
 800a9ea:	f7fe fda7 	bl	800953c <USBH_Process>
}
 800a9ee:	bf00      	nop
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	20000338 	.word	0x20000338

0800a9f8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800aa04:	78fb      	ldrb	r3, [r7, #3]
 800aa06:	3b01      	subs	r3, #1
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	d819      	bhi.n	800aa40 <USBH_UserProcess+0x48>
 800aa0c:	a201      	add	r2, pc, #4	; (adr r2, 800aa14 <USBH_UserProcess+0x1c>)
 800aa0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa12:	bf00      	nop
 800aa14:	0800aa41 	.word	0x0800aa41
 800aa18:	0800aa31 	.word	0x0800aa31
 800aa1c:	0800aa41 	.word	0x0800aa41
 800aa20:	0800aa39 	.word	0x0800aa39
 800aa24:	0800aa29 	.word	0x0800aa29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aa28:	4b09      	ldr	r3, [pc, #36]	; (800aa50 <USBH_UserProcess+0x58>)
 800aa2a:	2203      	movs	r2, #3
 800aa2c:	701a      	strb	r2, [r3, #0]
  break;
 800aa2e:	e008      	b.n	800aa42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa30:	4b07      	ldr	r3, [pc, #28]	; (800aa50 <USBH_UserProcess+0x58>)
 800aa32:	2202      	movs	r2, #2
 800aa34:	701a      	strb	r2, [r3, #0]
  break;
 800aa36:	e004      	b.n	800aa42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa38:	4b05      	ldr	r3, [pc, #20]	; (800aa50 <USBH_UserProcess+0x58>)
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	701a      	strb	r2, [r3, #0]
  break;
 800aa3e:	e000      	b.n	800aa42 <USBH_UserProcess+0x4a>

  default:
  break;
 800aa40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aa42:	bf00      	nop
 800aa44:	370c      	adds	r7, #12
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	200000cc 	.word	0x200000cc

0800aa54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b08a      	sub	sp, #40	; 0x28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa5c:	f107 0314 	add.w	r3, r7, #20
 800aa60:	2200      	movs	r2, #0
 800aa62:	601a      	str	r2, [r3, #0]
 800aa64:	605a      	str	r2, [r3, #4]
 800aa66:	609a      	str	r2, [r3, #8]
 800aa68:	60da      	str	r2, [r3, #12]
 800aa6a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa74:	d147      	bne.n	800ab06 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa76:	2300      	movs	r3, #0
 800aa78:	613b      	str	r3, [r7, #16]
 800aa7a:	4b25      	ldr	r3, [pc, #148]	; (800ab10 <HAL_HCD_MspInit+0xbc>)
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7e:	4a24      	ldr	r2, [pc, #144]	; (800ab10 <HAL_HCD_MspInit+0xbc>)
 800aa80:	f043 0301 	orr.w	r3, r3, #1
 800aa84:	6313      	str	r3, [r2, #48]	; 0x30
 800aa86:	4b22      	ldr	r3, [pc, #136]	; (800ab10 <HAL_HCD_MspInit+0xbc>)
 800aa88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa8a:	f003 0301 	and.w	r3, r3, #1
 800aa8e:	613b      	str	r3, [r7, #16]
 800aa90:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aa92:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aa96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aaa0:	f107 0314 	add.w	r3, r7, #20
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	481b      	ldr	r0, [pc, #108]	; (800ab14 <HAL_HCD_MspInit+0xc0>)
 800aaa8:	f7f7 fd54 	bl	8002554 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800aaac:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800aab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aab2:	2302      	movs	r3, #2
 800aab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab6:	2300      	movs	r3, #0
 800aab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaba:	2300      	movs	r3, #0
 800aabc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aabe:	230a      	movs	r3, #10
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aac2:	f107 0314 	add.w	r3, r7, #20
 800aac6:	4619      	mov	r1, r3
 800aac8:	4812      	ldr	r0, [pc, #72]	; (800ab14 <HAL_HCD_MspInit+0xc0>)
 800aaca:	f7f7 fd43 	bl	8002554 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aace:	4b10      	ldr	r3, [pc, #64]	; (800ab10 <HAL_HCD_MspInit+0xbc>)
 800aad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad2:	4a0f      	ldr	r2, [pc, #60]	; (800ab10 <HAL_HCD_MspInit+0xbc>)
 800aad4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad8:	6353      	str	r3, [r2, #52]	; 0x34
 800aada:	2300      	movs	r3, #0
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	4b0c      	ldr	r3, [pc, #48]	; (800ab10 <HAL_HCD_MspInit+0xbc>)
 800aae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae2:	4a0b      	ldr	r2, [pc, #44]	; (800ab10 <HAL_HCD_MspInit+0xbc>)
 800aae4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aae8:	6453      	str	r3, [r2, #68]	; 0x44
 800aaea:	4b09      	ldr	r3, [pc, #36]	; (800ab10 <HAL_HCD_MspInit+0xbc>)
 800aaec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaf2:	60fb      	str	r3, [r7, #12]
 800aaf4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	2100      	movs	r1, #0
 800aafa:	2043      	movs	r0, #67	; 0x43
 800aafc:	f7f7 fcf3 	bl	80024e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab00:	2043      	movs	r0, #67	; 0x43
 800ab02:	f7f7 fd0c 	bl	800251e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab06:	bf00      	nop
 800ab08:	3728      	adds	r7, #40	; 0x28
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	40023800 	.word	0x40023800
 800ab14:	40020000 	.word	0x40020000

0800ab18 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7ff f8db 	bl	8009ce2 <USBH_LL_IncTimer>
}
 800ab2c:	bf00      	nop
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7ff f913 	bl	8009d6e <USBH_LL_Connect>
}
 800ab48:	bf00      	nop
 800ab4a:	3708      	adds	r7, #8
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff f91c 	bl	8009d9c <USBH_LL_Disconnect>
}
 800ab64:	bf00      	nop
 800ab66:	3708      	adds	r7, #8
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b083      	sub	sp, #12
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	460b      	mov	r3, r1
 800ab76:	70fb      	strb	r3, [r7, #3]
 800ab78:	4613      	mov	r3, r2
 800ab7a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ab7c:	bf00      	nop
 800ab7e:	370c      	adds	r7, #12
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b082      	sub	sp, #8
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ab96:	4618      	mov	r0, r3
 800ab98:	f7ff f8cd 	bl	8009d36 <USBH_LL_PortEnabled>
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7ff f8cd 	bl	8009d52 <USBH_LL_PortDisabled>
}
 800abb8:	bf00      	nop
 800abba:	3708      	adds	r7, #8
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b082      	sub	sp, #8
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d12a      	bne.n	800ac28 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800abd2:	4a18      	ldr	r2, [pc, #96]	; (800ac34 <USBH_LL_Init+0x74>)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	4a15      	ldr	r2, [pc, #84]	; (800ac34 <USBH_LL_Init+0x74>)
 800abde:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abe2:	4b14      	ldr	r3, [pc, #80]	; (800ac34 <USBH_LL_Init+0x74>)
 800abe4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800abe8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800abea:	4b12      	ldr	r3, [pc, #72]	; (800ac34 <USBH_LL_Init+0x74>)
 800abec:	2208      	movs	r2, #8
 800abee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800abf0:	4b10      	ldr	r3, [pc, #64]	; (800ac34 <USBH_LL_Init+0x74>)
 800abf2:	2201      	movs	r2, #1
 800abf4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abf6:	4b0f      	ldr	r3, [pc, #60]	; (800ac34 <USBH_LL_Init+0x74>)
 800abf8:	2200      	movs	r2, #0
 800abfa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800abfc:	4b0d      	ldr	r3, [pc, #52]	; (800ac34 <USBH_LL_Init+0x74>)
 800abfe:	2202      	movs	r2, #2
 800ac00:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ac02:	4b0c      	ldr	r3, [pc, #48]	; (800ac34 <USBH_LL_Init+0x74>)
 800ac04:	2200      	movs	r2, #0
 800ac06:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800ac08:	480a      	ldr	r0, [pc, #40]	; (800ac34 <USBH_LL_Init+0x74>)
 800ac0a:	f7f7 fe8a 	bl	8002922 <HAL_HCD_Init>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d001      	beq.n	800ac18 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800ac14:	f7f6 ffa6 	bl	8001b64 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ac18:	4806      	ldr	r0, [pc, #24]	; (800ac34 <USBH_LL_Init+0x74>)
 800ac1a:	f7f8 fa67 	bl	80030ec <HAL_HCD_GetCurrentFrame>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	4619      	mov	r1, r3
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f7ff f84e 	bl	8009cc4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800ac28:	2300      	movs	r3, #0
}
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	3708      	adds	r7, #8
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	bd80      	pop	{r7, pc}
 800ac32:	bf00      	nop
 800ac34:	20000710 	.word	0x20000710

0800ac38 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b084      	sub	sp, #16
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7f8 f9d6 	bl	8003000 <HAL_HCD_Start>
 800ac54:	4603      	mov	r3, r0
 800ac56:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 f95c 	bl	800af18 <USBH_Get_USB_Status>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac64:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3710      	adds	r7, #16
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd80      	pop	{r7, pc}

0800ac6e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ac6e:	b580      	push	{r7, lr}
 800ac70:	b084      	sub	sp, #16
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac76:	2300      	movs	r3, #0
 800ac78:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ac84:	4618      	mov	r0, r3
 800ac86:	f7f8 f9de 	bl	8003046 <HAL_HCD_Stop>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
 800ac90:	4618      	mov	r0, r3
 800ac92:	f000 f941 	bl	800af18 <USBH_Get_USB_Status>
 800ac96:	4603      	mov	r3, r0
 800ac98:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3710      	adds	r7, #16
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800acac:	2301      	movs	r3, #1
 800acae:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7f8 fa26 	bl	8003108 <HAL_HCD_GetCurrentSpeed>
 800acbc:	4603      	mov	r3, r0
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d00c      	beq.n	800acdc <USBH_LL_GetSpeed+0x38>
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d80d      	bhi.n	800ace2 <USBH_LL_GetSpeed+0x3e>
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d002      	beq.n	800acd0 <USBH_LL_GetSpeed+0x2c>
 800acca:	2b01      	cmp	r3, #1
 800accc:	d003      	beq.n	800acd6 <USBH_LL_GetSpeed+0x32>
 800acce:	e008      	b.n	800ace2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73fb      	strb	r3, [r7, #15]
    break;
 800acd4:	e008      	b.n	800ace8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800acd6:	2301      	movs	r3, #1
 800acd8:	73fb      	strb	r3, [r7, #15]
    break;
 800acda:	e005      	b.n	800ace8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800acdc:	2302      	movs	r3, #2
 800acde:	73fb      	strb	r3, [r7, #15]
    break;
 800ace0:	e002      	b.n	800ace8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800ace2:	2301      	movs	r3, #1
 800ace4:	73fb      	strb	r3, [r7, #15]
    break;
 800ace6:	bf00      	nop
  }
  return  speed;
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
}
 800acea:	4618      	mov	r0, r3
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	b084      	sub	sp, #16
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acfa:	2300      	movs	r3, #0
 800acfc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acfe:	2300      	movs	r3, #0
 800ad00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7f8 f9b9 	bl	8003080 <HAL_HCD_ResetPort>
 800ad0e:	4603      	mov	r3, r0
 800ad10:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 f8ff 	bl	800af18 <USBH_Get_USB_Status>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3710      	adds	r7, #16
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	460b      	mov	r3, r1
 800ad32:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ad3a:	78fa      	ldrb	r2, [r7, #3]
 800ad3c:	4611      	mov	r1, r2
 800ad3e:	4618      	mov	r0, r3
 800ad40:	f7f8 f9c0 	bl	80030c4 <HAL_HCD_HC_GetXferCount>
 800ad44:	4603      	mov	r3, r0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad4e:	b590      	push	{r4, r7, lr}
 800ad50:	b089      	sub	sp, #36	; 0x24
 800ad52:	af04      	add	r7, sp, #16
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	4608      	mov	r0, r1
 800ad58:	4611      	mov	r1, r2
 800ad5a:	461a      	mov	r2, r3
 800ad5c:	4603      	mov	r3, r0
 800ad5e:	70fb      	strb	r3, [r7, #3]
 800ad60:	460b      	mov	r3, r1
 800ad62:	70bb      	strb	r3, [r7, #2]
 800ad64:	4613      	mov	r3, r2
 800ad66:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad68:	2300      	movs	r3, #0
 800ad6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ad76:	787c      	ldrb	r4, [r7, #1]
 800ad78:	78ba      	ldrb	r2, [r7, #2]
 800ad7a:	78f9      	ldrb	r1, [r7, #3]
 800ad7c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ad7e:	9302      	str	r3, [sp, #8]
 800ad80:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ad84:	9301      	str	r3, [sp, #4]
 800ad86:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad8a:	9300      	str	r3, [sp, #0]
 800ad8c:	4623      	mov	r3, r4
 800ad8e:	f7f7 fe2a 	bl	80029e6 <HAL_HCD_HC_Init>
 800ad92:	4603      	mov	r3, r0
 800ad94:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad96:	7bfb      	ldrb	r3, [r7, #15]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f000 f8bd 	bl	800af18 <USBH_Get_USB_Status>
 800ad9e:	4603      	mov	r3, r0
 800ada0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ada2:	7bbb      	ldrb	r3, [r7, #14]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd90      	pop	{r4, r7, pc}

0800adac <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800adb8:	2300      	movs	r3, #0
 800adba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800adbc:	2300      	movs	r3, #0
 800adbe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800adc6:	78fa      	ldrb	r2, [r7, #3]
 800adc8:	4611      	mov	r1, r2
 800adca:	4618      	mov	r0, r3
 800adcc:	f7f7 fe9a 	bl	8002b04 <HAL_HCD_HC_Halt>
 800add0:	4603      	mov	r3, r0
 800add2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800add4:	7bfb      	ldrb	r3, [r7, #15]
 800add6:	4618      	mov	r0, r3
 800add8:	f000 f89e 	bl	800af18 <USBH_Get_USB_Status>
 800addc:	4603      	mov	r3, r0
 800adde:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ade0:	7bbb      	ldrb	r3, [r7, #14]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3710      	adds	r7, #16
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}

0800adea <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800adea:	b590      	push	{r4, r7, lr}
 800adec:	b089      	sub	sp, #36	; 0x24
 800adee:	af04      	add	r7, sp, #16
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	4608      	mov	r0, r1
 800adf4:	4611      	mov	r1, r2
 800adf6:	461a      	mov	r2, r3
 800adf8:	4603      	mov	r3, r0
 800adfa:	70fb      	strb	r3, [r7, #3]
 800adfc:	460b      	mov	r3, r1
 800adfe:	70bb      	strb	r3, [r7, #2]
 800ae00:	4613      	mov	r3, r2
 800ae02:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae04:	2300      	movs	r3, #0
 800ae06:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800ae12:	787c      	ldrb	r4, [r7, #1]
 800ae14:	78ba      	ldrb	r2, [r7, #2]
 800ae16:	78f9      	ldrb	r1, [r7, #3]
 800ae18:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800ae1c:	9303      	str	r3, [sp, #12]
 800ae1e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ae20:	9302      	str	r3, [sp, #8]
 800ae22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae24:	9301      	str	r3, [sp, #4]
 800ae26:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ae2a:	9300      	str	r3, [sp, #0]
 800ae2c:	4623      	mov	r3, r4
 800ae2e:	f7f7 fe8d 	bl	8002b4c <HAL_HCD_HC_SubmitRequest>
 800ae32:	4603      	mov	r3, r0
 800ae34:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae36:	7bfb      	ldrb	r3, [r7, #15]
 800ae38:	4618      	mov	r0, r3
 800ae3a:	f000 f86d 	bl	800af18 <USBH_Get_USB_Status>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd90      	pop	{r4, r7, pc}

0800ae4c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	460b      	mov	r3, r1
 800ae56:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ae5e:	78fa      	ldrb	r2, [r7, #3]
 800ae60:	4611      	mov	r1, r2
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7f8 f91a 	bl	800309c <HAL_HCD_HC_GetURBState>
 800ae68:	4603      	mov	r3, r0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800ae84:	2b01      	cmp	r3, #1
 800ae86:	d103      	bne.n	800ae90 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 f870 	bl	800af70 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ae90:	20c8      	movs	r0, #200	; 0xc8
 800ae92:	f7f7 fa29 	bl	80022e8 <HAL_Delay>
  return USBH_OK;
 800ae96:	2300      	movs	r3, #0
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b085      	sub	sp, #20
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
 800aea8:	460b      	mov	r3, r1
 800aeaa:	70fb      	strb	r3, [r7, #3]
 800aeac:	4613      	mov	r3, r2
 800aeae:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800aeb6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800aeb8:	78fb      	ldrb	r3, [r7, #3]
 800aeba:	68fa      	ldr	r2, [r7, #12]
 800aebc:	212c      	movs	r1, #44	; 0x2c
 800aebe:	fb01 f303 	mul.w	r3, r1, r3
 800aec2:	4413      	add	r3, r2
 800aec4:	333b      	adds	r3, #59	; 0x3b
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d009      	beq.n	800aee0 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aecc:	78fb      	ldrb	r3, [r7, #3]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	212c      	movs	r1, #44	; 0x2c
 800aed2:	fb01 f303 	mul.w	r3, r1, r3
 800aed6:	4413      	add	r3, r2
 800aed8:	3354      	adds	r3, #84	; 0x54
 800aeda:	78ba      	ldrb	r2, [r7, #2]
 800aedc:	701a      	strb	r2, [r3, #0]
 800aede:	e008      	b.n	800aef2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aee0:	78fb      	ldrb	r3, [r7, #3]
 800aee2:	68fa      	ldr	r2, [r7, #12]
 800aee4:	212c      	movs	r1, #44	; 0x2c
 800aee6:	fb01 f303 	mul.w	r3, r1, r3
 800aeea:	4413      	add	r3, r2
 800aeec:	3355      	adds	r3, #85	; 0x55
 800aeee:	78ba      	ldrb	r2, [r7, #2]
 800aef0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3714      	adds	r7, #20
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b082      	sub	sp, #8
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f7f7 f9ed 	bl	80022e8 <HAL_Delay>
}
 800af0e:	bf00      	nop
 800af10:	3708      	adds	r7, #8
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
	...

0800af18 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	4603      	mov	r3, r0
 800af20:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af22:	2300      	movs	r3, #0
 800af24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800af26:	79fb      	ldrb	r3, [r7, #7]
 800af28:	2b03      	cmp	r3, #3
 800af2a:	d817      	bhi.n	800af5c <USBH_Get_USB_Status+0x44>
 800af2c:	a201      	add	r2, pc, #4	; (adr r2, 800af34 <USBH_Get_USB_Status+0x1c>)
 800af2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af32:	bf00      	nop
 800af34:	0800af45 	.word	0x0800af45
 800af38:	0800af4b 	.word	0x0800af4b
 800af3c:	0800af51 	.word	0x0800af51
 800af40:	0800af57 	.word	0x0800af57
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800af44:	2300      	movs	r3, #0
 800af46:	73fb      	strb	r3, [r7, #15]
    break;
 800af48:	e00b      	b.n	800af62 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800af4a:	2302      	movs	r3, #2
 800af4c:	73fb      	strb	r3, [r7, #15]
    break;
 800af4e:	e008      	b.n	800af62 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800af50:	2301      	movs	r3, #1
 800af52:	73fb      	strb	r3, [r7, #15]
    break;
 800af54:	e005      	b.n	800af62 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800af56:	2302      	movs	r3, #2
 800af58:	73fb      	strb	r3, [r7, #15]
    break;
 800af5a:	e002      	b.n	800af62 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800af5c:	2302      	movs	r3, #2
 800af5e:	73fb      	strb	r3, [r7, #15]
    break;
 800af60:	bf00      	nop
  }
  return usb_status;
 800af62:	7bfb      	ldrb	r3, [r7, #15]
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	4603      	mov	r3, r0
 800af78:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800af7a:	79fb      	ldrb	r3, [r7, #7]
 800af7c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800af7e:	79fb      	ldrb	r3, [r7, #7]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d102      	bne.n	800af8a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800af84:	2301      	movs	r3, #1
 800af86:	73fb      	strb	r3, [r7, #15]
 800af88:	e001      	b.n	800af8e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800af8e:	7bfb      	ldrb	r3, [r7, #15]
 800af90:	461a      	mov	r2, r3
 800af92:	2101      	movs	r1, #1
 800af94:	4803      	ldr	r0, [pc, #12]	; (800afa4 <MX_DriverVbusFS+0x34>)
 800af96:	f7f7 fc91 	bl	80028bc <HAL_GPIO_WritePin>
}
 800af9a:	bf00      	nop
 800af9c:	3710      	adds	r7, #16
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}
 800afa2:	bf00      	nop
 800afa4:	40020800 	.word	0x40020800

0800afa8 <__errno>:
 800afa8:	4b01      	ldr	r3, [pc, #4]	; (800afb0 <__errno+0x8>)
 800afaa:	6818      	ldr	r0, [r3, #0]
 800afac:	4770      	bx	lr
 800afae:	bf00      	nop
 800afb0:	2000003c 	.word	0x2000003c

0800afb4 <__libc_init_array>:
 800afb4:	b570      	push	{r4, r5, r6, lr}
 800afb6:	4d0d      	ldr	r5, [pc, #52]	; (800afec <__libc_init_array+0x38>)
 800afb8:	4c0d      	ldr	r4, [pc, #52]	; (800aff0 <__libc_init_array+0x3c>)
 800afba:	1b64      	subs	r4, r4, r5
 800afbc:	10a4      	asrs	r4, r4, #2
 800afbe:	2600      	movs	r6, #0
 800afc0:	42a6      	cmp	r6, r4
 800afc2:	d109      	bne.n	800afd8 <__libc_init_array+0x24>
 800afc4:	4d0b      	ldr	r5, [pc, #44]	; (800aff4 <__libc_init_array+0x40>)
 800afc6:	4c0c      	ldr	r4, [pc, #48]	; (800aff8 <__libc_init_array+0x44>)
 800afc8:	f000 f8f8 	bl	800b1bc <_init>
 800afcc:	1b64      	subs	r4, r4, r5
 800afce:	10a4      	asrs	r4, r4, #2
 800afd0:	2600      	movs	r6, #0
 800afd2:	42a6      	cmp	r6, r4
 800afd4:	d105      	bne.n	800afe2 <__libc_init_array+0x2e>
 800afd6:	bd70      	pop	{r4, r5, r6, pc}
 800afd8:	f855 3b04 	ldr.w	r3, [r5], #4
 800afdc:	4798      	blx	r3
 800afde:	3601      	adds	r6, #1
 800afe0:	e7ee      	b.n	800afc0 <__libc_init_array+0xc>
 800afe2:	f855 3b04 	ldr.w	r3, [r5], #4
 800afe6:	4798      	blx	r3
 800afe8:	3601      	adds	r6, #1
 800afea:	e7f2      	b.n	800afd2 <__libc_init_array+0x1e>
 800afec:	0800b1f8 	.word	0x0800b1f8
 800aff0:	0800b1f8 	.word	0x0800b1f8
 800aff4:	0800b1f8 	.word	0x0800b1f8
 800aff8:	0800b1fc 	.word	0x0800b1fc

0800affc <malloc>:
 800affc:	4b02      	ldr	r3, [pc, #8]	; (800b008 <malloc+0xc>)
 800affe:	4601      	mov	r1, r0
 800b000:	6818      	ldr	r0, [r3, #0]
 800b002:	f000 b863 	b.w	800b0cc <_malloc_r>
 800b006:	bf00      	nop
 800b008:	2000003c 	.word	0x2000003c

0800b00c <free>:
 800b00c:	4b02      	ldr	r3, [pc, #8]	; (800b018 <free+0xc>)
 800b00e:	4601      	mov	r1, r0
 800b010:	6818      	ldr	r0, [r3, #0]
 800b012:	f000 b80b 	b.w	800b02c <_free_r>
 800b016:	bf00      	nop
 800b018:	2000003c 	.word	0x2000003c

0800b01c <memset>:
 800b01c:	4402      	add	r2, r0
 800b01e:	4603      	mov	r3, r0
 800b020:	4293      	cmp	r3, r2
 800b022:	d100      	bne.n	800b026 <memset+0xa>
 800b024:	4770      	bx	lr
 800b026:	f803 1b01 	strb.w	r1, [r3], #1
 800b02a:	e7f9      	b.n	800b020 <memset+0x4>

0800b02c <_free_r>:
 800b02c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b02e:	2900      	cmp	r1, #0
 800b030:	d048      	beq.n	800b0c4 <_free_r+0x98>
 800b032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b036:	9001      	str	r0, [sp, #4]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	f1a1 0404 	sub.w	r4, r1, #4
 800b03e:	bfb8      	it	lt
 800b040:	18e4      	addlt	r4, r4, r3
 800b042:	f000 f8ad 	bl	800b1a0 <__malloc_lock>
 800b046:	4a20      	ldr	r2, [pc, #128]	; (800b0c8 <_free_r+0x9c>)
 800b048:	9801      	ldr	r0, [sp, #4]
 800b04a:	6813      	ldr	r3, [r2, #0]
 800b04c:	4615      	mov	r5, r2
 800b04e:	b933      	cbnz	r3, 800b05e <_free_r+0x32>
 800b050:	6063      	str	r3, [r4, #4]
 800b052:	6014      	str	r4, [r2, #0]
 800b054:	b003      	add	sp, #12
 800b056:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b05a:	f000 b8a7 	b.w	800b1ac <__malloc_unlock>
 800b05e:	42a3      	cmp	r3, r4
 800b060:	d90b      	bls.n	800b07a <_free_r+0x4e>
 800b062:	6821      	ldr	r1, [r4, #0]
 800b064:	1862      	adds	r2, r4, r1
 800b066:	4293      	cmp	r3, r2
 800b068:	bf04      	itt	eq
 800b06a:	681a      	ldreq	r2, [r3, #0]
 800b06c:	685b      	ldreq	r3, [r3, #4]
 800b06e:	6063      	str	r3, [r4, #4]
 800b070:	bf04      	itt	eq
 800b072:	1852      	addeq	r2, r2, r1
 800b074:	6022      	streq	r2, [r4, #0]
 800b076:	602c      	str	r4, [r5, #0]
 800b078:	e7ec      	b.n	800b054 <_free_r+0x28>
 800b07a:	461a      	mov	r2, r3
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	b10b      	cbz	r3, 800b084 <_free_r+0x58>
 800b080:	42a3      	cmp	r3, r4
 800b082:	d9fa      	bls.n	800b07a <_free_r+0x4e>
 800b084:	6811      	ldr	r1, [r2, #0]
 800b086:	1855      	adds	r5, r2, r1
 800b088:	42a5      	cmp	r5, r4
 800b08a:	d10b      	bne.n	800b0a4 <_free_r+0x78>
 800b08c:	6824      	ldr	r4, [r4, #0]
 800b08e:	4421      	add	r1, r4
 800b090:	1854      	adds	r4, r2, r1
 800b092:	42a3      	cmp	r3, r4
 800b094:	6011      	str	r1, [r2, #0]
 800b096:	d1dd      	bne.n	800b054 <_free_r+0x28>
 800b098:	681c      	ldr	r4, [r3, #0]
 800b09a:	685b      	ldr	r3, [r3, #4]
 800b09c:	6053      	str	r3, [r2, #4]
 800b09e:	4421      	add	r1, r4
 800b0a0:	6011      	str	r1, [r2, #0]
 800b0a2:	e7d7      	b.n	800b054 <_free_r+0x28>
 800b0a4:	d902      	bls.n	800b0ac <_free_r+0x80>
 800b0a6:	230c      	movs	r3, #12
 800b0a8:	6003      	str	r3, [r0, #0]
 800b0aa:	e7d3      	b.n	800b054 <_free_r+0x28>
 800b0ac:	6825      	ldr	r5, [r4, #0]
 800b0ae:	1961      	adds	r1, r4, r5
 800b0b0:	428b      	cmp	r3, r1
 800b0b2:	bf04      	itt	eq
 800b0b4:	6819      	ldreq	r1, [r3, #0]
 800b0b6:	685b      	ldreq	r3, [r3, #4]
 800b0b8:	6063      	str	r3, [r4, #4]
 800b0ba:	bf04      	itt	eq
 800b0bc:	1949      	addeq	r1, r1, r5
 800b0be:	6021      	streq	r1, [r4, #0]
 800b0c0:	6054      	str	r4, [r2, #4]
 800b0c2:	e7c7      	b.n	800b054 <_free_r+0x28>
 800b0c4:	b003      	add	sp, #12
 800b0c6:	bd30      	pop	{r4, r5, pc}
 800b0c8:	200000d0 	.word	0x200000d0

0800b0cc <_malloc_r>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	1ccd      	adds	r5, r1, #3
 800b0d0:	f025 0503 	bic.w	r5, r5, #3
 800b0d4:	3508      	adds	r5, #8
 800b0d6:	2d0c      	cmp	r5, #12
 800b0d8:	bf38      	it	cc
 800b0da:	250c      	movcc	r5, #12
 800b0dc:	2d00      	cmp	r5, #0
 800b0de:	4606      	mov	r6, r0
 800b0e0:	db01      	blt.n	800b0e6 <_malloc_r+0x1a>
 800b0e2:	42a9      	cmp	r1, r5
 800b0e4:	d903      	bls.n	800b0ee <_malloc_r+0x22>
 800b0e6:	230c      	movs	r3, #12
 800b0e8:	6033      	str	r3, [r6, #0]
 800b0ea:	2000      	movs	r0, #0
 800b0ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ee:	f000 f857 	bl	800b1a0 <__malloc_lock>
 800b0f2:	4921      	ldr	r1, [pc, #132]	; (800b178 <_malloc_r+0xac>)
 800b0f4:	680a      	ldr	r2, [r1, #0]
 800b0f6:	4614      	mov	r4, r2
 800b0f8:	b99c      	cbnz	r4, 800b122 <_malloc_r+0x56>
 800b0fa:	4f20      	ldr	r7, [pc, #128]	; (800b17c <_malloc_r+0xb0>)
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	b923      	cbnz	r3, 800b10a <_malloc_r+0x3e>
 800b100:	4621      	mov	r1, r4
 800b102:	4630      	mov	r0, r6
 800b104:	f000 f83c 	bl	800b180 <_sbrk_r>
 800b108:	6038      	str	r0, [r7, #0]
 800b10a:	4629      	mov	r1, r5
 800b10c:	4630      	mov	r0, r6
 800b10e:	f000 f837 	bl	800b180 <_sbrk_r>
 800b112:	1c43      	adds	r3, r0, #1
 800b114:	d123      	bne.n	800b15e <_malloc_r+0x92>
 800b116:	230c      	movs	r3, #12
 800b118:	6033      	str	r3, [r6, #0]
 800b11a:	4630      	mov	r0, r6
 800b11c:	f000 f846 	bl	800b1ac <__malloc_unlock>
 800b120:	e7e3      	b.n	800b0ea <_malloc_r+0x1e>
 800b122:	6823      	ldr	r3, [r4, #0]
 800b124:	1b5b      	subs	r3, r3, r5
 800b126:	d417      	bmi.n	800b158 <_malloc_r+0x8c>
 800b128:	2b0b      	cmp	r3, #11
 800b12a:	d903      	bls.n	800b134 <_malloc_r+0x68>
 800b12c:	6023      	str	r3, [r4, #0]
 800b12e:	441c      	add	r4, r3
 800b130:	6025      	str	r5, [r4, #0]
 800b132:	e004      	b.n	800b13e <_malloc_r+0x72>
 800b134:	6863      	ldr	r3, [r4, #4]
 800b136:	42a2      	cmp	r2, r4
 800b138:	bf0c      	ite	eq
 800b13a:	600b      	streq	r3, [r1, #0]
 800b13c:	6053      	strne	r3, [r2, #4]
 800b13e:	4630      	mov	r0, r6
 800b140:	f000 f834 	bl	800b1ac <__malloc_unlock>
 800b144:	f104 000b 	add.w	r0, r4, #11
 800b148:	1d23      	adds	r3, r4, #4
 800b14a:	f020 0007 	bic.w	r0, r0, #7
 800b14e:	1ac2      	subs	r2, r0, r3
 800b150:	d0cc      	beq.n	800b0ec <_malloc_r+0x20>
 800b152:	1a1b      	subs	r3, r3, r0
 800b154:	50a3      	str	r3, [r4, r2]
 800b156:	e7c9      	b.n	800b0ec <_malloc_r+0x20>
 800b158:	4622      	mov	r2, r4
 800b15a:	6864      	ldr	r4, [r4, #4]
 800b15c:	e7cc      	b.n	800b0f8 <_malloc_r+0x2c>
 800b15e:	1cc4      	adds	r4, r0, #3
 800b160:	f024 0403 	bic.w	r4, r4, #3
 800b164:	42a0      	cmp	r0, r4
 800b166:	d0e3      	beq.n	800b130 <_malloc_r+0x64>
 800b168:	1a21      	subs	r1, r4, r0
 800b16a:	4630      	mov	r0, r6
 800b16c:	f000 f808 	bl	800b180 <_sbrk_r>
 800b170:	3001      	adds	r0, #1
 800b172:	d1dd      	bne.n	800b130 <_malloc_r+0x64>
 800b174:	e7cf      	b.n	800b116 <_malloc_r+0x4a>
 800b176:	bf00      	nop
 800b178:	200000d0 	.word	0x200000d0
 800b17c:	200000d4 	.word	0x200000d4

0800b180 <_sbrk_r>:
 800b180:	b538      	push	{r3, r4, r5, lr}
 800b182:	4d06      	ldr	r5, [pc, #24]	; (800b19c <_sbrk_r+0x1c>)
 800b184:	2300      	movs	r3, #0
 800b186:	4604      	mov	r4, r0
 800b188:	4608      	mov	r0, r1
 800b18a:	602b      	str	r3, [r5, #0]
 800b18c:	f7f6 ffc8 	bl	8002120 <_sbrk>
 800b190:	1c43      	adds	r3, r0, #1
 800b192:	d102      	bne.n	800b19a <_sbrk_r+0x1a>
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	b103      	cbz	r3, 800b19a <_sbrk_r+0x1a>
 800b198:	6023      	str	r3, [r4, #0]
 800b19a:	bd38      	pop	{r3, r4, r5, pc}
 800b19c:	20000a14 	.word	0x20000a14

0800b1a0 <__malloc_lock>:
 800b1a0:	4801      	ldr	r0, [pc, #4]	; (800b1a8 <__malloc_lock+0x8>)
 800b1a2:	f000 b809 	b.w	800b1b8 <__retarget_lock_acquire_recursive>
 800b1a6:	bf00      	nop
 800b1a8:	20000a1c 	.word	0x20000a1c

0800b1ac <__malloc_unlock>:
 800b1ac:	4801      	ldr	r0, [pc, #4]	; (800b1b4 <__malloc_unlock+0x8>)
 800b1ae:	f000 b804 	b.w	800b1ba <__retarget_lock_release_recursive>
 800b1b2:	bf00      	nop
 800b1b4:	20000a1c 	.word	0x20000a1c

0800b1b8 <__retarget_lock_acquire_recursive>:
 800b1b8:	4770      	bx	lr

0800b1ba <__retarget_lock_release_recursive>:
 800b1ba:	4770      	bx	lr

0800b1bc <_init>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr

0800b1c8 <_fini>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr
